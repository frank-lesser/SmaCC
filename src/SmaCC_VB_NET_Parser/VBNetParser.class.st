Class {
	#name : #VBNetParser,
	#superclass : #SmaCCGLRParser,
	#classInstVars : [
		'keywords'
	],
	#category : #'SmaCC_VB_NET_Parser'
}

{ #category : #generated }
VBNetParser class >> ambiguousTransitions [
^#(
#[ 0 230 2 45] 
#[ 1 26 2 45] 
#[ 1 190 2 209] 
#[ 1 194 2 217] 
#[ 1 234 2 45] 
#[ 2 10 2 217] 
#[ 2 26 5 141] 
#[ 2 41 2 106] 
#[ 2 122 5 245] 
#[ 0 230 2 154] 
#[ 0 230 2 45 2 154] 
#[ 2 198 2 202] 
#[ 2 206 2 210] 
#[ 2 214 2 218] 
#[ 2 222 2 226] 
#[ 2 238 2 242] 
#[ 2 254 3 2] 
#[ 3 6 3 10] 
#[ 3 18 3 22] 
#[ 3 26 3 30] 
#[ 3 58 3 62] 
#[ 3 146 3 150] 
#[ 3 178 3 182] 
#[ 2 217 3 254] 
#[ 2 45 4 6] 
#[ 2 45 4 38] 
#[ 2 45 4 62] 
#[ 4 62 8 1] 
#[ 3 38 4 98] 
#[ 2 241 4 114] 
#[ 3 25 4 130] 
#[ 4 130 10 157] 
#[ 3 105 4 130] 
#[ 4 130 10 161] 
#[ 4 130 10 165] 
#[ 4 130 10 169] 
#[ 4 130 10 173] 
#[ 4 130 10 177] 
#[ 4 130 10 181] 
#[ 4 130 10 185] 
#[ 4 130 10 189] 
#[ 4 130 10 193] 
#[ 0 26 1 149] 
#[ 0 26 1 157] 
#[ 0 26 1 165] 
#[ 0 26 1 173] 
#[ 0 26 1 181] 
#[ 0 26 1 189] 
#[ 0 26 1 193] 
#[ 0 26 1 197] 
#[ 0 26 1 201] 
#[ 0 26 1 205] 
#[ 0 26 1 209] 
#[ 0 26 1 213] 
#[ 0 26 1 217] 
#[ 0 26 1 221] 
#[ 0 26 1 225] 
#[ 0 26 1 229] 
#[ 0 26 1 233] 
#[ 0 26 1 237] 
#[ 0 26 1 241] 
#[ 0 26 1 249] 
#[ 0 26 1 253] 
#[ 0 26 2 1] 
#[ 2 217 4 198] 
#[ 2 217 4 202] 
#[ 2 45 4 214] 
#[ 2 45 4 226] 
#[ 2 241 4 234] 
#[ 0 230 4 238] 
#[ 2 45 5 150] 
#[ 3 189 4 174] 
#[ 2 45 5 198] 
#[ 3 25 5 198] 
#[ 3 105 5 198] 
#[ 2 45 5 210] 
#[ 3 25 5 210] 
#[ 3 105 5 210] 
#[ 2 45 2 154] 
#[ 2 154 5 218] 
#[ 6 150 14 197] 
#[ 6 150 14 201] 
#[ 6 150 14 205] 
#[ 6 150 14 209] 
#[ 6 150 14 213] 
#[ 6 150 14 217] 
#[ 6 150 14 225] 
#[ 6 150 14 229] 
#[ 6 150 14 233] 
#[ 0 26 7 10] 
#[ 0 26 7 10 7 18] 
#[ 0 26 7 10 7 14 7 18] 
#[ 2 217 7 114] 
#[ 3 206 7 162] 
#[ 7 162 8 1] 
#[ 5 162 7 170] 
#[ 2 45 8 34] 
#[ 2 241 8 38] 
#[ 8 50 9 105] 
#[ 2 154 8 130] 
#[ 0 230 18 61] 
#[ 2 45 8 146] 
#[ 2 154 8 134] 
#[ 2 45 8 134] 
#[ 1 210 3 1] 
#[ 1 210 2 45] 
#[ 1 210 3 17] 
#[ 1 210 3 21] 
#[ 1 210 3 25] 
#[ 1 206 1 210] 
#[ 0 213 1 210] 
#[ 0 217 1 210] 
#[ 1 210 3 33] 
#[ 1 210 3 37] 
#[ 1 210 3 41] 
#[ 1 210 3 45] 
#[ 1 210 3 49] 
#[ 1 210 3 53] 
#[ 1 210 3 57] 
#[ 1 210 3 61] 
#[ 1 210 3 65] 
#[ 1 210 3 69] 
#[ 1 210 3 73] 
#[ 1 210 3 77] 
#[ 1 210 3 81] 
#[ 1 210 3 85] 
#[ 1 210 3 89] 
#[ 1 210 3 93] 
#[ 1 210 3 97] 
#[ 0 221 1 210] 
#[ 0 225 1 210] 
#[ 0 229 1 210] 
#[ 1 210 3 101] 
#[ 0 233 1 210] 
#[ 1 210 3 105] 
#[ 1 210 3 109] 
#[ 1 210 3 113] 
#[ 1 210 3 117] 
#[ 0 241 1 210] 
#[ 0 245 1 210] 
#[ 1 210 3 121] 
#[ 1 210 3 125] 
#[ 1 210 3 129] 
#[ 1 210 3 133] 
#[ 0 253 1 210] 
#[ 1 1 1 210] 
#[ 1 5 1 210] 
#[ 1 9 1 210] 
#[ 1 13 1 210] 
#[ 1 210 3 141] 
#[ 1 210 3 145] 
#[ 1 17 1 210] 
#[ 1 21 1 210] 
#[ 1 25 1 210] 
#[ 1 210 3 149] 
#[ 1 210 3 157] 
#[ 1 210 3 161] 
#[ 1 210 3 165] 
#[ 1 210 3 169] 
#[ 1 210 3 173] 
#[ 1 210 3 177] 
#[ 1 210 3 181] 
#[ 1 210 3 189] 
#[ 9 182 9 186] 
#[ 2 45 10 14] 
#[ 8 1 10 22] 
#[ 4 210 10 30] 
#[ 2 45 10 54] 
#[ 3 25 10 54] 
#[ 3 105 10 54] 
#[ 9 137 10 54] 
#[ 9 161 10 54] 
#[ 10 62 17 253] 
#[ 10 74 17 253] 
#[ 2 241 10 82] 
#[ 2 45 10 90] 
#[ 2 241 10 110] 
#[ 2 241 10 130] 
#[ 2 241 10 134] 
#[ 3 1 3 190] 
#[ 2 45 3 190] 
#[ 3 17 3 190] 
#[ 3 21 3 190] 
#[ 3 25 3 190] 
#[ 1 206 3 190] 
#[ 0 213 3 190] 
#[ 0 217 3 190] 
#[ 3 33 3 190] 
#[ 3 37 3 190] 
#[ 3 41 3 190] 
#[ 3 45 3 190] 
#[ 3 49 3 190] 
#[ 3 53 3 190] 
#[ 3 57 3 190] 
#[ 3 61 3 190] 
#[ 3 65 3 190] 
#[ 3 69 3 190] 
#[ 3 73 3 190] 
#[ 3 77 3 190] 
#[ 3 81 3 190] 
#[ 3 85 3 190] 
#[ 3 89 3 190] 
#[ 3 93 3 190] 
#[ 3 97 3 190] 
#[ 0 221 3 190] 
#[ 0 225 3 190] 
#[ 0 229 3 190] 
#[ 3 101 3 190] 
#[ 0 233 3 190] 
#[ 3 105 3 190] 
#[ 3 109 3 190] 
#[ 3 113 3 190] 
#[ 3 117 3 190] 
#[ 0 241 3 190] 
#[ 0 245 3 190] 
#[ 3 121 3 190] 
#[ 3 125 3 190] 
#[ 3 129 3 190] 
#[ 3 133 3 190] 
#[ 0 253 3 190] 
#[ 1 1 3 190] 
#[ 1 5 3 190] 
#[ 1 9 3 190] 
#[ 1 13 3 190] 
#[ 3 141 3 190] 
#[ 3 145 3 190] 
#[ 1 17 3 190] 
#[ 1 21 3 190] 
#[ 1 25 3 190] 
#[ 3 149 3 190] 
#[ 3 157 3 190] 
#[ 3 161 3 190] 
#[ 3 165 3 190] 
#[ 3 169 3 190] 
#[ 3 173 3 190] 
#[ 3 177 3 190] 
#[ 3 181 3 190] 
#[ 3 189 3 190] 
#[ 2 241 10 154] 
#[ 10 162 23 121] 
#[ 10 162 23 125] 
#[ 11 118 11 122] 
#[ 11 238 17 253] 
#[ 3 1 5 174] 
#[ 2 45 5 174 10 54] 
#[ 3 9 5 174 10 54] 
#[ 3 13 5 174 10 54] 
#[ 3 17 5 174] 
#[ 5 174 10 54] 
#[ 5 174 9 81] 
#[ 3 21 5 174] 
#[ 3 25 5 174 10 54] 
#[ 1 206 5 174] 
#[ 0 213 5 174] 
#[ 0 217 5 174] 
#[ 3 33 5 174] 
#[ 3 37 5 174] 
#[ 3 41 5 174] 
#[ 3 45 5 174] 
#[ 3 49 5 174] 
#[ 3 53 5 174] 
#[ 3 57 5 174] 
#[ 3 61 5 174] 
#[ 3 65 5 174] 
#[ 3 69 5 174] 
#[ 3 73 5 174] 
#[ 3 77 5 174] 
#[ 3 81 5 174] 
#[ 3 85 5 174] 
#[ 3 89 5 174] 
#[ 3 93 5 174] 
#[ 3 97 5 174] 
#[ 5 174 9 85] 
#[ 0 221 5 174] 
#[ 5 174 9 89] 
#[ 5 174 9 93] 
#[ 0 225 5 174] 
#[ 0 229 5 174] 
#[ 5 174 9 97] 
#[ 3 101 5 174] 
#[ 5 174 9 101] 
#[ 0 233 5 174] 
#[ 5 174 9 105] 
#[ 5 174 9 109] 
#[ 5 174 9 113] 
#[ 5 174 9 117] 
#[ 5 174 9 121] 
#[ 3 105 5 174 10 54] 
#[ 3 109 5 174] 
#[ 3 113 5 174] 
#[ 5 174 9 125] 
#[ 5 174 9 129] 
#[ 0 241 5 174] 
#[ 0 245 5 174] 
#[ 3 121 5 174] 
#[ 5 174 9 133] 
#[ 3 125 5 174] 
#[ 3 129 5 174] 
#[ 3 133 5 174] 
#[ 0 253 5 174] 
#[ 5 174 9 137 10 54] 
#[ 5 174 9 141] 
#[ 5 174 9 145] 
#[ 5 174 9 149] 
#[ 5 174 9 153] 
#[ 5 174 9 157] 
#[ 1 1 5 174] 
#[ 5 174 9 161 10 54] 
#[ 1 5 5 174] 
#[ 1 9 5 174] 
#[ 5 174 9 165] 
#[ 5 174 9 169] 
#[ 1 13 5 174] 
#[ 5 174 9 173] 
#[ 5 174 9 177] 
#[ 5 174 9 181] 
#[ 3 141 5 174] 
#[ 3 145 5 174] 
#[ 1 17 5 174] 
#[ 1 21 5 174] 
#[ 1 25 5 174] 
#[ 5 174 9 185] 
#[ 5 174 9 189] 
#[ 5 174 9 193] 
#[ 5 174 9 197] 
#[ 3 149 5 174] 
#[ 3 157 5 174] 
#[ 3 161 5 174] 
#[ 5 174 9 205] 
#[ 3 165 5 174] 
#[ 3 169 5 174] 
#[ 3 173 5 174] 
#[ 3 177 5 174] 
#[ 3 181 5 174] 
#[ 5 174 9 209] 
#[ 12 18 26 209] 
#[ 2 241 12 110] 
#[ 0 213 4 170] 
#[ 0 217 4 170] 
#[ 0 221 4 170] 
#[ 0 225 4 170] 
#[ 0 229 4 170] 
#[ 0 233 4 170] 
#[ 0 237 4 170] 
#[ 0 241 4 170] 
#[ 0 245 4 170] 
#[ 0 253 4 170] 
#[ 1 1 4 170] 
#[ 1 5 4 170] 
#[ 1 9 4 170] 
#[ 1 13 4 170] 
#[ 1 17 4 170] 
#[ 1 21 4 170] 
#[ 1 25 4 170] 
#[ 1 29 4 170] 
#[ 0 213 6 238] 
#[ 0 217 6 238] 
#[ 0 221 6 238] 
#[ 0 225 6 238] 
#[ 0 229 6 238] 
#[ 0 233 6 238] 
#[ 0 237 6 238] 
#[ 0 241 6 238] 
#[ 0 245 6 238] 
#[ 0 253 6 238] 
#[ 1 1 6 238] 
#[ 1 5 6 238] 
#[ 1 9 6 238] 
#[ 1 13 6 238] 
#[ 1 17 6 238] 
#[ 1 21 6 238] 
#[ 1 25 6 238] 
#[ 1 29 6 238] 
#[ 11 122 14 246] 
#[ 11 122 16 154] 
#[ 2 45 17 218] 
#[ 3 25 17 218] 
#[ 3 105 17 218] 
#[ 2 45 18 198] 
#[ 3 25 18 198] 
#[ 3 105 18 198] 
#[ 2 45 18 210] 
#[ 3 25 18 210] 
#[ 3 105 18 210] 
#[ 2 241 19 134] 
#[ 2 45 20 38] 
#[ 3 25 20 38] 
#[ 3 105 20 38]
	).
]

{ #category : #'generated-accessing' }
VBNetParser class >> cacheId [
	^'2020-06-23T15:54:55.11068-05:00'
]

{ #category : #generated }
VBNetParser class >> definitionComment [
"/* Much of this grammar was copied and modified for SmaCC from https://github.com/dotnet/vblang/tree/master/spec
(commit 19ec79a287fb79180b05a0ad20e8291e75fc63df) which has the following license:
---------------------------------
The MIT License (MIT)

Copyright (c) .NET Foundation and Contributors

All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
---------------------------------
*/

%glr;
%ignorecase;
%id <LineTerminator> <Identifier> <IdentifierOrKeyword>;

%ignore_variable_warning <LineTerminator>;

%left ""Xor"";
%left ""Or"" ""OrElse"";
%left ""And"" ""AndAlso"";
%right ""Not"";
%nonassoc ""=""  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"";
%left ""+"" ""-"";
%left ""Mod"";
%left ""\"";
%left ""*"" ""/"";
# unary negation
%right ""^"";
%right ""Await"";

%prefix VBNet;
%suffix Node;
%root Program;

%hierarchy Expression (
    AddressOfExpression
    AnonymousCreationExpression
    ArrayCreationExpression
    AwaitExpression
    BinaryExpression
    CastExpression
    CollectionInitializer
    ConditionalExpression
    DictionaryAccessExpression
    GetTypeExpression
    InvocationExpression
    InstanceExpression
    LambdaExpression
    Literal
    MemberAccessExpression
    ObjectCreationExpression
    PrimitiveCastExpression
    QueryExpression
    SimpleNameExpression
    TypeOfIsExpression
    UnaryExpression
);
%hierarchy LambdaExpression (
    FunctionLambdaExpression
    SubLambdaExpression
);
%hierarchy Literal (
    BooleanLiteral
    CharacterLiteral
    DateLiteral
    FloatingPointLiteral
    IntegerLiteral
    NothingLiteral
    StringLiteral
);
%hierarchy Statement (
    AddHandlerStatement
    AssignmentStatement
    ContinueStatement
    DoLoopStatement
    EndStatement
    EraseStatement
    ErrorStatement
    ExitStatement
    ForEachStatement
    ForStatement
    GoToStatement
    IfStatement
    InvocationStatement
    LabelDeclarationStatement
    LocalDeclarationStatement
    MidAssignmentStatement
    OnErrorStatement
    RaiseEventStatement
    RedimStatement
    RemoveHandlerStatement
    ResumeStatement
    ReturnStatement
    SelectStatement
    StopStatement
    SyncLockStatement
    ThrowStatement
    TryStatement
    UsingStatement
    WhileStatement
    WithStatement
    YieldStatement
);
%hierarchy DoLoopStatement (
    DoBottomLoopStatement
    DoTopLoopStatement
);

File : <LineTerminator>* Start {{}};


# 2. Lexical grammar


<Character>:
    [^\r\n\x2028\x2029]
    ;

<LineTerminator>    ###
    : \r
    | \n
    | \r\n
    | \x2028
    | \x2029
    ;

<LineContinuation>
    : _ <whitespace>* (\r\n? | \n | \x2028 | \x2029) ###
    ;

Comma
    : "","" 'comma' <LineTerminator>?
    ;

#Period
#    : ""."" 'period' <LineTerminator>?
#    ;

OpenParenthesis
    : ""("" 'leftParen' <LineTerminator>?
    ;

CloseParenthesis
    : <LineTerminator>? "")"" 'rightParen'
    ;

OpenCurlyBrace
    : ""{"" 'leftBrace' <LineTerminator>?
    ;

CloseCurlyBrace
    : <LineTerminator>? ""}"" 'rightBrace'
    ;

Equals
    : ""="" 'equals' <LineTerminator>?
    ;

ColonEquals
    : "":="" 'colonEquals' <LineTerminator>?
    ;

<whitespace>
    : [\t\ ]+
    ;

<comment>
    : <CommentMarker> <Character>*
    ;

<CommentMarker>
    : <SingleQuoteCharacter>
    | REM
    ;

<SingleQuoteCharacter>
    : \'
    | \x2018
    | \x2019
    ;

<NonEscapedIdentifier>
    : <IdentifierName> # <Any IdentifierName but not Keyword>
    ;

<EscapedIdentifier>
    : \[ <IdentifierName> \]
    ;

<IdentifierName>
    : <IdentifierStart> <IdentifierCharacter>*
    ;

<IdentifierStart>
    : <AlphaCharacter>
    | <UnderscoreCharacter> <IdentifierCharacter>
    ;

<IdentifierCharacter>
    : <UnderscoreCharacter>
    | <AlphaCharacter>
    | <NumericCharacter>
    | <CombiningCharacter>
#    | <FormattingCharacter>
    ;

<AlphaCharacter>
    : <isLetter>
    ;

<NumericCharacter>
    : <isDigit>
    ;

<CombiningCharacter>
    : [\x0300-\x036F]
    ;

#<FormattingCharacter>
#    : \<Unicode\ formatting\ character\ class\ Cf\>
#    ;

<UnderscoreCharacter>
    : _ # <Unicode connection character class Pc>
    ;

<TypeCharacter>
    : <IntegerTypeCharacter>
    | <LongTypeCharacter>
    | <DecimalTypeCharacter>
    | <SingleTypeCharacter>
    | <DoubleTypeCharacter>
    | <StringTypeCharacter>
    ;

<IntegerTypeCharacter>
    : \%
    ;

<LongTypeCharacter>
    : \&
    ;

<DecimalTypeCharacter>
    : \@
    ;

<SingleTypeCharacter>
    : \!
    ;

<DoubleTypeCharacter>
    : \#
    ;

<StringTypeCharacter>
    : \$
    ;

Literal
    : <BooleanLiteral> 'value' {{BooleanLiteral}}
    | <IntegerLiteral> 'value' {{IntegerLiteral}}
    | <FloatingPointLiteral> 'value' {{FloatingPointLiteral}}
    | <StringLiteral> 'value' {{StringLiteral}}
    | <CharacterLiteral> 'value' {{CharacterLiteral}}
    | <DateLiteral> 'value' {{DateLiteral}}
    | <Nothing> 'value' {{NothingLiteral}}
    ;

<BooleanLiteral>
    : True | False
    ;

<IntegerLiteral>
    : <IntegralLiteralValue> <IntegralTypeCharacter>?
    ;

<IntegralLiteralValue>
    : <IntLiteral>
    | <HexLiteral>
    | <OctalLiteral>
    ;

<IntegralTypeCharacter>
    : <ShortCharacter>
    | <UnsignedShortCharacter>
    | <IntegerCharacter>
    | <UnsignedIntegerCharacter>
    | <LongCharacter>
    | <UnsignedLongCharacter>
    | <IntegerTypeCharacter>
    | <LongTypeCharacter>
    ;

<ShortCharacter>
    : S
    ;

<UnsignedShortCharacter>
    : US
    ;

<IntegerCharacter>
    : I
    ;

<UnsignedIntegerCharacter>
    : UI
    ;

<LongCharacter>
    : L
    ;

<UnsignedLongCharacter>
    : UL
    ;

<IntLiteral>
    : <Digit>+
    ;

<HexLiteral>
    : \& H <HexDigit>+
    ;

<OctalLiteral>
    : \& O <OctalDigit>+
    ;

<Digit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    ;

<HexDigit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    | A | B | C | D | E | F
    ;

<OctalDigit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
    ;

<FloatingPointLiteral>
    : <FloatingPointLiteralValue> <FloatingPointTypeCharacter>?
    | <IntLiteral> <FloatingPointTypeCharacter>
    ;

<FloatingPointTypeCharacter>
    : <SingleCharacter>
    | <DoubleCharacter>
    | <DecimalCharacter>
    | <SingleTypeCharacter>
    | <DoubleTypeCharacter>
    | <DecimalTypeCharacter>
    ;

<SingleCharacter>
    : F
    ;

<DoubleCharacter>
    : R
    ;

<DecimalCharacter>
    : D
    ;

<FloatingPointLiteralValue>
    : <IntLiteral> \. <IntLiteral> <Exponent>?
    | \. <IntLiteral> <Exponent>?
    | <IntLiteral> <Exponent>
    ;

<Exponent>
    : E <Sign>? <IntLiteral>
    ;

<Sign>
    : \+
    | \-
    ;

<StringLiteral>
    : <DoubleQuoteCharacter> <StringCharacter>* <DoubleQuoteCharacter>
    ;

<DoubleQuoteCharacter>
    : \""
    | \x201c
    | \x201D
    ;

<StringCharacter>
    : [^\""\x201c\x201D]
    | <DoubleQuoteCharacter> <DoubleQuoteCharacter>
    ;

<CharacterLiteral>
    : <DoubleQuoteCharacter> <StringCharacter> <DoubleQuoteCharacter> C
    ;

<DateLiteral>
    : \# <whitespace>* <DateOrTime> <whitespace>* \#
    ;

<DateOrTime>
    : <DateValue> <whitespace>+ <TimeValue>
    | <DateValue>
    | <TimeValue>
    ;

<DateValue>
    : <MonthValue> \/ <DayValue> \/ <YearValue>
    | <MonthValue> \- <DayValue> \- <YearValue>
    ;

<TimeValue>
    : <HourValue> \: <MinuteValue> ( \: <SecondValue> )? <whitespace>* <AMPM>?
    | <HourValue> <whitespace>* <AMPM>
    ;

<MonthValue>
    : <IntLiteral>
    ;

<DayValue>
    : <IntLiteral>
    ;

<YearValue>
    : <IntLiteral>
    ;

<HourValue>
    : <IntLiteral>
    ;

<MinuteValue>
    : <IntLiteral>
    ;

<SecondValue>
    : <IntLiteral>
    ;

<AMPM>
    : AM | PM
    ;

<ElseIf>
    : ElseIf
    | Else <whitespace> If
    ;

<Nothing>
    : Nothing
    ;

<Separator>
    : \( | \) | \{ | \} | \! | \# | \, | \. | \: | \?
    ;

<Operator>
    : \& | \* | \+ | \- | \/ | \\ | \^ | \< | \= | \>
    ;

# Moved from above
<IdentifierOrKeyword>
    : <Identifier>
#    | <Keyword>    ### not needed
    ;

<Identifier>
    : <NonEscapedIdentifier> <TypeCharacter>?
#    | <Keyword> <TypeCharacter>    ###
    | <EscapedIdentifier>
    ;

/*
<Keyword>
    : ""AddHandler""      | ""AddressOf""      | ""Alias""       | ""And""
    | ""AndAlso""         | ""As""             | ""Boolean""     | ""ByRef""
	| ""Byte""            | ""ByVal""          | ""Call""        | ""Case""        
	| ""Catch""           | ""CBool""          | ""CByte""       | ""CChar""       
	| ""CDate""           | ""CDbl""           | ""CDec""        | ""Char""        
	| ""CInt""            | ""Class""          | ""CLng""        | ""CObj""        
	| ""Const""           | ""Continue""       | ""CSByte""      | ""CShort""      
	| ""CSng""            | ""CStr""           | ""CType""       | ""CUInt""       
	| ""CULng""           | ""CUShort""        | ""Date""        | ""Decimal""     
	| ""Declare""         | ""Default""        | ""Delegate""    | ""Dim""         
	| ""DirectCast""      | ""Do""             | ""Double""      | ""Each""        
	| ""Else""            | <ElseIf>         | ""End""         | ""EndIf""       
	| ""Enum""            | ""Erase""          | ""Error""       | ""Event""       
	| ""Exit""            | ""False""          | ""Finally""     | ""For""         
	| ""Friend""          | ""Function""       | ""Get""         | ""GetType""     
	| ""GetXmlNamespace"" | ""Global""         | ""GoSub""       | ""GoTo""        
	| ""Handles""         | ""If""             | ""Implements""  | ""Imports""     
	| ""In""              | ""Inherits""       | ""Integer""     | ""Interface""   
	| ""Is""              | ""IsNot""          | ""Let""         | ""Lib""         
	| ""Like""            | ""Long""           | ""Loop""        | ""Me""          
	| ""Mod""             | ""Module""         | ""MustInherit"" | ""MustOverride""
	| ""MyBase""          | ""MyClass""        | ""Namespace""   | ""Narrowing""   
	| ""New""             | ""Next""           | ""Not""         | <Nothing>     
	| ""NotInheritable""  | ""NotOverridable"" | ""Object""      | ""Of""          
	| ""On""              | ""Operator""       | ""Option""      | ""Optional""    
	| ""Or""              | ""OrElse""         | ""Overloads""   | ""Overridable"" 
	| ""Overrides""       | ""ParamArray""     | ""Partial""     | ""Private""     
	| ""Property""        | ""Protected""      | ""Public""      | ""RaiseEvent""  
	| ""ReadOnly""        | ""ReDim""          | ""REM""         | ""RemoveHandler""
	| ""Resume""          | ""Return""         | ""SByte""       | ""Select""      
	| ""Set""             | ""Shadows""        | ""Shared""      | ""Short""       
	| ""Single""          | ""Static""         | ""Step""        | ""Stop""        
	| ""String""          | ""Structure""      | ""Sub""         | ""SyncLock""    
	| ""Then""            | ""Throw""          | ""To""          | ""True""        
	| ""Try""             | ""TryCast""        | ""TypeOf""      | ""UInteger""    
	| ""ULong""           | ""UShort""         | ""Using""       | ""Variant""     
	| ""Wend""            | ""When""           | ""While""       | ""Widening""    
	| ""With""            | ""WithEvents""     | ""WriteOnly""   | ""Xor""         
    ;
*/

# 3. Preprocessing Directives

# hacked to ignore in scanner

<preprocessorDirective>
    : \# [\t ]* (Const | If | Else | End | ExternalSource | Region | ExternalChecksum) [^\r\n\x2028\x2029]* (\r\n? | \n | \x2028 | \x2029)?
    ;

# 4. General concepts

#AccessModifier
#    : ""Public"" 
#    | ""Protected""
#    | ""Friend""
#    | ""Private""
##    | ""Protected"" ""Friend""	### not needed since we are already in a list
#    ;

TypeParameterList
    : OpenParenthesis ""Of"" 'ofToken' TypeParameter 'type' ( Comma TypeParameter 'typeParameter' )* CloseParenthesis {{}}
    ;

TypeParameter
    : VarianceModifier 'modifier'? <Identifier> 'name' TypeParameterConstraints? {{}}
    ;

VarianceModifier
    : ""In"" | ""Out""
    ;

TypeParameterConstraints
    : ""As"" 'asToken' Constraint 'constraint'
    | ""As"" 'asToken' OpenCurlyBrace ConstraintList CloseCurlyBrace
    ;

ConstraintList
    : Constraint 'constraint' ( Comma Constraint 'constraint' )*
    ;

Constraint
    : TypeName 'type' {{TypeConstraint}}
    | ""New"" 'newToken' {{NewConstraint}}
    | ""Structure"" 'structureToken' {{StructureConstraint}}
    | ""Class"" 'classToken' {{ClassConstraint}}
    ;



# 5. Attributes

Attributes
    : AttributeBlock 'attributeBlock'+
    ;

AttributeBlock
    : ""<"" 'ltToken' AttributeList <LineTerminator>? "">"" 'gt' (<LineTerminator> | "":"" 'statementSeparator')? {{}} ###
    ;

AttributeList
    : Attribute 'attribute' ( Comma Attribute 'attribute' )*
    ;

Attribute
    : ( AttributeModifier 'modifier' "":"" 'colonToken' )? SimpleTypeName 'type'
    ( OpenParenthesis AttributeArguments? CloseParenthesis )? {{}}
    ;

AttributeModifier
    : ""Assembly"" | ""Module""
    ;

AttributeArguments
    : AttributePositionalArgumentList
    | AttributePositionalArgumentList Comma VariablePropertyInitializerList
    | VariablePropertyInitializerList
    ;

AttributePositionalArgumentList
    : AttributeArgumentExpression 'argument' ( Comma AttributeArgumentExpression 'argument'? )*
    ;

VariablePropertyInitializerList
    : VariablePropertyInitializer 'argument' ( Comma VariablePropertyInitializer 'argument' )*
    ;

VariablePropertyInitializer
    : <IdentifierOrKeyword> 'name' ColonEquals AttributeArgumentExpression 'value' {{}}
    ;

AttributeArgumentExpression
    : ConstantExpression
#    | GetTypeExpression    ###
#    | ArrayExpression  ###
    ;



# 6. Source files and namespaces

Start
    : OptionStatement 'option'* ImportsStatement 'import'* /* AttributesStatement* */ (NamespaceMemberDeclaration+ | Attributes?)	###
    ;

#StatementTerminator
#    : <LineTerminator> 
#    | "":"" 'statementSeparator'
#    ;

#AttributesStatement
#    : Attributes (<LineTerminator> | "":"" 'statementSeparator')
#    ;

OptionStatement
    : OptionExplicitStatement
    | OptionStrictStatement
    | OptionCompareStatement
    | OptionInferStatement
    ;

OptionExplicitStatement
    : ""Option"" 'optionToken' ""Explicit"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

OnOff
    : ""On"" 'onToken' | ""Off""
    ;

OptionStrictStatement
    : ""Option"" 'optionToken' ""Strict"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

OptionCompareStatement
    : ""Option"" 'optionToken' ""Compare"" 'option' CompareOption 'value' (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

CompareOption
    : ""Binary"" | ""Text""
    ;

OptionInferStatement
    : ""Option"" 'optionToken' ""Infer"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

ImportsStatement
    : ""Imports"" 'importsToken' ImportsClauses (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ImportsClauses
    : ImportsClause 'import' ( Comma ImportsClause 'import' )*
    ;

ImportsClause
    : AliasImportsClause
    | MembersImportsClause
#    | XMLNamespaceImportsClause    ### not yet implemented
    ;

AliasImportsClause
    : <Identifier> 'name' Equals TypeName 'type' {{}}
    ;

MembersImportsClause
    : TypeName 'type' {{}}
    ;

#XMLNamespaceImportsClause
#    : ""<"" 'ltToken' XMLNamespaceAttributeName XMLWhitespace? Equals XMLWhitespace?
#      XMLNamespaceValue "">"" 'gtToken' {{}}
#    ;

#XMLNamespaceValue
#    : <DoubleQuoteCharacter> XMLAttributeDoubleQuoteValueCharacter* <DoubleQuoteCharacter>
#    | <SingleQuoteCharacter> XMLAttributeSingleQuoteValueCharacter* <SingleQuoteCharacter>
#    ;

NamespaceDeclaration
    : ""Namespace"" 'namespaceToken' NamespaceName (<LineTerminator> | "":"" 'statementSeparator')
      NamespaceMemberDeclaration*
      ""End"" 'endToken' ""Namespace"" 'namespaceToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

NamespaceName
    : RelativeNamespaceName
    | ""Global"" 'globalToken'
    | ""Global"" 'globalToken' ""."" 'period' <LineTerminator>? RelativeNamespaceName    ###
    ;

RelativeNamespaceName
    : <Identifier> 'name' ( ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name')*
    ;

NamespaceMemberDeclaration
    : AttributesNamespaceDeclaration
    | TypeDeclaration 'declaration'
    ;
 AttributesNamespaceDeclaration
	: Attributes? NamespaceDeclaration 'declaration'		### moved Attributes here from Start
	;

TypeDeclaration
    : ModuleDeclaration
    | NonModuleDeclaration
    ;

NonModuleDeclaration
    : EnumDeclaration
    | StructureDeclaration
    | InterfaceDeclaration
    | ClassDeclaration
    | DelegateDeclaration
    ;




# 7. Types


TypeName
    : ArrayTypeName
    | NonArrayTypeName
    ;

NonArrayTypeName
    : SimpleTypeName
    | NullableTypeName
    ;

SimpleTypeName
    : QualifiedTypeName
    | BuiltInTypeName
    ;

QualifiedTypeName
    : <Identifier> 'name' TypeArguments? (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArguments?)* {{}}
    | ""Global"" 'globalToken' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArguments?
      (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArguments?)* {{}}
    ;

TypeArguments
    : OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis
    ;

TypeArgumentList
    : TypeName 'type' ( Comma TypeName 'type')*
    ;

BuiltInTypeName
    : ""Object"" 'name' {{}}
    | PrimitiveTypeName 'name' {{}}
    ;

#TypeModifier
#    : AccessModifier
#    | ""Shadows""
#    ;

IdentifierModifiers
    : NullableNameModifier? ArrayNameModifier?
    ;

NullableTypeName
    : NonArrayTypeName 'type' ""?"" 'nullableToken' {{}}
    ;

NullableNameModifier
    : ""?"" 'nullableToken'
    ;

TypeImplementsClause
    : ""Implements"" 'implementsToken' TypeImplements (<LineTerminator> | "":"" 'statementSeparator')
    ;

TypeImplements
    : NonArrayTypeName 'implements' ( Comma NonArrayTypeName 'implements')*
    ;

PrimitiveTypeName
    : NumericTypeName
    | ""Boolean""
    | ""Date""
    | ""Char""
    | ""String""
    ;

NumericTypeName
    : IntegralTypeName
    | FloatingPointTypeName
    | ""Decimal""
    ;

IntegralTypeName
    : ""Byte"" | ""SByte"" | ""UShort"" | ""Short"" | ""UInteger""
    | ""Integer"" | ""ULong"" | ""Long""
    ;

FloatingPointTypeName
    : ""Single"" | ""Double""
    ;

EnumDeclaration
    : Attributes? AllModifiers 'modifier'* ""Enum"" 'enumToken' <Identifier> 'name'
      ( ""As"" 'asToken' NonArrayTypeName 'type' )? (<LineTerminator> | "":"" 'statementSeparator')
      EnumMemberDeclaration 'declaration'+
      ""End"" 'endToken' ""Enum"" 'enumToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

EnumMemberDeclaration
    : Attributes? <Identifier> 'name' ( Equals ConstantExpression 'value')? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ClassDeclaration
    : Attributes? AllModifiers 'modifier'* ""Class"" 'classToken' <Identifier> 'name' TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      ClassBase?
      TypeImplementsClause*
      ClassMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Class"" 'classToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#ClassModifier
#    : TypeModifier
#    | ""MustInherit""
#    | ""NotInheritable""
#    | ""Partial""
#    ;

ClassBase
    : ""Inherits"" 'inheritsToken' NonArrayTypeName 'inherits' (<LineTerminator> | "":"" 'statementSeparator')
    ;

ClassMemberDeclaration
    : NonModuleDeclaration
    | EventMemberDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    | OperatorDeclaration
    ;

StructureDeclaration
    : Attributes? AllModifiers 'modifier'* ""Structure"" 'structureToken' <Identifier> 'name'
      TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      TypeImplementsClause*
      StructMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Structure"" 'structureToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#StructureModifier
#    : TypeModifier
#    | ""Partial""
#    ;

StructMemberDeclaration
    : NonModuleDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | EventMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    | OperatorDeclaration
    ;

ModuleDeclaration
    : Attributes? AllModifiers 'modifier'* ""Module"" 'moduleToken' <Identifier> 'name' (<LineTerminator> | "":"" 'statementSeparator')
      ModuleMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Module"" 'moduleToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ModuleMemberDeclaration
    : NonModuleDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | EventMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    ;

InterfaceDeclaration
    : Attributes? AllModifiers 'modifier'* ""Interface"" 'interfaceToken' <Identifier> 'name'
      TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      InterfaceBase*
      InterfaceMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Interface"" 'interfaceToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

InterfaceBase
    : ""Inherits"" 'inheritsToken' InterfaceBases (<LineTerminator> | "":"" 'statementSeparator')
    ;

InterfaceBases
    : NonArrayTypeName 'inherits' ( Comma NonArrayTypeName 'inherits')*
    ;

InterfaceMemberDeclaration
    : NonModuleDeclaration
    | InterfaceEventMemberDeclaration
    | InterfaceMethodMemberDeclaration
    | InterfacePropertyMemberDeclaration
    ;

ArrayTypeName
    : NonArrayTypeName 'type' ArrayTypeModifiers {{}}
    ;

ArrayTypeModifiers
    : ArrayTypeModifier 'arrayTypeModifier'+
    ;

ArrayTypeModifier
    : OpenParenthesis RankList? CloseParenthesis {{}}
    ;

RankList
    : Comma+    ### convert to one or more since use is optional
    ;

ArrayNameModifier
    : ArrayTypeModifiers
    | ArraySizeInitializationModifier
    ;

DelegateDeclaration
    : Attributes? AllModifiers 'modifier'* ""Delegate"" 'delegateToken' MethodSignature  'signature' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MethodSignature
    : SubSignature
    | FunctionSignature
    ;



# 9. Type members


ImplementsClause
    : ""Implements"" 'implementsToken' ImplementsList   ###
    ;

ImplementsList
    : InterfaceMemberSpecifier 'implement' ( Comma InterfaceMemberSpecifier 'implement')*
    ;

InterfaceMemberSpecifier
    : NonArrayTypeName 'type' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    ;

MethodMemberDeclaration
    : MethodDeclaration
    | ExternalMethodDeclaration
    ;

InterfaceMethodMemberDeclaration
    : InterfaceMethodDeclaration
    ;

MethodDeclaration
    : SubDeclaration
    | MustOverrideSubDeclaration
    | FunctionDeclaration
    | MustOverrideFunctionDeclaration
    ;

InterfaceMethodDeclaration
    : InterfaceSubDeclaration
    | InterfaceFunctionDeclaration
    ;

SubSignature
    : ""Sub"" 'subToken' <Identifier> 'name' TypeParameterList 'typeParameters'?
      ( OpenParenthesis ParameterList? CloseParenthesis )? {{}}
    ;

FunctionSignature
    : ""Function"" 'functionToken' <Identifier> 'name' TypeParameterList 'typeParameters'?
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')? {{}}
    ;

SubDeclaration
    : Attributes? AllModifiers 'modifier'* SubSignature 'signature'
      HandlesOrImplements? <LineTerminator>
      Block
      ""End"" 'endToken' ""Sub"" 'subToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MustOverrideSubDeclaration
    : Attributes? AllModifiers 'modifier'* MustOverrideProcedureModifier 'modifier' AllModifiers 'modifier'* SubSignature 'signature' ###
      HandlesOrImplements? (<LineTerminator> | "":"" 'statementSeparator') {{SubDeclaration}}
    ;

InterfaceSubDeclaration
    : Attributes? InterfaceProcedureModifier 'modifier'* SubSignature 'signature' (<LineTerminator> | "":"" 'statementSeparator') {{SubDeclaration}}
    ;

FunctionDeclaration
    : Attributes? AllModifiers 'modifier'* FunctionSignature 'signature'
      HandlesOrImplements? <LineTerminator>
      Block
      ""End"" 'endToken' ""Function"" 'functionToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MustOverrideFunctionDeclaration
    : Attributes? AllModifiers 'modifier'* MustOverrideProcedureModifier 'modifier' AllModifiers 'modifier'* FunctionSignature 'signature' ###
      HandlesOrImplements? (<LineTerminator> | "":"" 'statementSeparator') {{FunctionDeclaration}}
    ;

InterfaceFunctionDeclaration
    : Attributes? InterfaceProcedureModifier 'modifier'* FunctionSignature 'signature' (<LineTerminator> | "":"" 'statementSeparator') {{FunctionDeclaration}}
    ;

#ProcedureModifier
#    : AccessModifier | ""Shadows"" | ""Shared"" | ""Overridable"" | ""NotOverridable"" | ""Overrides""
#    | ""Overloads"" | ""Partial"" | ""Iterator"" | ""Async""
#    ;

MustOverrideProcedureModifier   ###
#    : ProcedureModifier
    : ""MustOverride""
    ;

InterfaceProcedureModifier
    : ""Shadows"" | ""Overloads""
    ;

HandlesOrImplements
    : HandlesClause
    | ImplementsClause
    ;

ExternalMethodDeclaration
    : ExternalSubDeclaration
    | ExternalFunctionDeclaration
    ;

ExternalSubDeclaration
    : Attributes? AllModifiers 'modifier'* ""Declare"" 'declareToken' CharsetModifier 'charset'? ""Sub"" 'subToken'
      <Identifier> 'name' LibraryClause AliasClause?
      ( OpenParenthesis ParameterList? CloseParenthesis )? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ExternalFunctionDeclaration
    : Attributes? AllModifiers 'modifier'* ""Declare"" 'declareToken' CharsetModifier 'charset'? ""Function"" 'functionToken'
      <Identifier> 'name' LibraryClause AliasClause?
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')?
      (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#ExternalMethodModifier
#    : AccessModifier
#    | ""Shadows""
#    | ""Overloads""
#    ;

CharsetModifier
    : ""Ansi"" | ""Unicode"" | ""Auto""
    ;

LibraryClause
    : ""Lib"" 'libToken' <StringLiteral> 'library'
    ;

AliasClause
    : ""Alias"" 'aliasToken' <StringLiteral> 'alias'
    ;

ParameterList
    : Parameter 'parameter' ( Comma Parameter 'parameter')*
    ;

Parameter
    : Attributes? ParameterModifier 'modifier'* ParameterIdentifier 'identifier' ( ""As"" 'asToken' TypeName 'type' )?
      ( Equals ConstantExpression 'value')? {{}}
    ;

ParameterModifier
    : ""ByVal"" | ""ByRef"" | ""Optional"" | ""ParamArray""
    ;

ParameterIdentifier
    : <Identifier> 'name' IdentifierModifiers {{}}
    ;

HandlesClause
    : ""Handles"" 'handlesToken' EventHandlesList  ###
    ;

EventHandlesList
    : EventMemberSpecifier 'handle' ( Comma EventMemberSpecifier 'handle')*
    ;

EventMemberSpecifier
    : <Identifier> 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    | ""MyBase"" 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    | ""MyClass"" 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    | ""Me"" 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    ;

ConstructorMemberDeclaration
    : Attributes? AllModifiers 'modifier'* ""Sub"" 'subToken' ""New"" 'newToken'
      ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Sub"" 'subToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#ConstructorModifier
#    : AccessModifier
#    | ""Shared""
#    ;

EventMemberDeclaration
    : RegularEventMemberDeclaration
    | CustomEventMemberDeclaration
    ;

RegularEventMemberDeclaration
    : Attributes? AllModifiers 'modifier'* ""Event"" 'eventToken'
      <Identifier> 'name' ParametersOrType ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

InterfaceEventMemberDeclaration
    : Attributes? InterfaceEventModifiers 'modifier'* ""Event"" 'eventToken'
      <Identifier> 'name' ParametersOrType (<LineTerminator> | "":"" 'statementSeparator') {{RegularEventMemberDeclaration}}
    ;

ParametersOrType
    : ( OpenParenthesis ParameterList? CloseParenthesis )?
    | ""As"" 'asToken' NonArrayTypeName 'type'
    ;

#EventModifiers
#    : AccessModifier
#    | ""Shadows""
#    | ""Shared""
#    ;

InterfaceEventModifiers
    : ""Shadows""
    ;

CustomEventMemberDeclaration
    : Attributes? AllModifiers 'modifier'* ""Custom"" 'customToken' ""Event"" 'eventToken'
      <Identifier> 'name' ""As"" 'asToken' TypeName 'type' ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator')
      EventAccessorDeclaration 'eventAccessorDeclaration'+
      ""End"" 'endToken' ""Event"" 'eventToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

EventAccessorDeclaration
    : AddHandlerDeclaration
    | RemoveHandlerDeclaration
    | RaiseEventDeclaration
    ;

AddHandlerDeclaration
    : Attributes? ""AddHandler"" 'addHandlerToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""AddHandler"" 'addHandlerToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

RemoveHandlerDeclaration
    : Attributes? ""RemoveHandler"" 'removeHandlerToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""RemoveHandler"" 'removeHandlerToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

RaiseEventDeclaration
    : Attributes? ""RaiseEvent"" 'raiseEventToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""RaiseEvent"" 'raiseEventToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstantMemberDeclaration
    : Attributes? AllModifiers 'modifier'* ""Const"" 'constToken' ConstantDeclarators (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#ConstantModifier
#    : AccessModifier
#    | ""Shadows""
#    ;

ConstantDeclarators
    : ConstantDeclarator 'constant' ( Comma ConstantDeclarator 'constant')*
    ;

ConstantDeclarator
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? Equals ConstantExpression 'value' {{}}
    ;

VariableMemberDeclaration
    : Attributes? AllModifiers 'modifier'+ VariableDeclarators (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#VariableModifier
#    : AccessModifier
#    | ""Shadows""
#    | ""Shared""
#    | ""ReadOnly""
#    | ""WithEvents""
#    | ""Dim"" 'dimToken'
#    ;

VariableDeclarators
    : VariableDeclarator 'variable' ( Comma VariableDeclarator 'variable')*
    ;

VariableDeclarator
    : VariableIdentifiers ""As"" 'asToken' ObjectCreationExpression 'value' {{}}
    | VariableIdentifiers ( ""As"" 'asToken' TypeName 'type' )? ( Equals Expression 'value' )? {{}}
    ;

VariableIdentifiers
    : VariableIdentifier 'variableIdentifier' ( Comma VariableIdentifier 'variableIdentifier' )*
    ;

VariableIdentifier
    : <Identifier> 'name' IdentifierModifiers {{}}
    ;

ArraySizeInitializationModifier
    : OpenParenthesis BoundList CloseParenthesis ArrayTypeModifiers?
    ;

BoundList
    : Bound 'bound' ( Comma Bound 'bound' )*
    ;

Bound
    : Expression
    | <IntegerLiteral> 'from' ""To"" 'toToken' Expression 'to' {{BoundExpression}}  ###
    ;

PropertyMemberDeclaration
    : RegularPropertyMemberDeclaration
    | MustOverridePropertyMemberDeclaration
    | AutoPropertyMemberDeclaration
    ;

PropertySignature
    : ""Property"" 'propertyToken'
      <Identifier> 'name' ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')?
    ;

RegularPropertyMemberDeclaration
    : Attributes? AllModifiers 'modifier'* PropertySignature
      ImplementsClause? <LineTerminator>
      PropertyAccessorDeclaration 'declaration'+
      ""End"" 'endToken' ""Property"" 'propertyToken' (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

MustOverridePropertyMemberDeclaration
    : Attributes? AllModifiers 'modifier'* MustOverridePropertyModifier 'modifier' AllModifiers 'modifier'* PropertySignature  ###
      ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

AutoPropertyMemberDeclaration
    : Attributes? AllModifiers 'modifier'* ""Property"" 'propertyToken' <Identifier> 'name'
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')? ( Equals Expression 'value')?
      ImplementsClause? <LineTerminator> {{AutoPropertyMemberDeclaration}}
    | Attributes? AllModifiers 'modifier'* ""Property"" 'propertyToken' <Identifier> 'name'
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ""As"" 'asToken' Attributes? ""New"" 'newToken'
      ( NonArrayTypeName 'type' ( OpenParenthesis ArgumentList? CloseParenthesis )? )?
      ObjectCreationExpressionInitializer 'initializer'?
      ImplementsClause? <LineTerminator> {{AutoPropertyMemberDeclaration}}
    ;

InterfacePropertyMemberDeclaration
    : Attributes? InterfacePropertyModifier 'modifier'* PropertySignature (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

#AutoPropertyModifier
#    : AccessModifier
#    | ""Shadows""
#    | ""Shared""
#    | ""Overridable""
#    | ""NotOverridable""
#    | ""Overrides""
#    | ""Overloads""
#    ;

#PropertyModifier
#    : AutoPropertyModifier
#    | ""Default""
#    | ""ReadOnly""
#    | ""WriteOnly""
#    | ""Iterator""
#    ;

MustOverridePropertyModifier
#    : PropertyModifier
    : ""MustOverride""
    ;

InterfacePropertyModifier
    : ""Shadows""
    | ""Overloads""
    | ""Default""
    | ""ReadOnly""
    | ""WriteOnly""
    ;

PropertyAccessorDeclaration
    : PropertyGetDeclaration
    | PropertySetDeclaration
    ;

PropertyGetDeclaration
    : Attributes? AllModifiers 'modifier'? ""Get"" 'getToken' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Get"" 'getToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

PropertySetDeclaration
    : Attributes? AllModifiers 'modifier'? ""Set"" 'setToken'
      ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Set"" 'setToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

OperatorDeclaration
    : Attributes? AllModifiers 'modifier'* ""Operator"" 'operatorToken' OverloadableOperator 'operator'
      OpenParenthesis ParameterList CloseParenthesis
      ( ""As"" 'asToken' Attributes? TypeName 'type')? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Operator"" 'operatorToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

#OperatorModifier
#    : ""Public"" | ""Shared"" | ""Overloads"" | ""Shadows"" | ""Widening"" | ""Narrowing""
#    ;

OverloadableOperator
    : ""+"" | ""-"" | ""*"" | ""/"" | ""\"" | ""&"" | ""Like"" | ""Mod"" | ""And"" | ""Or"" | ""Xor""
    | ""^"" | ""<<"" | "">>"" | ""="" | ""<>"" | "">"" | ""<"" | "">="" | ""<=""
    | ""Not"" | ""IsTrue"" | ""IsFalse"" | ""CType""
    ;





# 10. Statements


Statement
    : LabelDeclarationStatement
    | LocalDeclarationStatement
    | WithStatement
    | SyncLockStatement
    | EventStatement
    | AssignmentStatement
    | InvocationStatement
    | ConditionalStatement
    | LoopStatement
    | ErrorHandlingStatement
    | BranchStatement
    | ArrayHandlingStatement
    | UsingStatement
#	| AwaitStatement	### handled by InvocationStatement/OperatorExpression
	| YieldStatement
    ;

Block
    : (Statements 'statement'? <LineTerminator>)*
    ;

LabelDeclarationStatement
    : LabelName 'label' "":"" 'colonToken' {{}}
    ;

LabelName
    : <Identifier>
    | <IntLiteral>
    ;

Statements
    : Statement 
    | Statement 'statement'? ( "":"" 'statementSeparator' Statement 'statement'? )+ {{LineStatement}}	###
    ;

LocalDeclarationStatement
    : LocalModifier 'modifier' VariableDeclarators {{}} ###
    ;

LocalModifier
    : ""Static"" | ""Dim"" | ""Const""
    ;

WithStatement
    : ""With"" 'withToken' Expression 'expression' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""With"" 'withToken' {{}} ###
    ;

SyncLockStatement
    : ""SyncLock"" 'syncLockToken' Expression 'expression' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""SyncLock"" 'syncLockToken' {{}} ###
    ;

EventStatement
    : RaiseEventStatement
    | AddHandlerStatement
    | RemoveHandlerStatement
    ;

RaiseEventStatement
    : ""RaiseEvent"" 'raiseEventToken' <IdentifierOrKeyword> 'name'
      ( OpenParenthesis ArgumentList? CloseParenthesis )? {{}}	###
    ;

AddHandlerStatement
    : ""AddHandler"" 'addHandlerToken' Expression 'event' Comma Expression 'handler' {{}} ###
    ;

RemoveHandlerStatement
    : ""RemoveHandler"" 'removeHandlerToken' Expression 'event' Comma Expression 'handler' {{}} ###
    ;

AssignmentStatement
    : RegularAssignmentStatement
    | CompoundAssignmentStatement
    | MidAssignmentStatement
    ;

RegularAssignmentStatement
    : Expression 'lhs' Equals Expression 'value' {{AssignmentStatement}} ###
    ;

CompoundAssignmentStatement
    : Expression 'lhs' CompoundBinaryOperator 'equals' <LineTerminator>? Expression 'value' {{AssignmentStatement}} ###
    ;

CompoundBinaryOperator
    : ""^="" | ""*="" | ""/="" | ""\="" | ""+="" | ""-=""
    | ""&="" | ""<<="" | "">>=""
    ;

MidAssignmentStatement
    : ""Mid"" 'midToken' ""$"" 'typeCharToken'? OpenParenthesis Expression 'string' Comma Expression 'start'
      ( Comma Expression 'length')? CloseParenthesis Equals Expression 'value' {{}} ###
    ;

InvocationStatement
    : ""Call"" 'callToken'? Expression 'expression' {{}}  ###
    ;

ConditionalStatement
    : IfStatement
    | SelectStatement
    ;

IfStatement
    : BlockIfStatement
    | LineIfThenStatement
    ;

BlockIfStatement
    : ""If"" 'ifToken' Expression 'expression' ""Then"" 'thenToken'? (<LineTerminator> | "":"" 'statementSeparator')	###
      Block ###
      ElseIfStatement 'elseIf'*
      ElseStatement 'else'?
      ""End"" 'endToken' ""If"" 'ifToken' {{IfStatement}} ###
    ;

ElseIfStatement
    : <ElseIf> 'elseIfToken' Expression 'expression' ""Then"" 'thenToken'? (<LineTerminator> | "":"" 'statementSeparator')	###
      Block {{}} ###
    ;

ElseStatement
    : ""Else"" 'elseToken' (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

LineIfThenStatement
    : ""If"" 'ifToken' Expression 'expression' ""Then"" 'thenToken' Statements 'statement' (  LineElseStatement 'else' )? {{IfStatement}} ###
    ;
 LineElseStatement
	: ""Else"" 'elseToken' Statements 'statement' {{ElseStatement}}
	;

SelectStatement
    : ""Select"" 'selectToken' ""Case"" 'caseToken'? Expression 'expression' <LineTerminator>
      CaseStatement 'case'*
      CaseElseStatement 'else'?
      ""End"" 'endToken' ""Select"" 'selectToken' {{}} ###
    ;

CaseStatement
    : ""Case"" 'caseToken' CaseClauses (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

CaseClauses
    : CaseClause 'clause' ( Comma CaseClause 'clause')*
    ;

CaseClause
    : ( ""Is"" 'operator' <LineTerminator>? )? ComparisonOperator <LineTerminator>? Expression 'value' {{}}
    | Expression 'value' ( ""To"" 'toToken' Expression 'to' )? {{}}
    ;

ComparisonOperator
    : ""="" 'operator' | ""<>"" 'operator' | ""<"" 'operator' | "">"" 'operator' | "">="" | ""<="" 'operator'
    ;

CaseElseStatement
    : ""Case"" 'caseToken' ""Else"" 'elseToken' (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

LoopStatement
    : WhileStatement
    | DoLoopStatement
    | ForStatement
    | ForEachStatement
    ;

WhileStatement
    : ""While"" 'whileToken' Expression 'expression' <LineTerminator>	###
      Block ###
      ""End"" 'endToken' ""While"" 'whileToken' {{}} ###
    ;

DoLoopStatement
    : DoTopLoopStatement
    | DoBottomLoopStatement
    ;

DoTopLoopStatement
    : ""Do"" 'doToken' ( WhileOrUntil Expression 'expression')? <LineTerminator>	###
      Block ###
      ""Loop"" 'loopToken' {{}} ###
    ;

DoBottomLoopStatement
    : ""Do"" 'doToken' <LineTerminator>
      Block ###
      ""Loop"" 'loopToken' WhileOrUntil Expression 'expression' {{}}	###
    ;

WhileOrUntil
    : ""While"" 'loopToken' | ""Until"" 'loopToken'
    ;

ForStatement
    : ""For"" 'forToken' LoopControlVariable 'variable' Equals Expression 'from' ""To"" 'toToken' Expression 'to'
      ( ""Step"" 'stepToken' Expression 'step')? <LineTerminator>
      Block ###
      ""Next"" 'nextToken' NextExpressionList? {{}}   ###
    ;

LoopControlVariable
    : <Identifier> 'name' ( IdentifierModifiers ""As"" 'asToken' TypeName 'type' )? {{}}
    | Expression
    ;

NextExpressionList
    : Expression 'next' ( Comma Expression 'next')*
    ;

ForEachStatement
    : ""For"" 'forToken' ""Each"" 'eachToken' LoopControlVariable 'variable' ""In"" 'inToken' <LineTerminator>? Expression 'expression' <LineTerminator>
      Block ###
      ""Next"" 'nextToken' NextExpressionList? {{}}  ###
    ;

ErrorHandlingStatement
    : StructuredErrorStatement
    | UnstructuredErrorStatement
    ;

StructuredErrorStatement
    : ThrowStatement
    | TryStatement
    ;

TryStatement
    : ""Try"" 'tryToken' <LineTerminator>
      Block ###
      CatchStatement 'catch'*
      FinallyStatement 'finally'?
      ""End"" 'endToken' ""Try"" 'tryToken' {{}} ###
    ;

FinallyStatement
    : ""Finally"" 'finallyToken' <LineTerminator>
      Block {{}} ###
    ;

CatchStatement
    : ""Catch"" 'catchToken' ( <Identifier> 'name' ( ""As"" 'asToken' NonArrayTypeName 'type' )? )?
	  ( ""When"" 'whenToken' Expression 'when')? <LineTerminator>	###
      Block {{}} ###
    ;

ThrowStatement
    : ""Throw"" 'throwToken' Expression 'value'? {{}} ###
    ;

UnstructuredErrorStatement
    : ErrorStatement
    | OnErrorStatement
    | ResumeStatement
    ;

ErrorStatement
    : ""Error"" 'errorToken' Expression 'value' {{}} ###
    ;

OnErrorStatement
    : ""On"" 'onToken' ""Error"" 'errorToken' ErrorClause 'clause' {{}} ###
    ;

ErrorClause
    : ""GoTo"" 'gotoToken' ""-"" 'minus' <IntegerLiteral> 'location' {{GotoClause}}  ###
    | ""GoTo"" 'gotoToken' <IntegerLiteral> 'location' {{GotoClause}}   ###
    | GoToStatement
    | ""Resume"" 'resumeToken' ""Next"" 'nextToken' {{ResumeClause}}
    ;

ResumeStatement
    : ""Resume"" 'resumeToken' ResumeClause 'resume'? {{}} ###
    ;

ResumeClause
    : ""Next""
    | LabelName
    ;

BranchStatement
    : GoToStatement
    | ExitStatement
    | ContinueStatement
    | StopStatement
    | EndStatement
    | ReturnStatement
    ;

GoToStatement
    : ""GoTo"" 'gotoToken' LabelName 'goto' {{}} ###
    ;

ExitStatement
    : ""Exit"" 'exitToken' ExitKind 'exit' {{}} ###
    ;

ExitKind
    : ""Do"" | ""For"" | ""While"" | ""Select"" | ""Sub"" | ""Function"" | ""Property"" | ""Try""
    ;

ContinueStatement
    : ""Continue"" 'continueToken' ContinueKind 'continue' {{}} 	###
    ;

ContinueKind
    : ""Do"" | ""For"" | ""While""
    ;

StopStatement
    : ""Stop"" 'stopToken' {{}} ###
    ;

EndStatement
    : ""End"" 'endToken' {{}} ###
    ;

ReturnStatement
    : ""Return"" 'returnToken' Expression 'value'? {{}} ###
    ;

ArrayHandlingStatement
    : RedimStatement
    | EraseStatement
    ;

RedimStatement
    : ""ReDim"" 'redimToken' ""Preserve"" 'preserveToken'? RedimClauses {{}} ###
    ;

RedimClauses
    : RedimClause 'redim' ( Comma RedimClause 'redim')*
    ;

RedimClause
    : Expression 'array' ArraySizeInitializationModifier {{}}
    ;

EraseStatement
    : ""Erase"" 'eraseToken' EraseExpressions {{}} ###
    ;

EraseExpressions
    : Expression 'array' ( Comma Expression 'array')*
    ;

UsingStatement
    : ""Using"" 'usingToken' UsingResources <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Using"" 'usingToken' {{}} ###
    ;

UsingResources
    : VariableDeclarators
    | Expression 'variable'
    ;

#AwaitStatement
#    : AwaitOperatorExpression ###
#    ;

YieldStatement
    : ""Yield"" 'yieldToken' Expression 'yield' {{}} ###
    ;



# 11. Expressions

Expression
    : SimpleExpression
    | TypeExpression
    | MemberAccessExpression
    | DictionaryAccessExpression
    | InvocationExpression
#    | IndexExpression	### handled by InvocationExpression
    | NewExpression
    | CastExpression
    | OperatorExpression
    | ConditionalExpression
    | LambdaExpression
    | QueryExpression
#    | XMLLiteralExpression	### not yet implemented
#    | XMLMemberAccessExpression	### not yet implemented
    ;

ConstantExpression
    : Expression
    ;

SimpleExpression
    : LiteralExpression
    | ParenthesizedExpression
    | InstanceExpression
    | SimpleNameExpression
    | AddressOfExpression
    ;

LiteralExpression
    : Literal
    ;

ParenthesizedExpression
    : OpenParenthesis Expression CloseParenthesis {{Expression}}
    ;

InstanceExpression
    : ""Me"" 'meToken' {{}}
    ;

SimpleNameExpression
    : <Identifier> 'name' ( OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis )? {{}}
    ;

AddressOfExpression
    : ""AddressOf"" 'addressOfToken' Expression 'value' {{}}
    ;

TypeExpression
    : GetTypeExpression
    | TypeOfIsExpression
    | IsExpression
#    | GetXmlNamespaceExpression	### not yet implemented
    ;

GetTypeExpression
    : ""GetType"" 'getTypeToken' OpenParenthesis GetTypeTypeName 'type' CloseParenthesis {{}}
    ;

GetTypeTypeName
    : TypeName 
    | QualifiedOpenTypeName
    ;

QualifiedOpenTypeName
    : <Identifier> 'name' TypeArityList? (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArityList?)* {{}}
    | ""Global"" 'globalToken' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArityList?
      (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArityList?)* {{}}
    ;

TypeArityList
    : OpenParenthesis ""Of"" 'ofToken' CommaList? CloseParenthesis
    ;

CommaList
    : Comma+    ###
    ;

TypeOfIsExpression
    : ""TypeOf"" 'typeOfToken' Expression 'expression' ""Is"" 'isToken' <LineTerminator>? TypeName 'type' {{}}
    ;

IsExpression
    : Expression 'left' ""Is"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""IsNot"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

#GetXmlNamespaceExpression
#    : ""GetXmlNamespace"" 'getXmlNamespaceToken' OpenParenthesis XMLNamespaceName? CloseParenthesis
#    ;

MemberAccessExpression
    : MemberAccessBase 'base'? ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name'
      ( OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis )? {{}}
    ;

MemberAccessBase
    : AccessBase
    | NonArrayTypeName
    | ""Global"" 'globalToken' {{Global}}
    | ""MyClass"" 'myClassToken' {{MyClass}}
    | ""MyBase"" 'myBaseToken' {{MyBase}}
    ;

DictionaryAccessExpression
    : AccessBase 'value'? ""!"" 'bangToken' <IdentifierOrKeyword> 'name' {{}}
    ;
AccessBase
    : LiteralExpression
    | ParenthesizedExpression
    | InstanceExpression
    | SimpleNameExpression
    | GetTypeExpression
    | MemberAccessExpression
    | DictionaryAccessExpression
    | InvocationExpression
    | NewExpression
    | CastExpression
    | ConditionalExpression
    | MultiLineLambda
    ;

InvocationExpression
    : AccessBase 'receiver' ( OpenParenthesis ArgumentList? CloseParenthesis ) {{}} ###
    ;

ArgumentList
    : PositionalArgumentList
    | PositionalArgumentList Comma NamedArgumentList
    | NamedArgumentList
    ;

PositionalArgumentList
    : Expression 'argument' ( Comma Expression 'argument'? )*
    ;

NamedArgumentList
    : <IdentifierOrKeyword> 'argumentName' ColonEquals Expression 'namedArgument'
      ( Comma <IdentifierOrKeyword> 'argumentName' ColonEquals Expression 'namedArgument')*
    ;

#IndexExpression
#    : Expression 'value' OpenParenthesis ArgumentList? CloseParenthesis
#    ;

NewExpression
    : ObjectCreationExpression
    | ArrayExpression
    | AnonymousObjectCreationExpression
    ;

ObjectCreationExpression
    : ""New"" 'newToken' NonArrayTypeName 'type' ( OpenParenthesis ArgumentList? CloseParenthesis )?
      ObjectCreationExpressionInitializer 'initializer'? {{ObjectCreationExpression}}
    ;

ObjectCreationExpressionInitializer
    : ObjectMemberInitializer
    | ObjectCollectionInitializer
    ;

ObjectMemberInitializer
    : ""With"" 'withToken' OpenCurlyBrace FieldInitializerList CloseCurlyBrace {{}}
    ;

FieldInitializerList
    : FieldInitializer 'initializer' ( Comma FieldInitializer 'initializer')*
    ;

FieldInitializer
    : ""Key"" 'keyToken'? (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' Equals )? Expression 'value' {{}} ###
    ;

ObjectCollectionInitializer
    : ""From"" 'fromToken' CollectionInitializer 'initializer' {{}}
    ;

CollectionInitializer
    : OpenCurlyBrace CollectionElementList? CloseCurlyBrace {{}}
    ;

CollectionElementList
    : CollectionElement 'element' ( Comma CollectionElement 'element')*
    ;

CollectionElement
    : Expression
    | CollectionInitializer
    ;

ArrayExpression
    : ArrayCreationExpression
    | ArrayLiteralExpression
    ;

ArrayCreationExpression
    : ""New"" 'newToken' NonArrayTypeName 'type' ArrayNameModifier CollectionInitializer 'initializer' {{ArrayCreationExpression}}
    ;

ArrayLiteralExpression
    : CollectionInitializer
    ;

AnonymousObjectCreationExpression
    : ""New"" 'newToken' ObjectMemberInitializer 'expression' {{AnonymousCreationExpression}}
    ;

CastExpression
    : ""DirectCast"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | ""TryCast"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | ""CType"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | CastTarget 'type' OpenParenthesis Expression 'value' CloseParenthesis {{PrimitiveCastExpression}}
    ;

CastTarget
    : ""CBool"" | ""CByte"" | ""CChar""  | ""CDate""  | ""CDec"" | ""CDbl"" | ""CInt""
    | ""CLng""  | ""CObj""  | ""CSByte"" | ""CShort"" | ""CSng"" | ""CStr"" | ""CUInt""
    | ""CULng"" | ""CUShort""
    ;

OperatorExpression
    : ArithmeticOperatorExpression
    | RelationalOperatorExpression
    | LikeOperatorExpression
    | ConcatenationOperatorExpression
    | ShortCircuitLogicalOperatorExpression
    | LogicalOperatorExpression
    | ShiftOperatorExpression
    | AwaitOperatorExpression
    ;

ArithmeticOperatorExpression
    : UnaryPlusExpression
    | UnaryMinusExpression
    | AdditionOperatorExpression
    | SubtractionOperatorExpression
    | MultiplicationOperatorExpression
    | DivisionOperatorExpression
    | ModuloOperatorExpression
    | ExponentOperatorExpression
    ;

UnaryPlusExpression
    : ""+"" 'operator' Expression 'value' {{UnaryExpression}}
    ;

UnaryMinusExpression
    : ""-"" 'operator' Expression 'value' {{UnaryExpression}}
    ;

AdditionOperatorExpression
    : Expression 'left' ""+"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

SubtractionOperatorExpression
    : Expression 'left' ""-"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

MultiplicationOperatorExpression
    : Expression 'left' ""*"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

DivisionOperatorExpression
    : FPDivisionOperatorExpression
    | IntegerDivisionOperatorExpression
    ;

FPDivisionOperatorExpression
    : Expression 'left' ""/"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

IntegerDivisionOperatorExpression
    : Expression 'left' ""\"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ModuloOperatorExpression
    : Expression 'left' ""Mod"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ExponentOperatorExpression
    : Expression 'left' ""^"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

RelationalOperatorExpression
    : Expression 'left' ""="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<>"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

LikeOperatorExpression
    : Expression 'left' ""Like"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ConcatenationOperatorExpression
    : Expression 'left' ""&"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

LogicalOperatorExpression
    : ""Not"" 'operator' Expression 'value' {{UnaryExpression}}
    | Expression 'left' ""And"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""Or"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""Xor"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ShortCircuitLogicalOperatorExpression
    : Expression 'left' ""AndAlso"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""OrElse"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ShiftOperatorExpression
    : Expression 'left' ""<<"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">>"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

#BooleanExpression
#    : Expression
#    ;

LambdaExpression
    : SingleLineLambda
    | MultiLineLambda
    ;

SingleLineLambda
    : LambdaModifier 'modifier'* ""Function"" 'functionToken' ( OpenParenthesis ParameterList? CloseParenthesis )? Expression 'statement' {{FunctionLambdaExpression}}
    | LambdaModifier 'modifier'* ""Sub"" 'subToken' ( OpenParenthesis ParameterList? CloseParenthesis )? Statement 'statement' {{SubLambdaExpression}}	### added LambdaModifier since it also exists for MultiLineSubLambda
    ;

MultiLineLambda
    : MultiLineFunctionLambda
    | MultiLineSubLambda
    ;

MultiLineFunctionLambda
    : LambdaModifier 'modifier'* ""Function"" 'functionToken' ( OpenParenthesis ParameterList? CloseParenthesis )? ( ""As"" 'asToken' TypeName 'type' )? <LineTerminator>
      Block
      ""End"" 'endToken' ""Function"" 'functionToken' {{FunctionLambdaExpression}}
    ;

MultiLineSubLambda
    : LambdaModifier 'modifier'* ""Sub"" 'subToken' ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block
      ""End"" 'endToken' ""Sub"" 'subToken' {{SubLambdaExpression}}
    ;

LambdaModifier
    : ""Async"" | ""Iterator""
    ;

QueryExpression
    : FromOrAggregateQueryOperator (<LineTerminator>? QueryOperator)* {{}}
    ;

FromOrAggregateQueryOperator
    : FromQueryOperator
    | AggregateQueryOperator
    ;

QueryOperator
    : FromQueryOperator
    | AggregateQueryOperator
    | SelectQueryOperator
    | DistinctQueryOperator
    | WhereQueryOperator
    | OrderByQueryOperator
    | PartitionQueryOperator
    | LetQueryOperator
    | GroupByQueryOperator
    | JoinOrGroupJoinQueryOperator
    ;

JoinOrGroupJoinQueryOperator
    : JoinQueryOperator
    | GroupJoinQueryOperator
    ;

CollectionRangeVariableDeclarationList
    : CollectionRangeVariableDeclaration ( Comma CollectionRangeVariableDeclaration )*
    ;

CollectionRangeVariableDeclaration
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? ""In"" 'inToken' <LineTerminator>? Expression 'value'
    ;

ExpressionRangeVariableDeclarationList
    : ExpressionRangeVariableDeclaration 'declaration' ( Comma ExpressionRangeVariableDeclaration 'declaration')*
    ;

ExpressionRangeVariableDeclaration
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? Equals Expression 'value' {{}}
    ;

FromQueryOperator
    : ""From"" 'fromToken' <LineTerminator>? CollectionRangeVariableDeclarationList
    ;

JoinQueryOperator
    : ""Join"" 'joinToken' <LineTerminator>? CollectionRangeVariableDeclaration
      JoinOrGroupJoinQueryOperator? <LineTerminator>? ""On"" 'onToken' <LineTerminator>? JoinConditionList
    ;

JoinConditionList
    : JoinCondition ( ""And"" 'andToken' <LineTerminator>? JoinCondition )*
    ;

JoinCondition
    : Expression 'lhs' ""Equals"" 'equalsToken' <LineTerminator>? Expression 'rhs'
    ;

LetQueryOperator
    : ""Let"" 'letToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

SelectQueryOperator
    : ""Select"" 'selectToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

DistinctQueryOperator
    : ""Distinct"" 'distinctToken'
    ;

WhereQueryOperator
    : ""Where"" <LineTerminator>? Expression 'expression'	###
    ;

PartitionQueryOperator
    : ""Take"" 'takeToken' <LineTerminator>? Expression 'expression'
    | ""Take"" 'takeToken' ""While"" 'whileToken' <LineTerminator>? Expression 'expression'	###
    | ""Skip"" 'skipToken' <LineTerminator>? Expression 'expression'
    | ""Skip"" 'skipToken' ""While"" 'whileToken' <LineTerminator>? Expression 'expression'	###
    ;

OrderByQueryOperator
    : ""Order"" 'orderToken' ""By"" 'byToken' <LineTerminator>? OrderExpressionList
    ;

OrderExpressionList
    : OrderExpression 'expression' ( Comma OrderExpression 'expression' )*
    ;

OrderExpression
    : Expression 'value' Ordering 'order'? {{}}
    ;

Ordering
    : ""Ascending"" | ""Descending""
    ;

GroupByQueryOperator
    : ""Group"" 'groupToken' ( <LineTerminator>? ExpressionRangeVariableDeclarationList )?
      <LineTerminator>? ""By"" 'byToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

AggregateQueryOperator
    : ""Aggregate"" 'aggregateToken' <LineTerminator>? CollectionRangeVariableDeclaration QueryOperator*
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

GroupJoinQueryOperator
    : ""Group"" 'groupToken' ""Join"" 'joinToken' <LineTerminator>? CollectionRangeVariableDeclaration
      JoinOrGroupJoinQueryOperator? <LineTerminator>? ""On"" 'onToken' <LineTerminator>? JoinConditionList
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

ConditionalExpression
    : ""If"" 'ifToken' OpenParenthesis Expression 'booleanValue' Comma Expression 'trueValue' Comma Expression 'falseValue' CloseParenthesis {{}}	###
    | ""If"" 'ifToken' OpenParenthesis Expression 'booleanValue' Comma Expression 'trueValue' CloseParenthesis {{}}
    ;
/*
XMLLiteralExpression
    : XMLDocument
    | XMLElement
    | XMLProcessingInstruction
    | XMLComment
    | XMLCDATASection
    ;

<XMLCharacter>
    : \t
    | \n
    | \r
    | [\x0020-\xD7FF]
    | [\xE000-\xFFFD]
#    | '<Unicode characters 0x10000 - 0x10FFFF>'
    ;

<XMLString>
    : <XMLCharacter>+
    ;

<XMLWhitespace>
    : <XMLWhitespaceCharacter>+
    ;

<XMLWhitespaceCharacter>
    : \r
    | \n
    | \ 
    | \t
    ;

<XMLNameCharacter>
    : <XMLLetter>
    | <XMLDigit>
    | \.
    | \-
    | \_
    | \:
    | <XMLCombiningCharacter>
#    | <XMLExtender>
    ;

<XMLNameStartCharacter>
    : <XMLLetter>
    | \_
    | \:
    ;

<XMLName>
    : <XMLNameStartCharacter> <XMLNameCharacter>*
    ;

<XMLLetter>
    : <isLetter>
    ;

<XMLDigit>
    : <isDigit>
    ;

XMLCombiningCharacter
    : [\x0300-\x036F]
    ;

#<XMLExtender>
#    : '<Unicode character as defined in the Extender production of the XML 1.0 specification>'
#    ;

XMLEmbeddedExpression
    : ""<%="" <LineTerminator>? Expression <LineTerminator>? ""%>""
    ;

XMLDocument
    : XMLDocumentPrologue XMLMisc* XMLDocumentBody XMLMisc*
    ;

XMLDocumentPrologue
    : ""<?xml"" XMLVersion XMLEncoding? XMLStandalone? <XMLWhitespace>? ""?>""
    ;

XMLVersion
    : <XMLWhitespace> ""version"" <XMLWhitespace>? ""="" <XMLWhitespace>? <XMLVersionNumberValue>
    ;

<XMLVersionNumberValue>
    : <SingleQuoteCharacter> 1 \. 0 <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> 1 \. 0 <DoubleQuoteCharacter>
    ;

XMLEncoding
    : <XMLWhitespace> ""encoding"" <XMLWhitespace>? ""="" <XMLWhitespace>? XMLEncodingNameValue
    ;

<XMLEncodingNameValue>
    : <SingleQuoteCharacter> <XMLEncodingName> <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> <XMLEncodingName> <DoubleQuoteCharacter>
    ;

<XMLEncodingName>
    : <XMLLatinAlphaCharacter> <XMLEncodingNameCharacter>*
    ;

<XMLEncodingNameCharacter>
    : <XMLUnderscoreCharacter>
    | <XMLLatinAlphaCharacter>
    | <XMLNumericCharacter>
    | <XMLPeriodCharacter>
    | <XMLDashCharacter>
    ;

<XMLLatinAlphaCharacter>
    : [a-zA-Z]
    ;

<XMLNumericCharacter>
    : \d
    ;

<XMLHexNumericCharacter>
    : <XMLNumericCharacter>
    | [a-fA-F]
    ;

<XMLPeriodCharacter>
    : \.
    ;

<XMLUnderscoreCharacter>
    : _
    ;

<XMLDashCharacter>
    : \x002d
    ;

XMLStandalone
    : <XMLWhitespace> ""standalone"" <XMLWhitespace>? ""="" <XMLWhitespace>? <XMLYesNoValue>
    ;

<XMLYesNoValue>
    : <SingleQuoteCharacter> <XMLYesNo> <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> <XMLYesNo> <DoubleQuoteCharacter>
    ;

<XMLYesNo>
    : yes
    | no
    ;

XMLMisc
    : XMLComment
    | XMLProcessingInstruction
    | XMLWhitespace
    ;

XMLDocumentBody
    : XMLElement
    | XMLEmbeddedExpression
    ;

XMLElement
    : XMLEmptyElement
    | XMLElementStart XMLContent XMLElementEnd
    ;

XMLEmptyElement
    : '<' XMLQualifiedNameOrExpression XMLAttribute* XMLWhitespace? '/' '>'
    ;

XMLElementStart
    : '<' XMLQualifiedNameOrExpression XMLAttribute* XMLWhitespace? '>'
    ;

XMLElementEnd
    : '<' '/' '>'
    | '<' '/' XMLQualifiedName XMLWhitespace? '>'
    ;

XMLContent
    : XMLCharacterData? ( XMLNestedContent XMLCharacterData? )+
    ;

XMLCharacterData
    : '<Any XMLCharacterDataString that does not contain the string ""]]>"">'
    ;

XMLCharacterDataString
    : '<Any Unicode character except < or &>'+
    ;

XMLNestedContent
    : XMLElement
    | XMLReference
    | XMLCDATASection
    | XMLProcessingInstruction
    | XMLComment
    | XMLEmbeddedExpression
    ;
XMLAttribute

    : XMLWhitespace XMLAttributeName XMLWhitespace? '=' XMLWhitespace? XMLAttributeValue
    | XMLWhitespace XMLEmbeddedExpression
    ;

XMLAttributeName
    : XMLQualifiedNameOrExpression
    | XMLNamespaceAttributeName
    ;

XMLAttributeValue
    : <DoubleQuoteCharacter> XMLAttributeDoubleQuoteValueCharacter* <DoubleQuoteCharacter>
    | <SingleQuoteCharacter> XMLAttributeSingleQuoteValueCharacter* <SingleQuoteCharacter>
    | XMLEmbeddedExpression
    ;

XMLAttributeDoubleQuoteValueCharacter
    : '<Any XMLCharacter except <, &, or DoubleQuoteCharacter>'
    | XMLReference
    ;

XMLAttributeSingleQuoteValueCharacter
    : '<Any XMLCharacter except <, &, or SingleQuoteCharacter>'
    | XMLReference
    ;

XMLReference
    : XMLEntityReference
    | XMLCharacterReference
    ;

XMLEntityReference
    : '&' XMLEntityName ';'
    ;

XMLEntityName
    : 'lt' | 'gt' | 'amp' | 'apos' | 'quot'
    ;

XMLCharacterReference
    : '&' '#' XMLNumericCharacter+ ';'
    | '&' '#' 'x' XMLHexNumericCharacter+ ';'
    ;

XMLNamespaceAttributeName
    : XMLPrefixedNamespaceAttributeName
    | XMLDefaultNamespaceAttributeName
    ;

XMLPrefixedNamespaceAttributeName
    : ""xmlns"" "":"" XMLNamespaceName
    ;

XMLDefaultNamespaceAttributeName
    : ""xmlns""
    ;

XMLNamespaceName
    : XMLNamespaceNameStartCharacter XMLNamespaceNameCharacter*
    ;

XMLNamespaceNameStartCharacter
    : '<Any XMLNameCharacter except :>'
    ;

XMLNamespaceNameCharacter
    : XMLLetter
    | '_'
    ;

XMLQualifiedNameOrExpression
    : XMLQualifiedName
    | XMLEmbeddedExpression
    ;

XMLQualifiedName
    : XMLPrefixedName
    | XMLUnprefixedName
    ;

XMLPrefixedName
    : XMLNamespaceName ':' XMLNamespaceName
    ;

XMLUnprefixedName
    : XMLNamespaceName
    ;

XMLProcessingInstruction
    : '<' '?' XMLProcessingTarget ( XMLWhitespace XMLProcessingValue? )? '?' '>'
    ;

XMLProcessingTarget
    : '<Any XMLName except a casing permutation of the string ""xml"">'
    ;

XMLProcessingValue
    : '<Any XMLString that does not contain a question-mark followed by "">"">'
    ;

XMLComment
    : '<' '!' '-' '-' XMLCommentCharacter* '-' '-' '>'
    ;

XMLCommentCharacter
    : '<Any XMLCharacter except dash (0x002D)>'
    | '-' '<Any XMLCharacter except dash (0x002D)>'
    ;

XMLCDATASection
    : '<' '!' ( 'CDATA' '[' XMLCDATASectionString? ']' )? '>'
    ;

XMLCDATASectionString
    : '<Any XMLString that does not contain the string ""]]>"">'
    ;

XMLMemberAccessExpression
    : Expression '.' <LineTerminator>? '<' XMLQualifiedName '>'
    | Expression '.' <LineTerminator>? '@' <LineTerminator>? '<' XMLQualifiedName '>'
    | Expression '.' <LineTerminator>? '@' <LineTerminator>? <IdentifierOrKeyword>
    | Expression '.' '.' '.' <LineTerminator>? '<' XMLQualifiedName '>'
    ;
*/
AwaitOperatorExpression
    : ""Await"" 'awaitToken' Expression 'value' {{AwaitExpression}}
    ;

AllModifiers
#AccessModifier
    : ""Public"" 
    | ""Protected""
    | ""Friend""
    | ""Private""
#AutoPropertyModifier
#    : AccessModifier
    | ""Shadows""
    | ""Shared""
    | ""Overridable""
    | ""NotOverridable""
    | ""Overrides""
    | ""Overloads""
#ClassModifier
#    : TypeModifier
    | ""MustInherit""
    | ""NotInheritable""
    | ""Partial""
#ConstantModifier
#    : AccessModifier
#    | ""Shadows""
#ConstructorModifier
#    : AccessModifier
#    | ""Shared""
#EventModifiers
#    : AccessModifier
#    | ""Shadows""
#    | ""Shared""
#ExternalMethodModifier
#    : AccessModifier
#    | ""Shadows""
#    | ""Overloads""
#OperatorModifier
#    : ""Public"" 
#    | ""Shared"" 
#    | ""Overloads"" 
#    | ""Shadows"" 
    | ""Widening"" 
    | ""Narrowing""
#ProcedureModifier
#    : AccessModifier 
#    | ""Shadows"" 
#    | ""Shared"" 
#    | ""Overridable"" 
#    | ""NotOverridable"" 
#    | ""Overrides""
#    | ""Overloads"" 
#    | ""Partial"" 
    | ""Iterator"" 
    | ""Async""
#PropertyModifier
#    : AutoPropertyModifier
    | ""Default""
    | ""ReadOnly""
    | ""WriteOnly""
#    | ""Iterator""
#StructureModifier
#    : TypeModifier
#    | ""Partial""
#TypeModifier
#    : AccessModifier
#    | ""Shadows""
#VariableModifier
#    : AccessModifier
#    | ""Shadows""
#    | ""Shared""
#    | ""ReadOnly""
    | ""WithEvents""
    | ""Dim""
    ;"
]

{ #category : #'file types' }
VBNetParser class >> fileExtensions [
	^ #('.vb')
]

{ #category : #accessing }
VBNetParser class >> keywords [
	^ keywords
		ifNil:
			[ keywords := (#(
            'AddHandler'       'AddressOf'       'Alias'        'And'
            'AndAlso'          'As'              'Boolean'      'ByRef'
            'Byte'             'ByVal'           'Call'         'Case'        
            'Catch'            'CBool'           'CByte'        'CChar'       
            'CDate'            'CDbl'            'CDec'         'Char'        
            'CInt'             'Class'           'CLng'         'CObj'        
            'Const'            'Continue'        'CSByte'       'CShort'      
            'CSng'             'CStr'            'CType'        'CUInt'       
            'CULng'            'CUShort'         'Date'         'Decimal'     
            'Declare'          'Default'         'Delegate'     'Dim'         
            'DirectCast'       'Do'              'Double'       'Each'        
            'Else'             'ElseIf'          'End'          'EndIf'       
            'Enum'             'Erase'           'Error'        'Event'       
            'Exit'             'False'           'Finally'      'For'         
            'Friend'           'Function'        'Get'          'GetType'     
            'GetXmlNamespace'  'Global'          'GoSub'        'GoTo'        
            'Handles'          'If'              'Implements'   'Imports'     
            'In'               'Inherits'        'Integer'      'Interface'   
            'Is'               'IsNot'           'Let'          'Lib'         
            'Like'             'Long'            'Loop'         'Me'          
            'Mod'              'Module'          'MustInherit'  'MustOverride'
            'MyBase'           'MyClass'         'Namespace'    'Narrowing'   
            'New'              'Next'            'Not'          'Nothing'     
            'NotInheritable'   'NotOverridable'  'Object'       'Of'          
            'On'               'Operator'        'Option'       'Optional'    
            'Or'               'OrElse'          'Overloads'    'Overridable' 
            'Overrides'        'ParamArray'      'Partial'      'Private'     
            'Property'         'Protected'       'Public'       'RaiseEvent'  
            'ReadOnly'         'ReDim'           'REM'          'RemoveHandler'
            'Resume'           'Return'          'SByte'        'Select'      
            'Set'              'Shadows'         'Shared'       'Short'       
            'Single'           'Static'          'Step'         'Stop'        
            'String'           'Structure'       'Sub'          'SyncLock'    
            'Then'             'Throw'           'To'           'True'        
            'Try'              'TryCast'         'TypeOf'       'UInteger'    
            'ULong'            'UShort'          'Using'        'Variant'     
            'Wend'             'When'            'While'        'Widening'    
            'With'             'WithEvents'      'WriteOnly'    'Xor' 
			 ) collect: [ :each | each asUppercase ]) asSet ]
]

{ #category : #generated }
VBNetParser class >> reduceTable [
^#(
	#(233 0 #nil 3428353 false ) 
	#(270 0 #reduceActionForOptionStatement__option__1: 14577665 false ) 
	#(233 2 #liftFirstValue: 3428354 false ) 
	#(232 2 #reduceActionForFile1: 3421185 false ) 
	#(271 0 #reduceActionForOptionStatement__option__1: 14604289 false ) 
	#(320 0 #reduceActionForOptionStatement__option__1: 19412993 false ) 
	#(269 2 #reduceActionForStart2: 14565378 false ) 
	#(270 2 #reduceActionForOptionStatement__option__2: 14577666 false ) 
	#(273 1 #liftFirstValue: 14899201 false ) 
	#(273 1 #liftFirstValue: 14899202 false ) 
	#(273 1 #liftFirstValue: 14899203 false ) 
	#(273 1 #liftFirstValue: 14899204 false ) 
	#(269 3 #reduceActionForStart3: 14565379 false ) 
	#(252 1 #reduceActionForAttributes1: 13316097 false ) 
	#(253 1 #reduceActionForAttributeBlock__attributeBlock__1: 13333505 false ) 
	#(269 3 #reduceActionForStart1: 14565377 false ) 
	#(271 2 #reduceActionForOptionStatement__option__2: 14604290 false ) 
	#(294 1 #reduceActionForAttributesNamespaceDeclaration1: 17319937 false ) 
	#(272 1 #reduceActionForNamespaceMemberDeclaration_1: 14660609 false ) 
	#(293 1 #reduceActionForAttributes1: 17210369 false ) 
	#(293 1 #reduceActionForAttributesNamespaceDeclaration1: 17210370 false ) 
	#(295 1 #liftFirstValue: 17445890 false ) 
	#(296 1 #liftFirstValue: 17521665 false ) 
	#(296 1 #liftFirstValue: 17521668 false ) 
	#(296 1 #liftFirstValue: 17521666 false ) 
	#(295 1 #liftFirstValue: 17445889 false ) 
	#(296 1 #liftFirstValue: 17521667 false ) 
	#(296 1 #liftFirstValue: 17521669 false ) 
	#(278 1 #liftFirstValue: 15578113 false ) 
	#(278 1 #liftFirstValue: 15578114 false ) 
	#(274 3 #reduceActionForOptionExplicitStatement2: 15039490 false ) 
	#(275 1 #liftFirstValue: 15204354 false ) 
	#(275 1 #liftFirstValue: 15204353 false ) 
	#(274 3 #reduceActionForOptionExplicitStatement1: 15039489 false ) 
	#(279 3 #reduceActionForOptionExplicitStatement2: 15624194 false ) 
	#(279 3 #reduceActionForOptionExplicitStatement1: 15624193 false ) 
	#(276 3 #reduceActionForOptionExplicitStatement2: 15247362 false ) 
	#(276 3 #reduceActionForOptionExplicitStatement1: 15247361 false ) 
	#(259 1 #liftFirstValue: 13767681 false ) 
	#(315 1 #liftFirstValue: 19004418 false ) 
	#(317 1 #liftFirstValue: 19203073 false ) 
	#(315 1 #liftFirstValue: 19004420 false ) 
	#(315 1 #liftFirstValue: 19004419 false ) 
	#(316 1 #liftFirstValue: 19110915 false ) 
	#(318 1 #liftFirstValue: 19321858 false ) 
	#(317 1 #liftFirstValue: 19203078 false ) 
	#(317 1 #liftFirstValue: 19203080 false ) 
	#(259 1 #liftFirstValue: 13767682 false ) 
	#(307 1 #reduceActionForBuiltInTypeName1: 18412545 false ) 
	#(317 1 #liftFirstValue: 19203074 false ) 
	#(317 1 #liftFirstValue: 19203076 false ) 
	#(318 1 #liftFirstValue: 19321857 false ) 
	#(315 1 #liftFirstValue: 19004421 false ) 
	#(317 1 #liftFirstValue: 19203077 false ) 
	#(317 1 #liftFirstValue: 19203079 false ) 
	#(317 1 #liftFirstValue: 19203075 false ) 
	#(302 0 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___1: 17954817 false ) 
	#(257 0 #reduceActionFor__Comma_Attribute__attribute____1: 13559809 false ) 
	#(258 1 #reduceActionForAttribute1: 13600769 false ) 
	#(299 1 #liftFirstValue: 17824769 false ) 
	#(299 1 #liftFirstValue: 17824770 false ) 
	#(307 1 #reduceActionForBuiltInTypeName1: 18412546 false ) 
	#(315 1 #liftFirstValue: 19004417 false ) 
	#(316 1 #liftFirstValue: 19110913 false ) 
	#(316 1 #liftFirstValue: 19110914 false ) 
	#(283 0 #reduceActionFor__Comma_Attribute__attribute____1: 15951873 false ) 
	#(284 1 #liftFirstValue: 15993857 false ) 
	#(284 1 #liftFirstValue: 15993858 false ) 
	#(286 1 #reduceActionForMembersImportsClause1: 16211969 false ) 
	#(297 1 #liftFirstValue: 17694722 false ) 
	#(298 1 #liftFirstValue: 17755137 false ) 
	#(298 1 #liftFirstValue: 17755138 false ) 
	#(297 1 #liftFirstValue: 17694721 false ) 
	#(289 1 #reduceActionForNamespaceName2: 16917506 false ) 
	#(292 0 #reduceActionFor__Comma_Attribute__attribute____1: 17137665 false ) 
	#(289 1 #reduceActionForNamespaceName1: 16917505 false ) 
	#(294 2 #reduceActionForAttributesNamespaceDeclaration2: 17319938 false ) 
	#(253 2 #reduceActionForOptionStatement__option__2: 13333506 false ) 
	#(272 2 #reduceActionForNamespaceMemberDeclaration_2: 14660610 false ) 
	#(648 1 #liftFirstValue: 67201041 false ) 
	#(648 1 #liftFirstValue: 67201042 false ) 
	#(648 1 #liftFirstValue: 67201046 false ) 
	#(648 1 #liftFirstValue: 67201027 false ) 
	#(648 1 #liftFirstValue: 67201040 false ) 
	#(648 1 #liftFirstValue: 67201035 false ) 
	#(648 1 #liftFirstValue: 67201039 false ) 
	#(648 1 #liftFirstValue: 67201036 false ) 
	#(648 1 #liftFirstValue: 67201032 false ) 
	#(648 1 #liftFirstValue: 67201034 false ) 
	#(648 1 #liftFirstValue: 67201031 false ) 
	#(648 1 #liftFirstValue: 67201033 false ) 
	#(648 1 #liftFirstValue: 67201037 false ) 
	#(648 1 #liftFirstValue: 67201028 false ) 
	#(648 1 #liftFirstValue: 67201026 false ) 
	#(648 1 #liftFirstValue: 67201025 false ) 
	#(648 1 #liftFirstValue: 67201043 false ) 
	#(648 1 #liftFirstValue: 67201029 false ) 
	#(648 1 #liftFirstValue: 67201030 false ) 
	#(648 1 #liftFirstValue: 67201038 false ) 
	#(648 1 #liftFirstValue: 67201045 false ) 
	#(648 1 #liftFirstValue: 67201044 false ) 
	#(320 2 #reduceActionForOptionStatement__option__2: 19412994 false ) 
	#(277 4 #reduceActionForOptionCompareStatement2: 15408130 false ) 
	#(277 4 #reduceActionForOptionCompareStatement1: 15408129 false ) 
	#(274 4 #reduceActionForOptionCompareStatement2: 15039492 false ) 
	#(274 4 #reduceActionForOptionCompareStatement1: 15039491 false ) 
	#(279 4 #reduceActionForOptionCompareStatement2: 15624196 false ) 
	#(279 4 #reduceActionForOptionCompareStatement1: 15624195 false ) 
	#(276 4 #reduceActionForOptionCompareStatement2: 15247364 false ) 
	#(276 4 #reduceActionForOptionCompareStatement1: 15247363 false ) 
	#(235 1 #liftFirstValue: 3808257 false ) 
	#(300 2 #reduceActionForQualifiedTypeName1: 17894401 false ) 
	#(254 3 #reduceActionForAttributeBlock1: 13374465 false ) 
	#(255 2 #reduceActionForAttributeList1: 13516801 false ) 
	#(605 0 #reduceActionForOptionStatement__option__1: 55568385 false ) 
	#(239 1 #liftFirstValue: 4068353 false ) 
	#(280 3 #reduceActionForImportsStatement2: 15782914 false ) 
	#(280 3 #reduceActionForImportsStatement1: 15782913 false ) 
	#(281 2 #reduceActionForAttributeList1: 15906817 false ) 
	#(309 2 #reduceActionForNullableTypeName1: 18638849 false ) 
	#(342 2 #reduceActionForArrayTypeName1: 22865921 false ) 
	#(343 1 #reduceActionForAttributes1: 22942721 false ) 
	#(344 1 #reduceActionForAttributeBlock__attributeBlock__1: 22968321 false ) 
	#(290 2 #reduceActionForAttributeList1: 17088513 false ) 
	#(288 0 #reduceActionFor__Comma_Attribute__attribute____1: 16776193 false ) 
	#(350 1 #liftFirstValue: 23450625 false ) 
	#(350 1 #liftFirstValue: 23450626 false ) 
	#(235 2 #liftFirstValue: 3808258 false ) 
	#(302 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___2: 17954818 false ) 
	#(300 3 #reduceActionForQualifiedTypeName2: 17894402 false ) 
	#(254 4 #reduceActionForAttributeBlock3: 13374467 false ) 
	#(254 4 #reduceActionForAttributeBlock1: 13374466 false ) 
	#(254 4 #reduceActionForAttributeBlock4: 13374468 false ) 
	#(234 1 #liftFirstValue: 3702785 false ) 
	#(257 2 #reduceActionFor__Comma_Attribute__attribute____2: 13559810 false ) 
	#(258 3 #reduceActionForAttribute4: 13600772 false ) 
	#(236 1 #liftFirstValue: 3872769 false ) 
	#(584 1 #liftFirstValue: 51579905 false ) 
	#(584 1 #liftFirstValue: 51579906 false ) 
	#(584 1 #liftFirstValue: 51579907 false ) 
	#(584 1 #liftFirstValue: 51579908 false ) 
	#(584 1 #liftFirstValue: 51579910 false ) 
	#(584 1 #liftFirstValue: 51579909 false ) 
	#(584 1 #liftFirstValue: 51579911 false ) 
	#(584 1 #liftFirstValue: 51579912 false ) 
	#(584 1 #liftFirstValue: 51579913 false ) 
	#(584 1 #liftFirstValue: 51579914 false ) 
	#(584 1 #liftFirstValue: 51579915 false ) 
	#(584 1 #liftFirstValue: 51579916 false ) 
	#(584 1 #liftFirstValue: 51579917 false ) 
	#(584 1 #liftFirstValue: 51579918 false ) 
	#(584 1 #liftFirstValue: 51579919 false ) 
	#(584 1 #liftFirstValue: 51579920 false ) 
	#(554 1 #reduceActionForMemberAccessBase3: 48154627 false ) 
	#(540 1 #reduceActionForInstanceExpression1: 46357505 false ) 
	#(554 1 #reduceActionForMemberAccessBase5: 48154629 false ) 
	#(554 1 #reduceActionForMemberAccessBase4: 48154628 false ) 
	#(237 1 #liftFirstValue: 3939329 false ) 
	#(241 1 #reduceActionForLiteral1: 5623809 false ) 
	#(241 1 #reduceActionForLiteral2: 5623810 false ) 
	#(241 1 #reduceActionForLiteral3: 5623811 false ) 
	#(241 1 #reduceActionForLiteral4: 5623812 false ) 
	#(241 1 #reduceActionForLiteral5: 5623813 false ) 
	#(241 1 #reduceActionForLiteral6: 5623814 false ) 
	#(241 1 #reduceActionForLiteral7: 5623815 false ) 
	#(541 1 #reduceActionForSimpleNameExpression1: 46410753 false ) 
	#(258 3 #reduceActionForAttribute2: 13600770 false ) 
	#(538 1 #liftFirstValue: 46219265 false ) 
	#(260 1 #reduceActionForAttributes1: 13821953 false ) 
	#(260 1 #reduceActionForAttributes1: 13821955 false ) 
	#(266 0 #reduceActionFor__Comma_Attribute__attribute____1: 14221313 false ) 
	#(263 0 #reduceActionFor__Comma_Attribute__attribute____1: 14083073 false ) 
	#(554 1 #liftFirstValue: 48154626 false ) 
	#(536 1 #liftFirstValue: 46015489 false ) 
	#(268 1 #liftFirstValue: 14405633 false ) 
	#(535 1 #liftFirstValue: 45546497 false ) 
	#(556 1 #liftFirstValue: 48457729 false ) 
	#(537 1 #liftFirstValue: 46059521 false ) 
	#(556 1 #liftFirstValue: 48457730 false ) 
	#(537 1 #liftFirstValue: 46059522 false ) 
	#(556 1 #liftFirstValue: 48457731 false ) 
	#(537 1 #liftFirstValue: 46059523 false ) 
	#(556 1 #liftFirstValue: 48457732 false ) 
	#(537 1 #liftFirstValue: 46059524 false ) 
	#(537 1 #liftFirstValue: 46059525 false ) 
	#(535 1 #liftFirstValue: 45546498 false ) 
	#(556 1 #liftFirstValue: 48457733 false ) 
	#(543 1 #liftFirstValue: 46630913 false ) 
	#(543 1 #liftFirstValue: 46630914 false ) 
	#(543 1 #liftFirstValue: 46630915 false ) 
	#(556 1 #liftFirstValue: 48457734 false ) 
	#(535 1 #liftFirstValue: 45546499 false ) 
	#(556 1 #liftFirstValue: 48457735 false ) 
	#(535 1 #liftFirstValue: 45546500 false ) 
	#(554 1 #liftFirstValue: 48154625 false ) 
	#(556 1 #liftFirstValue: 48457736 false ) 
	#(535 1 #liftFirstValue: 45546501 false ) 
	#(556 1 #liftFirstValue: 48457737 false ) 
	#(535 1 #liftFirstValue: 45546502 false ) 
	#(565 1 #liftFirstValue: 49439745 false ) 
	#(581 1 #liftFirstValue: 50885633 false ) 
	#(565 1 #liftFirstValue: 49439746 false ) 
	#(579 1 #liftFirstValue: 50637825 false ) 
	#(579 1 #liftFirstValue: 50637826 false ) 
	#(565 1 #liftFirstValue: 49439747 false ) 
	#(556 1 #liftFirstValue: 48457738 false ) 
	#(535 1 #liftFirstValue: 45546503 false ) 
	#(535 1 #liftFirstValue: 45546504 false ) 
	#(585 1 #liftFirstValue: 51775489 false ) 
	#(586 1 #liftFirstValue: 52081665 false ) 
	#(586 1 #liftFirstValue: 52081666 false ) 
	#(586 1 #liftFirstValue: 52081667 false ) 
	#(586 1 #liftFirstValue: 52081668 false ) 
	#(586 1 #liftFirstValue: 52081669 false ) 
	#(586 1 #liftFirstValue: 52081670 false ) 
	#(592 1 #liftFirstValue: 52973569 false ) 
	#(592 1 #liftFirstValue: 52973570 false ) 
	#(586 1 #liftFirstValue: 52081671 false ) 
	#(586 1 #liftFirstValue: 52081672 false ) 
	#(585 1 #liftFirstValue: 51775490 false ) 
	#(585 1 #liftFirstValue: 51775491 false ) 
	#(585 1 #liftFirstValue: 51775492 false ) 
	#(585 1 #liftFirstValue: 51775494 false ) 
	#(585 1 #liftFirstValue: 51775493 false ) 
	#(585 1 #liftFirstValue: 51775495 false ) 
	#(535 1 #liftFirstValue: 45546506 false ) 
	#(603 1 #liftFirstValue: 55474177 false ) 
	#(556 1 #liftFirstValue: 48457740 false ) 
	#(603 1 #liftFirstValue: 55474178 false ) 
	#(606 1 #liftFirstValue: 55961601 false ) 
	#(606 1 #liftFirstValue: 55961602 false ) 
	#(535 1 #liftFirstValue: 45546507 false ) 
	#(612 0 #reduceActionFor__LineTerminator___QueryOperator__1: 56666113 false ) 
	#(613 1 #reduceActionForFromOrAggregateQueryOperator1: 56714241 false ) 
	#(613 1 #reduceActionForFromOrAggregateQueryOperator2: 56714242 false ) 
	#(556 1 #liftFirstValue: 48457739 false ) 
	#(535 1 #liftFirstValue: 45546505 false ) 
	#(585 1 #liftFirstValue: 51775496 false ) 
	#(239 2 #liftFirstValue: 4068354 false ) 
	#(285 3 #reduceActionForAliasImportsClause1: 16130049 false ) 
	#(283 2 #reduceActionFor__Comma_Attribute__attribute____2: 15951874 false ) 
	#(347 1 #reduceActionForAttributeBlock__attributeBlock__1: 23111681 false ) 
	#(345 2 #reduceActionForArrayTypeModifier1: 23015425 false ) 
	#(346 1 #reduceActionForAttributes1: 23096321 false ) 
	#(344 2 #reduceActionForOptionStatement__option__2: 22968322 false ) 
	#(289 3 #reduceActionForNamespaceName3: 16917507 false ) 
	#(292 2 #reduceActionFor__Comma_Attribute__attribute____2: 17137666 false ) 
	#(324 0 #reduceActionForTypeImplementsClause_1: 20093953 false ) 
	#(361 2 #reduceActionForFunctionSignature1: 24448001 false ) 
	#(360 2 #reduceActionForSubSignature1: 24281089 false ) 
	#(349 4 #reduceActionForDelegateDeclaration2: 23269378 false ) 
	#(349 4 #reduceActionForDelegateDeclaration1: 23269377 false ) 
	#(335 0 #reduceActionForTypeImplementsClause_1: 22291457 false ) 
	#(332 0 #reduceActionForOptionStatement__option__1: 21679105 false ) 
	#(300 4 #reduceActionForQualifiedTypeName3: 17894403 false ) 
	#(306 0 #reduceActionFor__Comma_Attribute__attribute____1: 18378753 false ) 
	#(301 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__1: 17954817 false ) 
	#(254 5 #reduceActionForAttributeBlock6: 13374470 false ) 
	#(254 5 #reduceActionForAttributeBlock4: 13374469 false ) 
	#(234 2 #liftFirstValue: 3702786 false ) 
	#(256 2 #reduceActionFor__Comma_Attribute__attribute___1: 13559809 false ) 
	#(555 2 #reduceActionForDictionaryAccessExpression1: 48346113 false ) 
	#(587 2 #reduceActionForUnaryPlusExpression1: 52382721 false ) 
	#(588 2 #reduceActionForUnaryPlusExpression1: 52471809 false ) 
	#(553 2 #reduceActionForMemberAccessExpression1: 47947777 false ) 
	#(542 2 #reduceActionForAddressOfExpression1: 46542849 false ) 
	#(644 0 #reduceActionFor__LineTerminator___QueryOperator__1: 59826177 false ) 
	#(647 2 #reduceActionForAwaitOperatorExpression1: 67101697 false ) 
	#(624 2 #reduceActionForFromQueryOperator1: 57795585 false ) 
	#(618 0 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: 57279489 false ) 
	#(566 2 #reduceActionForObjectCreationExpression1: 49556481 false ) 
	#(582 2 #reduceActionForAnonymousObjectCreationExpression1: 50945025 false ) 
	#(600 2 #reduceActionForUnaryPlusExpression1: 54539265 false ) 
	#(237 2 #liftFirstValue: 3939330 false ) 
	#(236 2 #liftSecondValue: 3872770 false ) 
	#(240 1 #liftFirstValue: 4120577 false ) 
	#(238 1 #liftFirstValue: 4002817 false ) 
	#(574 2 #reduceActionForCollectionInitializer1: 50366465 false ) 
	#(578 1 #liftFirstValue: 50566145 false ) 
	#(578 1 #liftFirstValue: 50566146 false ) 
	#(577 0 #reduceActionFor__Comma_Attribute__attribute____1: 50520065 false ) 
	#(258 4 #reduceActionForAttribute3: 13600771 false ) 
	#(264 2 #reduceActionForAttributeList1: 14142465 false ) 
	#(261 2 #reduceActionForAttributeList1: 14004225 false ) 
	#(609 1 #liftFirstValue: 56563713 false ) 
	#(609 1 #liftFirstValue: 56563714 false ) 
	#(605 2 #reduceActionForOptionStatement__option__2: 55568386 false ) 
	#(610 2 #reduceActionForQueryExpression1: 56613889 false ) 
	#(282 2 #reduceActionFor__Comma_Attribute__attribute___1: 15951873 false ) 
	#(345 3 #reduceActionForArrayTypeModifier2: 23015426 false ) 
	#(347 2 #reduceActionForOptionStatement__option__2: 23111682 false ) 
	#(289 4 #reduceActionForNamespaceName4: 16917508 false ) 
	#(291 2 #reduceActionFor__Comma_Attribute__attribute___1: 17137665 false ) 
	#(288 2 #reduceActionForNamespaceMemberDeclaration_2: 16776194 false ) 
	#(349 5 #reduceActionForDelegateDeclaration4: 23269380 false ) 
	#(349 5 #reduceActionForDelegateDeclaration3: 23269379 false ) 
	#(325 0 #reduceActionForOptionStatement__option__1: 20122625 false ) 
	#(362 0 #reduceActionForOptionStatement__option__1: 24641537 false ) 
	#(386 0 #reduceActionForOptionStatement__option__1: 27738113 false ) 
	#(361 3 #reduceActionForFunctionSignature7: 24448007 false ) 
	#(360 3 #reduceActionForSubSignature4: 24281092 false ) 
	#(321 1 #reduceActionForAttributeBlock__attributeBlock__1: 19582977 false ) 
	#(336 0 #reduceActionForOptionStatement__option__1: 22312961 false ) 
	#(329 0 #reduceActionForOptionStatement__option__1: 21020673 false ) 
	#(300 5 #reduceActionForQualifiedTypeName5: 17894405 false ) 
	#(300 5 #reduceActionForQualifiedTypeName4: 17894404 false ) 
	#(304 2 #reduceActionForAttributeList1: 18338817 false ) 
	#(303 4 #reduceActionForTypeArguments1: 18244609 false ) 
	#(301 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__3: 17954819 false ) 
	#(301 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__2: 17954818 false ) 
	#(258 5 #reduceActionForAttribute5: 13600773 false ) 
	#(553 3 #reduceActionForMemberAccessExpression3: 47947779 false ) 
	#(624 3 #reduceActionForFromQueryOperator2: 57795586 false ) 
	#(616 2 #reduceActionForCollectionRangeVariableDeclarationList1: 57197569 false ) 
	#(548 0 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: 47034369 false ) 
	#(545 1 #liftFirstValue: 46901249 false ) 
	#(545 1 #liftFirstValue: 46901250 false ) 
	#(348 1 #reduceActionForArrayNameModifier1: 23179265 false ) 
	#(348 1 #reduceActionForArrayNameModifier2: 23179266 false ) 
	#(566 3 #reduceActionForObjectCreationExpression2: 49556482 false ) 
	#(567 1 #liftFirstValue: 49778689 false ) 
	#(567 1 #liftFirstValue: 49778690 false ) 
	#(240 2 #liftFirstValue: 4120578 false ) 
	#(267 3 #reduceActionForVariablePropertyInitializer1: 14279681 false ) 
	#(539 3 #reduceActionForParenthesizedExpression1: 46259201 false ) 
	#(238 2 #liftSecondValue: 4002818 false ) 
	#(574 3 #reduceActionForCollectionInitializer2: 50366466 false ) 
	#(575 2 #reduceActionForAttributeList1: 50462721 false ) 
	#(260 3 #reduceActionForAttributeArguments2: 13821954 false ) 
	#(266 2 #reduceActionFor__Comma_Attribute__attribute____2: 14221314 false ) 
	#(262 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 14083073 false ) 
	#(263 2 #reduceActionFor__Comma_Attribute__attribute____2: 14083074 false ) 
	#(599 3 #reduceActionForConcatenationOperatorExpression1: 54400001 false ) 
	#(591 3 #reduceActionForConcatenationOperatorExpression1: 52833281 false ) 
	#(589 3 #reduceActionForConcatenationOperatorExpression1: 52561921 false ) 
	#(590 3 #reduceActionForConcatenationOperatorExpression1: 52696065 false ) 
	#(593 3 #reduceActionForConcatenationOperatorExpression1: 53085185 false ) 
	#(597 3 #reduceActionForConcatenationOperatorExpression1: 53630981 false ) 
	#(602 3 #reduceActionForConcatenationOperatorExpression1: 55195649 false ) 
	#(597 3 #reduceActionForConcatenationOperatorExpression1: 53630985 false ) 
	#(597 3 #reduceActionForConcatenationOperatorExpression1: 53630979 false ) 
	#(597 3 #reduceActionForConcatenationOperatorExpression1: 53630977 false ) 
	#(597 3 #reduceActionForConcatenationOperatorExpression1: 53630983 false ) 
	#(597 3 #reduceActionForConcatenationOperatorExpression1: 53630987 false ) 
	#(602 3 #reduceActionForConcatenationOperatorExpression1: 55195651 false ) 
	#(600 3 #reduceActionForConcatenationOperatorExpression1: 54539266 false ) 
	#(601 3 #reduceActionForConcatenationOperatorExpression1: 54939649 false ) 
	#(552 3 #reduceActionForConcatenationOperatorExpression1: 47586305 false ) 
	#(552 3 #reduceActionForConcatenationOperatorExpression1: 47586307 false ) 
	#(598 3 #reduceActionForConcatenationOperatorExpression1: 54266881 false ) 
	#(595 3 #reduceActionForConcatenationOperatorExpression1: 53362689 false ) 
	#(600 3 #reduceActionForConcatenationOperatorExpression1: 54539268 false ) 
	#(601 3 #reduceActionForConcatenationOperatorExpression1: 54939651 false ) 
	#(600 3 #reduceActionForConcatenationOperatorExpression1: 54539270 false ) 
	#(594 3 #reduceActionForConcatenationOperatorExpression1: 53221377 false ) 
	#(596 3 #reduceActionForConcatenationOperatorExpression1: 53496833 false ) 
	#(553 3 #reduceActionForMemberAccessExpression5: 47947781 false ) 
	#(555 3 #reduceActionForDictionaryAccessExpression2: 48346114 false ) 
	#(557 3 #reduceActionForInvocationExpression1: 48793601 false ) 
	#(561 0 #reduceActionFor__Comma_Attribute__attribute____1: 49093633 false ) 
	#(558 1 #reduceActionForArgumentList1: 48912385 false ) 
	#(558 1 #reduceActionForArgumentList3: 48912387 false ) 
	#(451 0 #reduceActionForOptionStatement__option__1: 36994049 false ) 
	#(604 3 #reduceActionForSingleLineLambda1: 55544833 false ) 
	#(458 1 #liftFirstValue: 37421059 false ) 
	#(458 1 #liftFirstValue: 37421058 false ) 
	#(520 1 #reduceActionForEndStatement1: 44525569 false ) 
	#(511 1 #reduceActionForResumeStatement1: 43790337 false ) 
	#(521 1 #reduceActionForReturnStatement1: 44578817 false ) 
	#(458 1 #liftFirstValue: 37421057 false ) 
	#(519 1 #reduceActionForStopStatement1: 44469249 false ) 
	#(506 1 #reduceActionForThrowStatement1: 43161601 false ) 
	#(453 1 #liftFirstValue: 37127170 false ) 
	#(453 1 #liftFirstValue: 37127169 false ) 
	#(604 3 #reduceActionForSingleLineLambda4: 55544836 false ) 
	#(448 1 #liftFirstValue: 36534273 false ) 
	#(448 1 #liftFirstValue: 36534274 false ) 
	#(448 1 #liftFirstValue: 36534275 false ) 
	#(448 1 #liftFirstValue: 36534276 false ) 
	#(448 1 #liftFirstValue: 36534277 false ) 
	#(461 1 #liftFirstValue: 37812225 false ) 
	#(461 1 #liftFirstValue: 37812226 false ) 
	#(461 1 #liftFirstValue: 37812227 false ) 
	#(448 1 #liftFirstValue: 36534278 false ) 
	#(465 1 #liftFirstValue: 38334465 false ) 
	#(465 1 #liftFirstValue: 38334466 false ) 
	#(465 1 #liftFirstValue: 38334467 false ) 
	#(448 1 #liftFirstValue: 36534279 false ) 
	#(448 1 #liftFirstValue: 36534280 false ) 
	#(471 1 #liftFirstValue: 39155713 false ) 
	#(472 1 #liftFirstValue: 39225345 false ) 
	#(472 1 #liftFirstValue: 39225346 false ) 
	#(471 1 #liftFirstValue: 39155714 false ) 
	#(448 1 #liftFirstValue: 36534281 false ) 
	#(488 1 #liftFirstValue: 41016321 false ) 
	#(488 1 #liftFirstValue: 41016322 false ) 
	#(490 1 #liftFirstValue: 41291777 false ) 
	#(490 1 #liftFirstValue: 41291778 false ) 
	#(488 1 #liftFirstValue: 41016323 false ) 
	#(488 1 #liftFirstValue: 41016324 false ) 
	#(448 1 #liftFirstValue: 36534282 false ) 
	#(500 1 #liftFirstValue: 42493953 false ) 
	#(501 1 #liftFirstValue: 42590210 false ) 
	#(501 1 #liftFirstValue: 42590209 false ) 
	#(500 1 #liftFirstValue: 42493954 false ) 
	#(507 1 #liftFirstValue: 43241473 false ) 
	#(507 1 #liftFirstValue: 43241474 false ) 
	#(507 1 #liftFirstValue: 43241475 false ) 
	#(448 1 #liftFirstValue: 36534283 false ) 
	#(513 1 #liftFirstValue: 43926529 false ) 
	#(513 1 #liftFirstValue: 43926530 false ) 
	#(513 1 #liftFirstValue: 43926531 false ) 
	#(513 1 #liftFirstValue: 43926532 false ) 
	#(513 1 #liftFirstValue: 43926533 false ) 
	#(513 1 #liftFirstValue: 43926534 false ) 
	#(448 1 #liftFirstValue: 36534284 false ) 
	#(522 1 #liftFirstValue: 44661761 false ) 
	#(522 1 #liftFirstValue: 44661762 false ) 
	#(448 1 #liftFirstValue: 36534285 false ) 
	#(448 1 #liftFirstValue: 36534286 false ) 
	#(470 1 #reduceActionForInvocationStatement1: 39066625 false ) 
	#(632 1 #liftFirstValue: 58546177 false ) 
	#(612 2 #reduceActionFor__LineTerminator___QueryOperator__2: 56666114 false ) 
	#(611 1 #reduceActionForAttributes1: 56666113 false ) 
	#(614 1 #reduceActionForQueryOperator10: 56805386 false ) 
	#(614 1 #reduceActionForFromOrAggregateQueryOperator1: 56805377 false ) 
	#(615 1 #reduceActionForAttributes1: 57106433 false ) 
	#(614 1 #reduceActionForQueryOperator8: 56805384 false ) 
	#(614 1 #reduceActionForQueryOperator3: 56805379 false ) 
	#(614 1 #reduceActionForQueryOperator4: 56805380 false ) 
	#(614 1 #reduceActionForQueryOperator5: 56805381 false ) 
	#(614 1 #reduceActionForQueryOperator7: 56805383 false ) 
	#(614 1 #reduceActionForQueryOperator6: 56805382 false ) 
	#(614 1 #reduceActionForQueryOperator9: 56805385 false ) 
	#(614 1 #reduceActionForFromOrAggregateQueryOperator2: 56805378 false ) 
	#(615 1 #reduceActionForJoinOrGroupJoinQueryOperator2: 57106434 false ) 
	#(291 3 #reduceActionFor_______period___LineTerminator____IdentifierOrKeyword___name__2: 17137666 false ) 
	#(324 2 #reduceActionForTypeImplementsClause_2: 20093954 false ) 
	#(246 1 #liftFirstValue: 12805121 false ) 
	#(246 1 #liftFirstValue: 12805122 false ) 
	#(245 1 #reduceActionForTypeParameter1: 12695553 false ) 
	#(244 0 #reduceActionFor__Comma_Attribute__attribute____1: 12623873 false ) 
	#(362 1 #reduceActionForAttributes1: 24641538 false ) 
	#(361 4 #reduceActionForFunctionSignature3: 24448003 false ) 
	#(384 0 #reduceActionFor__Comma_Attribute__attribute____1: 27669505 false ) 
	#(360 4 #reduceActionForSubSignature2: 24281090 false ) 
	#(322 2 #reduceActionForEnumMemberDeclaration2: 19723266 false ) 
	#(322 2 #reduceActionForEnumMemberDeclaration1: 19723265 false ) 
	#(321 2 #reduceActionForOptionStatement__option__2: 19582978 false ) 
	#(440 0 #reduceActionForOptionStatement__option__1: 34562049 false ) 
	#(398 0 #reduceActionForOptionStatement__option__1: 29364225 false ) 
	#(366 0 #reduceActionForOptionStatement__option__1: 25240577 false ) 
	#(335 2 #reduceActionForTypeImplementsClause_2: 22291458 false ) 
	#(333 1 #liftFirstValue: 21825537 false ) 
	#(332 2 #reduceActionForOptionStatement__option__2: 21679106 false ) 
	#(333 1 #liftFirstValue: 21825541 false ) 
	#(356 1 #liftFirstValue: 23869441 false ) 
	#(358 1 #liftFirstValue: 24033281 false ) 
	#(358 1 #liftFirstValue: 24033282 false ) 
	#(358 1 #liftFirstValue: 24033283 false ) 
	#(358 1 #liftFirstValue: 24033284 false ) 
	#(356 1 #liftFirstValue: 23869442 false ) 
	#(373 1 #liftFirstValue: 26533889 false ) 
	#(373 1 #liftFirstValue: 26533890 false ) 
	#(333 1 #liftFirstValue: 21825543 false ) 
	#(333 1 #liftFirstValue: 21825540 false ) 
	#(395 1 #liftFirstValue: 28991489 false ) 
	#(395 1 #liftFirstValue: 28991490 false ) 
	#(333 1 #liftFirstValue: 21825539 false ) 
	#(333 1 #liftFirstValue: 21825538 false ) 
	#(333 1 #liftFirstValue: 21825542 false ) 
	#(427 1 #liftFirstValue: 32770049 false ) 
	#(427 1 #liftFirstValue: 32770050 false ) 
	#(427 1 #liftFirstValue: 32770051 false ) 
	#(413 1 #reduceActionForAttributeBlock__attributeBlock__1: 31706113 false ) 
	#(300 6 #reduceActionForQualifiedTypeName6: 17894406 false ) 
	#(306 2 #reduceActionFor__Comma_Attribute__attribute____2: 18378754 false ) 
	#(301 4 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__4: 17954820 false ) 
	#(258 6 #reduceActionForAttribute6: 13600774 false ) 
	#(619 3 #reduceActionForCollectionRangeVariableDeclaration1: 57333761 false ) 
	#(644 2 #reduceActionFor__LineTerminator___QueryOperator__2: 59826178 false ) 
	#(618 2 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___2: 57279490 false ) 
	#(546 2 #reduceActionForQualifiedOpenTypeName1: 46969857 false ) 
	#(544 4 #reduceActionForGetTypeExpression1: 46781441 false ) 
	#(572 1 #reduceActionForFieldInitializer1: 50112513 false ) 
	#(571 0 #reduceActionFor__Comma_Attribute__attribute____1: 50063361 false ) 
	#(573 2 #reduceActionForObjectCollectionInitializer1: 50263041 false ) 
	#(566 4 #reduceActionForObjectCreationExpression3: 49556483 false ) 
	#(425 0 #reduceActionFor__Comma_Attribute__attribute____1: 32618497 false ) 
	#(426 1 #liftFirstValue: 32651265 false ) 
	#(580 4 #reduceActionForArrayCreationExpression1: 50721793 false ) 
	#(551 4 #reduceActionForTypeOfIsExpression1: 47450113 false ) 
	#(577 2 #reduceActionFor__Comma_Attribute__attribute____2: 50520066 false ) 
	#(265 2 #reduceActionFor__Comma_Attribute__attribute___1: 14221313 false ) 
	#(262 2 #reduceActionFor__Comma_Attribute__attribute___1: 14083074 false ) 
	#(599 4 #reduceActionForConcatenationOperatorExpression2: 54400002 false ) 
	#(591 4 #reduceActionForConcatenationOperatorExpression2: 52833282 false ) 
	#(589 4 #reduceActionForConcatenationOperatorExpression2: 52561922 false ) 
	#(590 4 #reduceActionForConcatenationOperatorExpression2: 52696066 false ) 
	#(593 4 #reduceActionForConcatenationOperatorExpression2: 53085186 false ) 
	#(597 4 #reduceActionForConcatenationOperatorExpression2: 53630982 false ) 
	#(602 4 #reduceActionForConcatenationOperatorExpression2: 55195650 false ) 
	#(597 4 #reduceActionForConcatenationOperatorExpression2: 53630986 false ) 
	#(597 4 #reduceActionForConcatenationOperatorExpression2: 53630980 false ) 
	#(597 4 #reduceActionForConcatenationOperatorExpression2: 53630978 false ) 
	#(597 4 #reduceActionForConcatenationOperatorExpression2: 53630984 false ) 
	#(597 4 #reduceActionForConcatenationOperatorExpression2: 53630988 false ) 
	#(602 4 #reduceActionForConcatenationOperatorExpression2: 55195652 false ) 
	#(600 4 #reduceActionForConcatenationOperatorExpression2: 54539267 false ) 
	#(601 4 #reduceActionForConcatenationOperatorExpression2: 54939650 false ) 
	#(552 4 #reduceActionForConcatenationOperatorExpression2: 47586306 false ) 
	#(552 4 #reduceActionForConcatenationOperatorExpression2: 47586308 false ) 
	#(598 4 #reduceActionForConcatenationOperatorExpression2: 54266882 false ) 
	#(595 4 #reduceActionForConcatenationOperatorExpression2: 53362690 false ) 
	#(600 4 #reduceActionForConcatenationOperatorExpression2: 54539269 false ) 
	#(601 4 #reduceActionForConcatenationOperatorExpression2: 54939652 false ) 
	#(600 4 #reduceActionForConcatenationOperatorExpression2: 54539271 false ) 
	#(594 4 #reduceActionForConcatenationOperatorExpression2: 53221378 false ) 
	#(596 4 #reduceActionForConcatenationOperatorExpression2: 53496834 false ) 
	#(553 4 #reduceActionForMemberAccessExpression7: 47947783 false ) 
	#(559 2 #reduceActionForAttributeList1: 49041409 false ) 
	#(557 4 #reduceActionForInvocationExpression2: 48793602 false ) 
	#(583 4 #reduceActionForCastExpression4: 51081220 false ) 
	#(449 1 #reduceActionForAttributes1: 36981761 false ) 
	#(470 2 #reduceActionForInvocationStatement2: 39066626 false ) 
	#(518 1 #liftFirstValue: 44419073 false ) 
	#(518 1 #liftFirstValue: 44419074 false ) 
	#(518 1 #liftFirstValue: 44419075 false ) 
	#(517 2 #reduceActionForContinueStatement1: 44324865 false ) 
	#(493 1 #liftFirstValue: 41690114 false ) 
	#(493 1 #liftFirstValue: 41690113 false ) 
	#(528 2 #reduceActionForEraseStatement1: 44997633 false ) 
	#(531 0 #reduceActionFor__Comma_Attribute__attribute____1: 45117441 false ) 
	#(508 2 #reduceActionForErrorStatement1: 43343873 false ) 
	#(516 1 #liftFirstValue: 44224513 false ) 
	#(516 1 #liftFirstValue: 44224514 false ) 
	#(516 1 #liftFirstValue: 44224518 false ) 
	#(516 1 #liftFirstValue: 44224519 false ) 
	#(516 1 #liftFirstValue: 44224516 false ) 
	#(516 1 #liftFirstValue: 44224517 false ) 
	#(516 1 #liftFirstValue: 44224520 false ) 
	#(516 1 #liftFirstValue: 44224515 false ) 
	#(515 2 #reduceActionForExitStatement1: 44151809 false ) 
	#(495 1 #reduceActionForLoopControlVariable1: 42032129 false ) 
	#(308 0 #reduceActionForIdentifierModifiers1: 18563073 false ) 
	#(495 1 #liftFirstValue: 42032131 false ) 
	#(514 2 #reduceActionForGoToStatement1: 44078081 false ) 
	#(462 2 #reduceActionForRaiseEventStatement1: 37917697 false ) 
	#(523 2 #reduceActionForRedimStatement1: 44735489 false ) 
	#(526 0 #reduceActionFor__Comma_Attribute__attribute____1: 44876801 false ) 
	#(512 1 #liftFirstValue: 43876353 false ) 
	#(512 1 #liftFirstValue: 43876354 false ) 
	#(511 2 #reduceActionForResumeStatement2: 43790338 false ) 
	#(521 2 #reduceActionForReturnStatement2: 44578818 false ) 
	#(506 2 #reduceActionForThrowStatement2: 43161602 false ) 
	#(533 1 #reduceActionForAttributes1: 45307905 false ) 
	#(416 0 #reduceActionFor__Comma_Attribute__attribute____1: 32015361 false ) 
	#(417 1 #reduceActionForVariableDeclarator2: 32063490 false ) 
	#(420 0 #reduceActionFor__Comma_Attribute__attribute____1: 32338945 false ) 
	#(533 1 #reduceActionForUsingResources2: 45307906 false ) 
	#(534 2 #reduceActionForYieldStatement1: 45446145 false ) 
	#(452 2 #reduceActionForLabelDeclarationStatement1: 37046273 false ) 
	#(457 2 #reduceActionForLocalDeclarationStatement1: 37325825 false ) 
	#(468 1 #liftFirstValue: 38732807 false ) 
	#(468 1 #liftFirstValue: 38732802 false ) 
	#(468 1 #liftFirstValue: 38732805 false ) 
	#(468 1 #liftFirstValue: 38732806 false ) 
	#(468 1 #liftFirstValue: 38732803 false ) 
	#(468 1 #liftFirstValue: 38732808 false ) 
	#(468 1 #liftFirstValue: 38732809 false ) 
	#(468 1 #liftFirstValue: 38732804 false ) 
	#(468 1 #liftFirstValue: 38732801 false ) 
	#(622 0 #reduceActionFor__Comma_Attribute__attribute____1: 57589761 false ) 
	#(630 2 #reduceActionForLetQueryOperator1: 58323969 false ) 
	#(631 2 #reduceActionForLetQueryOperator1: 58430465 false ) 
	#(634 2 #reduceActionForPartitionQueryOperator5: 58697733 false ) 
	#(634 2 #reduceActionForPartitionQueryOperator1: 58697729 false ) 
	#(633 2 #liftSecondValue: 58609665 false ) 
	#(611 2 #reduceActionFor__LineTerminator___QueryOperator_2: 56666114 false ) 
	#(287 7 #reduceActionForNamespaceDeclaration4: 16651268 false ) 
	#(287 7 #reduceActionForNamespaceDeclaration3: 16651267 false ) 
	#(287 7 #reduceActionForNamespaceDeclaration2: 16651266 false ) 
	#(287 7 #reduceActionForNamespaceDeclaration1: 16651265 false ) 
	#(326 3 #reduceActionForClassBase2: 20373506 false ) 
	#(326 3 #reduceActionForClassBase1: 20373505 false ) 
	#(314 0 #reduceActionFor__Comma_Attribute__attribute____1: 18956289 false ) 
	#(327 1 #liftFirstValue: 20500481 false ) 
	#(325 2 #reduceActionForOptionStatement__option__2: 20122626 false ) 
	#(327 1 #liftFirstValue: 20500485 false ) 
	#(327 1 #liftFirstValue: 20500487 false ) 
	#(327 1 #liftFirstValue: 20500482 false ) 
	#(327 1 #liftFirstValue: 20500484 false ) 
	#(327 1 #liftFirstValue: 20500483 false ) 
	#(327 1 #liftFirstValue: 20500486 false ) 
	#(327 1 #liftFirstValue: 20500488 false ) 
	#(245 2 #reduceActionForTypeParameter2: 12695554 false ) 
	#(245 2 #reduceActionForTypeParameter3: 12695555 false ) 
	#(361 5 #reduceActionForFunctionSignature2: 24448002 false ) 
	#(361 5 #reduceActionForFunctionSignature5: 24448005 false ) 
	#(382 2 #reduceActionForAttributeList1: 27626497 false ) 
	#(387 1 #liftFirstValue: 27896834 false ) 
	#(387 1 #liftFirstValue: 27896833 false ) 
	#(387 1 #liftFirstValue: 27896835 false ) 
	#(387 1 #liftFirstValue: 27896836 false ) 
	#(386 2 #reduceActionForOptionStatement__option__2: 27738114 false ) 
	#(385 2 #reduceActionForParameter1: 27709441 false ) 
	#(361 5 #reduceActionForFunctionSignature9: 24448009 false ) 
	#(360 5 #reduceActionForSubSignature3: 24281091 false ) 
	#(360 5 #reduceActionForSubSignature5: 24281093 false ) 
	#(322 3 #reduceActionForEnumMemberDeclaration6: 19723270 false ) 
	#(322 3 #reduceActionForEnumMemberDeclaration5: 19723269 false ) 
	#(340 0 #reduceActionFor__Comma_Attribute__attribute____1: 22636545 false ) 
	#(341 1 #liftFirstValue: 22682625 false ) 
	#(336 2 #reduceActionForOptionStatement__option__2: 22312962 false ) 
	#(341 1 #liftFirstValue: 22682627 false ) 
	#(357 1 #liftFirstValue: 23958529 false ) 
	#(359 1 #liftFirstValue: 24179713 false ) 
	#(359 1 #liftFirstValue: 24179714 false ) 
	#(341 1 #liftFirstValue: 22682626 false ) 
	#(341 1 #liftFirstValue: 22682628 false ) 
	#(370 1 #liftFirstValue: 26305537 false ) 
	#(441 1 #liftFirstValue: 35005441 false ) 
	#(413 2 #reduceActionForOptionStatement__option__2: 31706114 false ) 
	#(330 1 #liftFirstValue: 21238785 false ) 
	#(329 2 #reduceActionForOptionStatement__option__2: 21020674 false ) 
	#(330 1 #liftFirstValue: 21238789 false ) 
	#(330 1 #liftFirstValue: 21238791 false ) 
	#(330 1 #liftFirstValue: 21238788 false ) 
	#(330 1 #liftFirstValue: 21238787 false ) 
	#(330 1 #liftFirstValue: 21238786 false ) 
	#(330 1 #liftFirstValue: 21238790 false ) 
	#(330 1 #liftFirstValue: 21238792 false ) 
	#(305 2 #reduceActionFor__Comma_Attribute__attribute___1: 18378753 false ) 
	#(619 4 #reduceActionForCollectionRangeVariableDeclaration2: 57333762 false ) 
	#(643 5 #reduceActionForAggregateQueryOperator1: 59712513 false ) 
	#(617 2 #reduceActionFor__Comma_CollectionRangeVariableDeclaration__1: 57279489 false ) 
	#(548 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList___2: 47034370 false ) 
	#(546 3 #reduceActionForQualifiedOpenTypeName2: 46969858 false ) 
	#(572 2 #reduceActionForFieldInitializer4: 50112516 false ) 
	#(568 4 #reduceActionForObjectMemberInitializer1: 49888257 false ) 
	#(569 2 #reduceActionForAttributeList1: 50003969 false ) 
	#(566 5 #reduceActionForObjectCreationExpression4: 49556484 false ) 
	#(422 3 #reduceActionForArraySizeInitializationModifier1: 32477185 false ) 
	#(423 2 #reduceActionForAttributeList1: 32587777 false ) 
	#(566 5 #reduceActionForObjectCreationExpression5: 49556485 false ) 
	#(551 5 #reduceActionForTypeOfIsExpression2: 47450114 false ) 
	#(541 5 #reduceActionForSimpleNameExpression2: 46410754 false ) 
	#(576 2 #reduceActionFor__Comma_Attribute__attribute___1: 50520065 false ) 
	#(564 0 #reduceActionForTypeImplementsClause_1: 49244161 false ) 
	#(560 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 49093633 false ) 
	#(561 2 #reduceActionFor__Comma_Attribute__attribute____2: 49093634 false ) 
	#(558 3 #reduceActionForArgumentList2: 48912386 false ) 
	#(455 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 37241857 false ) 
	#(450 1 #nil 36994049 false ) 
	#(454 1 #liftFirstValue: 37183489 false ) 
	#(451 2 #reduceActionForOptionStatement__option__2: 36994050 false ) 
	#(456 1 #reduceActionFor_______statementSeparator__Statement__statement_____1: 37241857 false ) 
	#(454 1 #reduceActionForStatements2: 37183490 false ) 
	#(604 5 #reduceActionForSingleLineLambda2: 55544834 false ) 
	#(529 2 #reduceActionForAttributeList1: 45074433 false ) 
	#(310 1 #liftFirstValue: 18719745 false ) 
	#(308 1 #reduceActionForIdentifierModifiers3: 18563075 false ) 
	#(308 1 #reduceActionForIdentifierModifiers2: 18563074 false ) 
	#(509 3 #reduceActionForOnErrorStatement1: 43422721 false ) 
	#(510 1 #liftFirstValue: 43521027 false ) 
	#(523 3 #reduceActionForRedimStatement2: 44735490 false ) 
	#(524 2 #reduceActionForAttributeList1: 44836865 false ) 
	#(527 2 #reduceActionForRedimClause1: 44914689 false ) 
	#(480 0 #reduceActionForOptionStatement__option__1: 40231937 false ) 
	#(503 0 #reduceActionForOptionStatement__option__1: 42740737 false ) 
	#(421 2 #reduceActionForVariableIdentifier1: 32398337 false ) 
	#(414 2 #reduceActionForAttributeList1: 31958017 false ) 
	#(418 2 #reduceActionForAttributeList1: 32271361 false ) 
	#(604 5 #reduceActionForSingleLineLambda5: 55544837 false ) 
	#(466 3 #reduceActionForRegularAssignmentStatement1: 38460417 false ) 
	#(467 3 #reduceActionForRegularAssignmentStatement1: 38574081 false ) 
	#(642 0 #nil 59609089 false ) 
	#(620 2 #reduceActionForAttributeList1: 57493505 false ) 
	#(630 3 #reduceActionForLetQueryOperator2: 58323970 false ) 
	#(639 1 #reduceActionForOrderExpression1: 59269121 false ) 
	#(635 3 #reduceActionForOrderByQueryOperator1: 59054081 false ) 
	#(638 0 #reduceActionFor__Comma_Attribute__attribute____1: 59220993 false ) 
	#(631 3 #reduceActionForLetQueryOperator2: 58430466 false ) 
	#(634 3 #reduceActionForPartitionQueryOperator7: 58697735 false ) 
	#(634 3 #reduceActionForPartitionQueryOperator6: 58697734 false ) 
	#(634 3 #reduceActionForPartitionQueryOperator3: 58697731 false ) 
	#(634 3 #reduceActionForPartitionQueryOperator2: 58697730 false ) 
	#(633 3 #reduceActionForWhereQueryOperator2: 58609666 false ) 
	#(312 2 #reduceActionForAttributeList1: 18904065 false ) 
	#(311 3 #reduceActionForTypeImplementsClause2: 18775042 false ) 
	#(311 3 #reduceActionForTypeImplementsClause1: 18775041 false ) 
	#(251 1 #reduceActionForConstraint4: 13085700 false ) 
	#(251 1 #reduceActionForConstraint2: 13085698 false ) 
	#(251 1 #reduceActionForConstraint3: 13085699 false ) 
	#(247 2 #reduceActionForTypeParameterConstraints1: 12849153 false ) 
	#(251 1 #reduceActionForConstraint1: 13085697 false ) 
	#(242 5 #reduceActionForTypeParameterList1: 12546049 false ) 
	#(244 2 #reduceActionFor__Comma_Attribute__attribute____2: 12623874 false ) 
	#(245 3 #reduceActionForTypeParameter4: 12695556 false ) 
	#(385 3 #reduceActionForParameter5: 27709445 false ) 
	#(384 2 #reduceActionFor__Comma_Attribute__attribute____2: 27669506 false ) 
	#(388 2 #reduceActionForParameterIdentifier1: 27975681 false ) 
	#(361 6 #reduceActionForFunctionSignature8: 24448008 false ) 
	#(361 6 #reduceActionForFunctionSignature11: 24448011 false ) 
	#(360 6 #reduceActionForSubSignature6: 24281094 false ) 
	#(322 4 #reduceActionForEnumMemberDeclaration4: 19723268 false ) 
	#(322 4 #reduceActionForEnumMemberDeclaration3: 19723267 false ) 
	#(319 8 #reduceActionForEnumDeclaration4: 19378180 false ) 
	#(319 8 #reduceActionForEnumDeclaration3: 19378179 false ) 
	#(319 8 #reduceActionForEnumDeclaration2: 19378178 false ) 
	#(319 8 #reduceActionForEnumDeclaration1: 19378177 false ) 
	#(338 2 #reduceActionForAttributeList1: 22586369 false ) 
	#(337 3 #reduceActionForTypeImplementsClause2: 22468610 false ) 
	#(337 3 #reduceActionForTypeImplementsClause1: 22468609 false ) 
	#(371 1 #liftFirstValue: 26396674 false ) 
	#(371 1 #liftFirstValue: 26396673 false ) 
	#(366 2 #reduceActionForOptionStatement__option__2: 25240578 false ) 
	#(400 1 #liftFirstValue: 29767681 false ) 
	#(398 2 #reduceActionForOptionStatement__option__2: 29364226 false ) 
	#(442 1 #liftFirstValue: 35088387 false ) 
	#(442 1 #liftFirstValue: 35088386 false ) 
	#(442 1 #liftFirstValue: 35088388 false ) 
	#(442 1 #liftFirstValue: 35088385 false ) 
	#(442 1 #liftFirstValue: 35088389 false ) 
	#(440 2 #reduceActionForOptionStatement__option__2: 34562050 false ) 
	#(331 8 #reduceActionForModuleDeclaration4: 21519364 false ) 
	#(331 8 #reduceActionForModuleDeclaration3: 21519363 false ) 
	#(410 0 #reduceActionFor__Comma_Attribute__attribute____1: 31482881 false ) 
	#(379 1 #liftFirstValue: 27424769 false ) 
	#(379 1 #liftFirstValue: 27424771 false ) 
	#(379 1 #liftFirstValue: 27424770 false ) 
	#(399 0 #reduceActionForParametersOrType1: 29555713 false ) 
	#(428 2 #reduceActionForPropertySignature1: 32925697 false ) 
	#(434 0 #reduceActionFor__Equals_Expression__value___1: 33965057 false ) 
	#(372 1 #reduceActionForHandlesOrImplements2: 26462210 false ) 
	#(372 1 #reduceActionForHandlesOrImplements1: 26462209 false ) 
	#(412 3 #reduceActionForVariableMemberDeclaration2: 31661058 false ) 
	#(412 3 #reduceActionForVariableMemberDeclaration1: 31661057 false ) 
	#(331 8 #reduceActionForModuleDeclaration2: 21519362 false ) 
	#(331 8 #reduceActionForModuleDeclaration1: 21519361 false ) 
	#(553 6 #reduceActionForMemberAccessExpression2: 47947778 false ) 
	#(643 6 #reduceActionForAggregateQueryOperator5: 59712517 false ) 
	#(619 5 #reduceActionForCollectionRangeVariableDeclaration3: 57333763 false ) 
	#(643 6 #reduceActionForAggregateQueryOperator2: 59712514 false ) 
	#(643 6 #reduceActionForAggregateQueryOperator3: 59712515 false ) 
	#(583 6 #reduceActionForCastExpression3: 51081219 false ) 
	#(583 6 #reduceActionForCastExpression3: 51081217 false ) 
	#(546 4 #reduceActionForQualifiedOpenTypeName3: 46969859 false ) 
	#(549 3 #reduceActionForTypeArityList1: 47324161 false ) 
	#(550 1 #reduceActionForAttributes1: 47412225 false ) 
	#(547 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__1: 47034369 false ) 
	#(646 6 #reduceActionForConditionalExpression2: 60293122 false ) 
	#(571 2 #reduceActionFor__Comma_Attribute__attribute____2: 50063362 false ) 
	#(426 3 #reduceActionForBound2: 32651266 false ) 
	#(422 4 #reduceActionForArraySizeInitializationModifier2: 32477186 false ) 
	#(425 2 #reduceActionFor__Comma_Attribute__attribute____2: 32618498 false ) 
	#(566 6 #reduceActionForObjectCreationExpression6: 49556486 false ) 
	#(583 6 #reduceActionForCastExpression3: 51081218 false ) 
	#(562 4 #reduceActionForNamedArgumentList1: 49135617 false ) 
	#(560 2 #reduceActionFor__Comma_Attribute__attribute___1: 49093634 false ) 
	#(607 6 #reduceActionForMultiLineFunctionLambda1: 56041473 false ) 
	#(455 2 #reduceActionFor__Comma_Attribute__attribute___1: 37241858 false ) 
	#(454 2 #reduceActionForStatements3: 37183491 false ) 
	#(450 2 #liftFirstValue: 36994050 false ) 
	#(456 2 #reduceActionFor__Comma_Attribute__attribute____2: 37241858 false ) 
	#(604 6 #reduceActionForSingleLineLambda3: 55544835 false ) 
	#(463 4 #reduceActionForAddHandlerStatement1: 38081537 false ) 
	#(491 4 #reduceActionForDoTopLoopStatement1: 41369601 false ) 
	#(531 2 #reduceActionFor__Comma_Attribute__attribute____2: 45117442 false ) 
	#(308 2 #reduceActionForIdentifierModifiers4: 18563076 false ) 
	#(474 0 #reduceActionForOptionStatement__option__1: 39452673 false ) 
	#(477 4 #reduceActionForLineIfThenStatement1: 39861249 false ) 
	#(510 2 #reduceActionForErrorClause2: 43521026 false ) 
	#(510 2 #reduceActionForErrorClause4: 43521028 false ) 
	#(462 4 #reduceActionForRaiseEventStatement2: 37917698 false ) 
	#(526 2 #reduceActionFor__Comma_Attribute__attribute____2: 44876802 false ) 
	#(464 4 #reduceActionForRemoveHandlerStatement1: 38203393 false ) 
	#(416 2 #reduceActionFor__Comma_Attribute__attribute____2: 32015362 false ) 
	#(417 3 #reduceActionForVariableDeclarator4: 32063492 false ) 
	#(417 3 #reduceActionForVariableDeclarator1: 32063489 false ) 
	#(417 3 #reduceActionForVariableDeclarator3: 32063491 false ) 
	#(420 2 #reduceActionFor__Comma_Attribute__attribute____2: 32338946 false ) 
	#(608 6 #reduceActionForMultiLineSubLambda1: 56336385 false ) 
	#(604 6 #reduceActionForSingleLineLambda6: 55544838 false ) 
	#(467 4 #reduceActionForCompoundAssignmentStatement2: 38574082 false ) 
	#(642 1 #liftFirstValue: 59609090 false ) 
	#(623 3 #reduceActionForExpressionRangeVariableDeclaration1: 57657345 false ) 
	#(622 2 #reduceActionFor__Comma_Attribute__attribute____2: 57589762 false ) 
	#(625 4 #reduceActionForJoinQueryOperator1: 57905153 false ) 
	#(628 0 #reduceActionForTypeImplementsClause_1: 58157057 false ) 
	#(635 4 #reduceActionForOrderByQueryOperator2: 59054082 false ) 
	#(640 1 #liftFirstValue: 59341825 false ) 
	#(640 1 #liftFirstValue: 59341826 false ) 
	#(639 2 #reduceActionForOrderExpression2: 59269122 false ) 
	#(636 2 #reduceActionForAttributeList1: 59164673 false ) 
	#(634 4 #reduceActionForPartitionQueryOperator8: 58697736 false ) 
	#(634 4 #reduceActionForPartitionQueryOperator4: 58697732 false ) 
	#(319 9 #reduceActionForEnumDeclaration12: 19378188 false ) 
	#(319 9 #reduceActionForEnumDeclaration11: 19378187 false ) 
	#(319 9 #reduceActionForEnumDeclaration10: 19378186 false ) 
	#(319 9 #reduceActionForEnumDeclaration9: 19378185 false ) 
	#(331 9 #reduceActionForModuleDeclaration8: 21519368 false ) 
	#(331 9 #reduceActionForModuleDeclaration7: 21519367 false ) 
	#(331 9 #reduceActionForModuleDeclaration6: 21519366 false ) 
	#(331 9 #reduceActionForModuleDeclaration5: 21519365 false ) 
	#(314 2 #reduceActionFor__Comma_Attribute__attribute____2: 18956290 false ) 
	#(323 9 #reduceActionForClassDeclaration6: 19883014 false ) 
	#(323 9 #reduceActionForClassDeclaration5: 19883013 false ) 
	#(447 1 #liftFirstValue: 36289542 false ) 
	#(447 1 #liftFirstValue: 36289539 false ) 
	#(447 1 #liftFirstValue: 36289537 false ) 
	#(447 1 #liftFirstValue: 36289538 false ) 
	#(447 1 #liftFirstValue: 36289540 false ) 
	#(447 1 #liftFirstValue: 36289554 false ) 
	#(447 1 #liftFirstValue: 36289549 false ) 
	#(447 1 #liftFirstValue: 36289556 false ) 
	#(447 1 #liftFirstValue: 36289552 false ) 
	#(447 1 #liftFirstValue: 36289551 false ) 
	#(447 1 #liftFirstValue: 36289553 false ) 
	#(447 1 #liftFirstValue: 36289555 false ) 
	#(447 1 #liftFirstValue: 36289550 false ) 
	#(447 1 #liftFirstValue: 36289545 false ) 
	#(447 1 #liftFirstValue: 36289560 false ) 
	#(447 1 #liftFirstValue: 36289559 false ) 
	#(447 1 #liftFirstValue: 36289558 false ) 
	#(447 1 #liftFirstValue: 36289543 false ) 
	#(447 1 #liftFirstValue: 36289544 false ) 
	#(447 1 #liftFirstValue: 36289557 false ) 
	#(447 1 #liftFirstValue: 36289546 false ) 
	#(447 1 #liftFirstValue: 36289547 false ) 
	#(447 1 #liftFirstValue: 36289541 false ) 
	#(447 1 #liftFirstValue: 36289548 false ) 
	#(323 9 #reduceActionForClassDeclaration2: 19883010 false ) 
	#(323 9 #reduceActionForClassDeclaration1: 19883009 false ) 
	#(250 0 #reduceActionFor__Comma_Attribute__attribute____1: 13042689 false ) 
	#(243 2 #reduceActionFor__Comma_Attribute__attribute___1: 12623873 false ) 
	#(361 7 #reduceActionForFunctionSignature4: 24448004 false ) 
	#(383 2 #reduceActionFor__Comma_Attribute__attribute___1: 27669505 false ) 
	#(385 4 #reduceActionForParameter3: 27709443 false ) 
	#(385 4 #reduceActionForParameter2: 27709442 false ) 
	#(322 5 #reduceActionForEnumMemberDeclaration8: 19723272 false ) 
	#(322 5 #reduceActionForEnumMemberDeclaration7: 19723271 false ) 
	#(340 2 #reduceActionFor__Comma_Attribute__attribute____2: 22636546 false ) 
	#(334 9 #reduceActionForInterfaceDeclaration4: 22079492 false ) 
	#(334 9 #reduceActionForInterfaceDeclaration3: 22079491 false ) 
	#(365 3 #reduceActionForInterfaceSubDeclaration2: 25197570 false ) 
	#(365 3 #reduceActionForInterfaceSubDeclaration1: 25197569 false ) 
	#(369 3 #reduceActionForInterfaceFunctionDeclaration2: 25928706 false ) 
	#(369 3 #reduceActionForInterfaceFunctionDeclaration1: 25928705 false ) 
	#(439 3 #reduceActionForInterfacePropertyMemberDeclaration2: 34507778 false ) 
	#(439 3 #reduceActionForInterfacePropertyMemberDeclaration1: 34507777 false ) 
	#(334 9 #reduceActionForInterfaceDeclaration2: 22079490 false ) 
	#(334 9 #reduceActionForInterfaceDeclaration1: 22079489 false ) 
	#(412 4 #reduceActionForVariableMemberDeclaration4: 31661060 false ) 
	#(412 4 #reduceActionForVariableMemberDeclaration3: 31661059 false ) 
	#(407 4 #reduceActionForConstantMemberDeclaration2: 31186946 false ) 
	#(407 4 #reduceActionForConstantMemberDeclaration1: 31186945 false ) 
	#(408 2 #reduceActionForAttributeList1: 31425537 false ) 
	#(434 1 #reduceActionForAttributes1: 33965058 false ) 
	#(435 0 #reduceActionForImplementsClause_1: 34001921 false ) 
	#(389 2 #reduceActionForLetQueryOperator1: 28055553 false ) 
	#(392 0 #reduceActionFor__Comma_Attribute__attribute____1: 28185601 false ) 
	#(351 2 #reduceActionForLetQueryOperator1: 23540737 false ) 
	#(354 0 #reduceActionFor__Comma_Attribute__attribute____1: 23684097 false ) 
	#(430 1 #reduceActionForAttributeBlock__attributeBlock__1: 33264641 false ) 
	#(443 1 #liftFirstValue: 35209217 false ) 
	#(443 1 #liftFirstValue: 35209218 false ) 
	#(328 9 #reduceActionForStructureDeclaration4: 20780036 false ) 
	#(328 9 #reduceActionForStructureDeclaration3: 20780035 false ) 
	#(328 9 #reduceActionForStructureDeclaration2: 20780034 false ) 
	#(328 9 #reduceActionForStructureDeclaration1: 20780033 false ) 
	#(553 7 #reduceActionForMemberAccessExpression4: 47947780 false ) 
	#(643 7 #reduceActionForAggregateQueryOperator6: 59712518 false ) 
	#(643 7 #reduceActionForAggregateQueryOperator7: 59712519 false ) 
	#(619 6 #reduceActionForCollectionRangeVariableDeclaration4: 57333764 false ) 
	#(643 7 #reduceActionForAggregateQueryOperator4: 59712516 false ) 
	#(546 5 #reduceActionForQualifiedOpenTypeName5: 46969861 false ) 
	#(546 5 #reduceActionForQualifiedOpenTypeName4: 46969860 false ) 
	#(549 4 #reduceActionForTypeArityList2: 47324162 false ) 
	#(547 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__3: 47034371 false ) 
	#(547 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__2: 47034370 false ) 
	#(572 4 #reduceActionForFieldInitializer2: 50112514 false ) 
	#(570 2 #reduceActionFor__Comma_Attribute__attribute___1: 50063361 false ) 
	#(424 2 #reduceActionFor__Comma_Attribute__attribute___1: 32618497 false ) 
	#(553 7 #reduceActionForMemberAccessExpression6: 47947782 false ) 
	#(564 2 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: 49244162 false ) 
	#(530 2 #reduceActionFor__Comma_Attribute__attribute___1: 45117441 false ) 
	#(495 4 #reduceActionForLoopControlVariable2: 42032130 false ) 
	#(477 5 #reduceActionForLineIfThenStatement2: 39861250 false ) 
	#(510 3 #reduceActionForErrorClause1: 43521025 false ) 
	#(462 5 #reduceActionForRaiseEventStatement3: 37917699 false ) 
	#(525 2 #reduceActionFor__Comma_Attribute__attribute___1: 44876801 false ) 
	#(480 2 #reduceActionForOptionStatement__option__2: 40231938 false ) 
	#(503 2 #reduceActionForOptionStatement__option__2: 42740738 false ) 
	#(415 2 #reduceActionFor__Comma_Attribute__attribute___1: 32015361 false ) 
	#(419 2 #reduceActionFor__Comma_Attribute__attribute___1: 32338945 false ) 
	#(621 2 #reduceActionFor__Comma_Attribute__attribute___1: 57589761 false ) 
	#(625 5 #reduceActionForJoinQueryOperator9: 57905161 false ) 
	#(625 5 #reduceActionForJoinQueryOperator2: 57905154 false ) 
	#(626 2 #reduceActionForJoinConditionList1: 58118145 false ) 
	#(625 5 #reduceActionForJoinQueryOperator3: 57905155 false ) 
	#(625 5 #reduceActionForJoinQueryOperator5: 57905157 false ) 
	#(638 2 #reduceActionFor__Comma_Attribute__attribute____2: 59220994 false ) 
	#(323 10 #reduceActionForClassDeclaration22: 19883030 false ) 
	#(323 10 #reduceActionForClassDeclaration21: 19883029 false ) 
	#(323 10 #reduceActionForClassDeclaration18: 19883026 false ) 
	#(323 10 #reduceActionForClassDeclaration17: 19883025 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration12: 22079500 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration11: 22079499 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration10: 22079498 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration9: 22079497 false ) 
	#(328 10 #reduceActionForStructureDeclaration12: 20780044 false ) 
	#(328 10 #reduceActionForStructureDeclaration11: 20780043 false ) 
	#(328 10 #reduceActionForStructureDeclaration10: 20780042 false ) 
	#(328 10 #reduceActionForStructureDeclaration9: 20780041 false ) 
	#(313 2 #reduceActionFor__Comma_Attribute__attribute___1: 18956289 false ) 
	#(323 10 #reduceActionForClassDeclaration8: 19883016 false ) 
	#(323 10 #reduceActionForClassDeclaration7: 19883015 false ) 
	#(323 10 #reduceActionForClassDeclaration4: 19883012 false ) 
	#(323 10 #reduceActionForClassDeclaration3: 19883011 false ) 
	#(247 4 #reduceActionForTypeParameterConstraints2: 12849154 false ) 
	#(248 2 #reduceActionForAttributeList1: 12996609 false ) 
	#(323 10 #reduceActionForClassDeclaration14: 19883022 false ) 
	#(323 10 #reduceActionForClassDeclaration13: 19883021 false ) 
	#(323 10 #reduceActionForClassDeclaration10: 19883018 false ) 
	#(323 10 #reduceActionForClassDeclaration9: 19883017 false ) 
	#(385 5 #reduceActionForParameter7: 27709447 false ) 
	#(385 5 #reduceActionForParameter6: 27709446 false ) 
	#(361 8 #reduceActionForFunctionSignature6: 24448006 false ) 
	#(361 8 #reduceActionForFunctionSignature10: 24448010 false ) 
	#(319 10 #reduceActionForEnumDeclaration8: 19378184 false ) 
	#(319 10 #reduceActionForEnumDeclaration7: 19378183 false ) 
	#(319 10 #reduceActionForEnumDeclaration6: 19378182 false ) 
	#(319 10 #reduceActionForEnumDeclaration5: 19378181 false ) 
	#(339 2 #reduceActionFor__Comma_Attribute__attribute___1: 22636545 false ) 
	#(365 4 #reduceActionForInterfaceSubDeclaration4: 25197572 false ) 
	#(365 4 #reduceActionForInterfaceSubDeclaration3: 25197571 false ) 
	#(369 4 #reduceActionForInterfaceFunctionDeclaration4: 25928708 false ) 
	#(369 4 #reduceActionForInterfaceFunctionDeclaration3: 25928707 false ) 
	#(439 4 #reduceActionForInterfacePropertyMemberDeclaration4: 34507780 false ) 
	#(439 4 #reduceActionForInterfacePropertyMemberDeclaration3: 34507779 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration8: 22079496 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration7: 22079495 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration6: 22079494 false ) 
	#(334 10 #reduceActionForInterfaceDeclaration5: 22079493 false ) 
	#(407 5 #reduceActionForConstantMemberDeclaration4: 31186948 false ) 
	#(407 5 #reduceActionForConstantMemberDeclaration3: 31186947 false ) 
	#(411 3 #reduceActionForConstantDeclarator1: 31531009 false ) 
	#(410 2 #reduceActionFor__Comma_Attribute__attribute____2: 31482882 false ) 
	#(378 0 #reduceActionFor___As___asToken__Attributes__TypeName__type___1: 27218945 false ) 
	#(399 2 #reduceActionForParametersOrType4: 29555716 false ) 
	#(399 2 #reduceActionForParametersOrType2: 29555714 false ) 
	#(396 5 #reduceActionForRegularEventMemberDeclaration2: 29094914 false ) 
	#(396 5 #reduceActionForRegularEventMemberDeclaration1: 29094913 false ) 
	#(437 0 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis______1: 34282497 false ) 
	#(428 4 #reduceActionForPropertySignature2: 32925698 false ) 
	#(428 4 #reduceActionForPropertySignature4: 32925700 false ) 
	#(433 2 #reduceActionFor__Comma_Attribute__attribute___1: 33965057 false ) 
	#(435 1 #reduceActionForAttributes1: 34001922 false ) 
	#(390 2 #reduceActionForAttributeList1: 28131329 false ) 
	#(352 2 #reduceActionForAttributeList1: 23624705 false ) 
	#(364 5 #reduceActionForMustOverrideSubDeclaration2: 24927234 false ) 
	#(364 5 #reduceActionForMustOverrideSubDeclaration1: 24927233 false ) 
	#(368 5 #reduceActionForMustOverrideFunctionDeclaration2: 25643010 false ) 
	#(368 5 #reduceActionForMustOverrideFunctionDeclaration1: 25643009 false ) 
	#(430 2 #reduceActionForOptionStatement__option__2: 33264642 false ) 
	#(431 5 #reduceActionForMustOverridePropertyMemberDeclaration2: 33444866 false ) 
	#(431 5 #reduceActionForMustOverridePropertyMemberDeclaration1: 33444865 false ) 
	#(328 10 #reduceActionForStructureDeclaration8: 20780040 false ) 
	#(328 10 #reduceActionForStructureDeclaration7: 20780039 false ) 
	#(328 10 #reduceActionForStructureDeclaration6: 20780038 false ) 
	#(328 10 #reduceActionForStructureDeclaration5: 20780037 false ) 
	#(643 8 #reduceActionForAggregateQueryOperator8: 59712520 false ) 
	#(546 6 #reduceActionForQualifiedOpenTypeName6: 46969862 false ) 
	#(547 4 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__4: 47034372 false ) 
	#(646 8 #reduceActionForConditionalExpression1: 60293121 false ) 
	#(572 5 #reduceActionForFieldInitializer3: 50112515 false ) 
	#(572 5 #reduceActionForFieldInitializer5: 50112517 false ) 
	#(553 8 #reduceActionForMemberAccessExpression8: 47947784 false ) 
	#(607 8 #reduceActionForMultiLineFunctionLambda2: 56041474 false ) 
	#(607 8 #reduceActionForMultiLineFunctionLambda3: 56041475 false ) 
	#(492 6 #reduceActionForDoBottomLoopStatement1: 41532417 false ) 
	#(491 6 #reduceActionForDoTopLoopStatement2: 41369602 false ) 
	#(474 2 #reduceActionForOptionStatement__option__2: 39452674 false ) 
	#(478 2 #reduceActionForLineElseStatement1: 40030209 false ) 
	#(486 1 #liftFirstValue: 40750083 false ) 
	#(486 1 #liftFirstValue: 40750086 false ) 
	#(486 1 #liftFirstValue: 40750082 false ) 
	#(486 1 #liftFirstValue: 40750081 false ) 
	#(486 1 #liftFirstValue: 40750084 false ) 
	#(486 1 #nil 40750085 false ) 
	#(484 0 #reduceActionFor__Comma_Attribute__attribute____1: 40517633 false ) 
	#(485 1 #reduceActionForCaseClause7: 40555527 false ) 
	#(479 6 #reduceActionForSelectStatement1: 40117249 false ) 
	#(460 6 #reduceActionForSyncLockStatement1: 37634049 false ) 
	#(502 6 #reduceActionForTryStatement1: 42663937 false ) 
	#(417 5 #reduceActionForVariableDeclarator5: 32063493 false ) 
	#(532 6 #reduceActionForUsingStatement1: 45154305 false ) 
	#(489 6 #reduceActionForWhileStatement1: 41124865 false ) 
	#(459 6 #reduceActionForWithStatement1: 37476353 false ) 
	#(608 8 #reduceActionForMultiLineSubLambda2: 56336386 false ) 
	#(623 5 #reduceActionForExpressionRangeVariableDeclaration2: 57657346 false ) 
	#(625 6 #reduceActionForJoinQueryOperator10: 57905162 false ) 
	#(625 6 #reduceActionForJoinQueryOperator11: 57905163 false ) 
	#(625 6 #reduceActionForJoinQueryOperator13: 57905165 false ) 
	#(629 3 #reduceActionForClassBase2: 58219521 false ) 
	#(628 2 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: 58157058 false ) 
	#(625 6 #reduceActionForJoinQueryOperator4: 57905156 false ) 
	#(625 6 #reduceActionForJoinQueryOperator6: 57905158 false ) 
	#(625 6 #reduceActionForJoinQueryOperator7: 57905159 false ) 
	#(637 2 #reduceActionFor__Comma_Attribute__attribute___1: 59220993 false ) 
	#(323 11 #reduceActionForClassDeclaration24: 19883032 false ) 
	#(323 11 #reduceActionForClassDeclaration23: 19883031 false ) 
	#(323 11 #reduceActionForClassDeclaration20: 19883028 false ) 
	#(323 11 #reduceActionForClassDeclaration19: 19883027 false ) 
	#(323 11 #reduceActionForClassDeclaration30: 19883038 false ) 
	#(323 11 #reduceActionForClassDeclaration29: 19883037 false ) 
	#(323 11 #reduceActionForClassDeclaration26: 19883034 false ) 
	#(323 11 #reduceActionForClassDeclaration25: 19883033 false ) 
	#(319 11 #reduceActionForEnumDeclaration16: 19378192 false ) 
	#(319 11 #reduceActionForEnumDeclaration15: 19378191 false ) 
	#(319 11 #reduceActionForEnumDeclaration14: 19378190 false ) 
	#(319 11 #reduceActionForEnumDeclaration13: 19378189 false ) 
	#(334 11 #reduceActionForInterfaceDeclaration16: 22079504 false ) 
	#(334 11 #reduceActionForInterfaceDeclaration15: 22079503 false ) 
	#(334 11 #reduceActionForInterfaceDeclaration14: 22079502 false ) 
	#(334 11 #reduceActionForInterfaceDeclaration13: 22079501 false ) 
	#(328 11 #reduceActionForStructureDeclaration16: 20780048 false ) 
	#(328 11 #reduceActionForStructureDeclaration15: 20780047 false ) 
	#(328 11 #reduceActionForStructureDeclaration14: 20780046 false ) 
	#(328 11 #reduceActionForStructureDeclaration13: 20780045 false ) 
	#(250 2 #reduceActionFor__Comma_Attribute__attribute____2: 13042690 false ) 
	#(323 11 #reduceActionForClassDeclaration16: 19883024 false ) 
	#(323 11 #reduceActionForClassDeclaration15: 19883023 false ) 
	#(323 11 #reduceActionForClassDeclaration12: 19883020 false ) 
	#(323 11 #reduceActionForClassDeclaration11: 19883019 false ) 
	#(385 6 #reduceActionForParameter4: 27709444 false ) 
	#(361 9 #reduceActionForFunctionSignature12: 24448012 false ) 
	#(397 5 #reduceActionForRegularEventMemberDeclaration2: 29313026 false ) 
	#(397 5 #reduceActionForRegularEventMemberDeclaration1: 29313025 false ) 
	#(396 6 #reduceActionForRegularEventMemberDeclaration6: 29094918 false ) 
	#(396 6 #reduceActionForRegularEventMemberDeclaration5: 29094917 false ) 
	#(364 6 #reduceActionForMustOverrideSubDeclaration6: 24927238 false ) 
	#(364 6 #reduceActionForMustOverrideSubDeclaration5: 24927237 false ) 
	#(368 6 #reduceActionForMustOverrideFunctionDeclaration6: 25643014 false ) 
	#(368 6 #reduceActionForMustOverrideFunctionDeclaration5: 25643013 false ) 
	#(431 6 #reduceActionForMustOverridePropertyMemberDeclaration6: 33444870 false ) 
	#(431 6 #reduceActionForMustOverridePropertyMemberDeclaration5: 33444869 false ) 
	#(409 2 #reduceActionFor__Comma_Attribute__attribute___1: 31482881 false ) 
	#(380 2 #reduceActionFor__Comma_Attribute__attribute___1: 27483137 false ) 
	#(375 0 #reduceActionFor__Comma_Attribute__attribute____1: 26849281 false ) 
	#(378 1 #reduceActionForAttributes1: 27218946 false ) 
	#(374 6 #reduceActionForExternalSubDeclaration2: 26632194 false ) 
	#(374 6 #reduceActionForExternalSubDeclaration1: 26632193 false ) 
	#(399 3 #reduceActionForParametersOrType3: 29555715 false ) 
	#(396 6 #reduceActionForRegularEventMemberDeclaration4: 29094916 false ) 
	#(396 6 #reduceActionForRegularEventMemberDeclaration3: 29094915 false ) 
	#(436 1 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____1: 34282497 false ) 
	#(437 1 #reduceActionForAttributes1: 34282498 false ) 
	#(438 0 #nil 34371585 false ) 
	#(428 5 #reduceActionForPropertySignature3: 32925699 false ) 
	#(428 5 #reduceActionForPropertySignature7: 32925703 false ) 
	#(432 6 #reduceActionForAutoPropertyMemberDeclaration1: 33727489 false ) 
	#(393 3 #reduceActionForEventMemberSpecifier7: 28233735 false ) 
	#(393 3 #reduceActionForEventMemberSpecifier7: 28233731 false ) 
	#(393 3 #reduceActionForEventMemberSpecifier7: 28233733 false ) 
	#(393 3 #reduceActionForEventMemberSpecifier7: 28233729 false ) 
	#(392 2 #reduceActionFor__Comma_Attribute__attribute____2: 28185602 false ) 
	#(355 3 #reduceActionForInterfaceMemberSpecifier1: 23739393 false ) 
	#(354 2 #reduceActionFor__Comma_Attribute__attribute____2: 23684098 false ) 
	#(364 6 #reduceActionForMustOverrideSubDeclaration4: 24927236 false ) 
	#(364 6 #reduceActionForMustOverrideSubDeclaration3: 24927235 false ) 
	#(368 6 #reduceActionForMustOverrideFunctionDeclaration4: 25643012 false ) 
	#(368 6 #reduceActionForMustOverrideFunctionDeclaration3: 25643011 false ) 
	#(431 6 #reduceActionForMustOverridePropertyMemberDeclaration4: 33444868 false ) 
	#(431 6 #reduceActionForMustOverridePropertyMemberDeclaration3: 33444867 false ) 
	#(572 6 #reduceActionForFieldInitializer6: 50112518 false ) 
	#(607 9 #reduceActionForMultiLineFunctionLambda5: 56041477 false ) 
	#(473 7 #reduceActionForBlockIfStatement3: 39294979 false ) 
	#(473 7 #reduceActionForBlockIfStatement1: 39294977 false ) 
	#(479 7 #reduceActionForSelectStatement3: 40117251 false ) 
	#(482 2 #reduceActionForAttributeList1: 40478721 false ) 
	#(485 2 #reduceActionForCaseClause1: 40555521 false ) 
	#(479 7 #reduceActionForSelectStatement2: 40117250 false ) 
	#(505 3 #reduceActionForCatchStatement1: 42952705 false ) 
	#(504 3 #reduceActionForFinallyStatement1: 42857473 false ) 
	#(502 7 #reduceActionForTryStatement2: 42663938 false ) 
	#(608 9 #reduceActionForMultiLineSubLambda3: 56336387 false ) 
	#(641 7 #reduceActionForGroupByQueryOperator1: 59392001 false ) 
	#(625 7 #reduceActionForJoinQueryOperator12: 57905164 false ) 
	#(625 7 #reduceActionForJoinQueryOperator14: 57905166 false ) 
	#(625 7 #reduceActionForJoinQueryOperator15: 57905167 false ) 
	#(629 4 #reduceActionForJoinCondition2: 58219522 false ) 
	#(627 2 #reduceActionFor___And___andToken___LineTerminator___JoinCondition__1: 58157057 false ) 
	#(625 7 #reduceActionForJoinQueryOperator8: 57905160 false ) 
	#(323 12 #reduceActionForClassDeclaration32: 19883040 false ) 
	#(323 12 #reduceActionForClassDeclaration31: 19883039 false ) 
	#(323 12 #reduceActionForClassDeclaration28: 19883036 false ) 
	#(323 12 #reduceActionForClassDeclaration27: 19883035 false ) 
	#(249 2 #reduceActionFor__Comma_Attribute__attribute___1: 13042689 false ) 
	#(385 7 #reduceActionForParameter8: 27709448 false ) 
	#(397 6 #reduceActionForRegularEventMemberDeclaration6: 29313028 false ) 
	#(397 6 #reduceActionForRegularEventMemberDeclaration5: 29313027 false ) 
	#(374 7 #reduceActionForExternalSubDeclaration18: 26632210 false ) 
	#(374 7 #reduceActionForExternalSubDeclaration17: 26632209 false ) 
	#(396 7 #reduceActionForRegularEventMemberDeclaration8: 29094920 false ) 
	#(396 7 #reduceActionForRegularEventMemberDeclaration7: 29094919 false ) 
	#(432 7 #reduceActionForAutoPropertyMemberDeclaration7: 33727495 false ) 
	#(364 7 #reduceActionForMustOverrideSubDeclaration8: 24927240 false ) 
	#(364 7 #reduceActionForMustOverrideSubDeclaration7: 24927239 false ) 
	#(368 7 #reduceActionForMustOverrideFunctionDeclaration8: 25643016 false ) 
	#(368 7 #reduceActionForMustOverrideFunctionDeclaration7: 25643015 false ) 
	#(431 7 #reduceActionForMustOverridePropertyMemberDeclaration8: 33444872 false ) 
	#(431 7 #reduceActionForMustOverridePropertyMemberDeclaration7: 33444871 false ) 
	#(411 5 #reduceActionForConstantDeclarator2: 31531010 false ) 
	#(381 2 #reduceActionFor__Comma_Attribute__attribute___1: 27554817 false ) 
	#(377 2 #reduceActionFor___As___asToken__Attributes__TypeName__type__1: 27218945 false ) 
	#(375 1 #reduceActionForAttributes1: 26849282 false ) 
	#(376 7 #reduceActionForExternalFunctionDeclaration2: 26944514 false ) 
	#(376 7 #reduceActionForExternalFunctionDeclaration1: 26944513 false ) 
	#(374 7 #reduceActionForExternalSubDeclaration6: 26632198 false ) 
	#(374 7 #reduceActionForExternalSubDeclaration5: 26632197 false ) 
	#(374 7 #reduceActionForExternalSubDeclaration10: 26632202 false ) 
	#(374 7 #reduceActionForExternalSubDeclaration9: 26632201 false ) 
	#(438 1 #liftFirstValue: 34371586 false ) 
	#(428 6 #reduceActionForPropertySignature5: 32925701 false ) 
	#(393 4 #reduceActionForEventMemberSpecifier8: 28233736 false ) 
	#(393 4 #reduceActionForEventMemberSpecifier8: 28233732 false ) 
	#(393 4 #reduceActionForEventMemberSpecifier8: 28233734 false ) 
	#(393 4 #reduceActionForEventMemberSpecifier8: 28233730 false ) 
	#(391 2 #reduceActionFor__Comma_Attribute__attribute___1: 28185601 false ) 
	#(355 4 #reduceActionForInterfaceMemberSpecifier2: 23739394 false ) 
	#(353 2 #reduceActionFor__Comma_Attribute__attribute___1: 23684097 false ) 
	#(363 7 #reduceActionForSubDeclaration2: 24684546 false ) 
	#(363 7 #reduceActionForSubDeclaration1: 24684545 false ) 
	#(367 7 #reduceActionForFunctionDeclaration2: 25379842 false ) 
	#(367 7 #reduceActionForFunctionDeclaration1: 25379841 false ) 
	#(429 7 #reduceActionForRegularPropertyMemberDeclaration2: 33120258 false ) 
	#(429 7 #reduceActionForRegularPropertyMemberDeclaration1: 33120257 false ) 
	#(563 4 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument__1: 49244161 false ) 
	#(607 10 #reduceActionForMultiLineFunctionLambda4: 56041476 false ) 
	#(499 8 #reduceActionForForEachStatement1: 42246145 false ) 
	#(476 3 #reduceActionForElseStatement2: 39745538 false ) 
	#(476 3 #reduceActionForElseStatement1: 39745537 false ) 
	#(473 8 #reduceActionForBlockIfStatement4: 39294980 false ) 
	#(473 8 #reduceActionForBlockIfStatement7: 39294983 false ) 
	#(473 8 #reduceActionForBlockIfStatement5: 39294981 false ) 
	#(473 8 #reduceActionForBlockIfStatement2: 39294978 false ) 
	#(469 8 #reduceActionForMidAssignmentStatement1: 38838273 false ) 
	#(479 8 #reduceActionForSelectStatement4: 40117252 false ) 
	#(487 4 #reduceActionForCaseElseStatement2: 40877058 false ) 
	#(487 4 #reduceActionForCaseElseStatement1: 40877057 false ) 
	#(485 3 #reduceActionForCaseClause3: 40555523 false ) 
	#(481 4 #reduceActionForCaseStatement2: 40350722 false ) 
	#(481 4 #reduceActionForCaseStatement1: 40350721 false ) 
	#(484 2 #reduceActionFor__Comma_Attribute__attribute____2: 40517634 false ) 
	#(485 3 #reduceActionForCaseClause2: 40555522 false ) 
	#(485 3 #reduceActionForCaseClause8: 40555528 false ) 
	#(505 4 #reduceActionForCatchStatement3: 42952707 false ) 
	#(641 8 #reduceActionForGroupByQueryOperator2: 59392002 false ) 
	#(641 8 #reduceActionForGroupByQueryOperator3: 59392003 false ) 
	#(641 8 #reduceActionForGroupByQueryOperator5: 59392005 false ) 
	#(625 8 #reduceActionForJoinQueryOperator16: 57905168 false ) 
	#(627 3 #reduceActionFor___And___andToken___LineTerminator___JoinCondition__2: 58157058 false ) 
	#(376 8 #reduceActionForExternalFunctionDeclaration18: 26944530 false ) 
	#(376 8 #reduceActionForExternalFunctionDeclaration17: 26944529 false ) 
	#(374 8 #reduceActionForExternalSubDeclaration22: 26632214 false ) 
	#(374 8 #reduceActionForExternalSubDeclaration21: 26632213 false ) 
	#(374 8 #reduceActionForExternalSubDeclaration26: 26632218 false ) 
	#(374 8 #reduceActionForExternalSubDeclaration25: 26632217 false ) 
	#(363 8 #reduceActionForSubDeclaration6: 24684550 false ) 
	#(363 8 #reduceActionForSubDeclaration5: 24684549 false ) 
	#(367 8 #reduceActionForFunctionDeclaration6: 25379846 false ) 
	#(367 8 #reduceActionForFunctionDeclaration5: 25379845 false ) 
	#(429 8 #reduceActionForRegularPropertyMemberDeclaration6: 33120262 false ) 
	#(429 8 #reduceActionForRegularPropertyMemberDeclaration5: 33120261 false ) 
	#(402 1 #reduceActionForAttributeBlock__attributeBlock__1: 30064641 false ) 
	#(403 1 #liftFirstValue: 30223361 false ) 
	#(403 1 #liftFirstValue: 30223362 false ) 
	#(403 1 #liftFirstValue: 30223363 false ) 
	#(377 3 #reduceActionFor___As___asToken__Attributes__TypeName__type__2: 27218946 false ) 
	#(376 8 #reduceActionForExternalFunctionDeclaration6: 26944518 false ) 
	#(376 8 #reduceActionForExternalFunctionDeclaration5: 26944517 false ) 
	#(376 8 #reduceActionForExternalFunctionDeclaration10: 26944522 false ) 
	#(376 8 #reduceActionForExternalFunctionDeclaration9: 26944521 false ) 
	#(374 8 #reduceActionForExternalSubDeclaration14: 26632206 false ) 
	#(374 8 #reduceActionForExternalSubDeclaration13: 26632205 false ) 
	#(436 3 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____2: 34282498 false ) 
	#(428 7 #reduceActionForPropertySignature6: 32925702 false ) 
	#(432 8 #reduceActionForAutoPropertyMemberDeclaration3: 33727491 false ) 
	#(428 7 #reduceActionForPropertySignature8: 32925704 false ) 
	#(394 8 #reduceActionForConstructorMemberDeclaration2: 28619778 false ) 
	#(394 8 #reduceActionForConstructorMemberDeclaration1: 28619777 false ) 
	#(363 8 #reduceActionForSubDeclaration4: 24684548 false ) 
	#(363 8 #reduceActionForSubDeclaration3: 24684547 false ) 
	#(367 8 #reduceActionForFunctionDeclaration4: 25379844 false ) 
	#(367 8 #reduceActionForFunctionDeclaration3: 25379843 false ) 
	#(429 8 #reduceActionForRegularPropertyMemberDeclaration4: 33120260 false ) 
	#(429 8 #reduceActionForRegularPropertyMemberDeclaration3: 33120259 false ) 
	#(607 11 #reduceActionForMultiLineFunctionLambda6: 56041478 false ) 
	#(499 9 #reduceActionForForEachStatement3: 42246147 false ) 
	#(499 9 #reduceActionForForEachStatement2: 42246146 false ) 
	#(498 0 #reduceActionFor__Comma_Attribute__attribute____1: 42210305 false ) 
	#(494 9 #reduceActionForForStatement1: 41759745 false ) 
	#(475 4 #reduceActionForElseIfStatement2: 39574530 false ) 
	#(475 4 #reduceActionForElseIfStatement1: 39574529 false ) 
	#(473 9 #reduceActionForBlockIfStatement8: 39294984 false ) 
	#(473 9 #reduceActionForBlockIfStatement6: 39294982 false ) 
	#(469 9 #reduceActionForMidAssignmentStatement3: 38838275 false ) 
	#(485 4 #reduceActionForCaseClause5: 40555525 false ) 
	#(485 4 #reduceActionForCaseClause4: 40555524 false ) 
	#(483 2 #reduceActionFor__Comma_Attribute__attribute___1: 40517633 false ) 
	#(505 5 #reduceActionForCatchStatement2: 42952706 false ) 
	#(645 9 #reduceActionForGroupJoinQueryOperator1: 59951105 false ) 
	#(641 9 #reduceActionForGroupByQueryOperator4: 59392004 false ) 
	#(641 9 #reduceActionForGroupByQueryOperator9: 59392009 false ) 
	#(641 9 #reduceActionForGroupByQueryOperator6: 59392006 false ) 
	#(641 9 #reduceActionForGroupByQueryOperator7: 59392007 false ) 
	#(376 9 #reduceActionForExternalFunctionDeclaration22: 26944534 false ) 
	#(376 9 #reduceActionForExternalFunctionDeclaration21: 26944533 false ) 
	#(376 9 #reduceActionForExternalFunctionDeclaration26: 26944538 false ) 
	#(376 9 #reduceActionForExternalFunctionDeclaration25: 26944537 false ) 
	#(374 9 #reduceActionForExternalSubDeclaration30: 26632222 false ) 
	#(374 9 #reduceActionForExternalSubDeclaration29: 26632221 false ) 
	#(432 9 #reduceActionForAutoPropertyMemberDeclaration9: 33727497 false ) 
	#(394 9 #reduceActionForConstructorMemberDeclaration8: 28619784 false ) 
	#(394 9 #reduceActionForConstructorMemberDeclaration7: 28619783 false ) 
	#(363 9 #reduceActionForSubDeclaration8: 24684552 false ) 
	#(363 9 #reduceActionForSubDeclaration7: 24684551 false ) 
	#(367 9 #reduceActionForFunctionDeclaration8: 25379848 false ) 
	#(367 9 #reduceActionForFunctionDeclaration7: 25379847 false ) 
	#(429 9 #reduceActionForRegularPropertyMemberDeclaration8: 33120264 false ) 
	#(429 9 #reduceActionForRegularPropertyMemberDeclaration7: 33120263 false ) 
	#(402 2 #reduceActionForOptionStatement__option__2: 30064642 false ) 
	#(374 9 #reduceActionForExternalSubDeclaration4: 26632196 false ) 
	#(374 9 #reduceActionForExternalSubDeclaration3: 26632195 false ) 
	#(376 9 #reduceActionForExternalFunctionDeclaration14: 26944526 false ) 
	#(376 9 #reduceActionForExternalFunctionDeclaration13: 26944525 false ) 
	#(436 4 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____3: 34282499 false ) 
	#(432 9 #reduceActionForAutoPropertyMemberDeclaration13: 33727501 false ) 
	#(432 9 #reduceActionForAutoPropertyMemberDeclaration2: 33727490 false ) 
	#(428 8 #reduceActionForPropertySignature9: 32925705 false ) 
	#(432 9 #reduceActionForAutoPropertyMemberDeclaration5: 33727493 false ) 
	#(444 6 #reduceActionForPropertyGetDeclaration2: 35304450 false ) 
	#(444 6 #reduceActionForPropertyGetDeclaration1: 35304449 false ) 
	#(445 6 #reduceActionForPropertySetDeclaration2: 35523586 false ) 
	#(445 6 #reduceActionForPropertySetDeclaration1: 35523585 false ) 
	#(499 10 #reduceActionForForEachStatement4: 42246148 false ) 
	#(496 2 #reduceActionForAttributeList1: 42166273 false ) 
	#(494 10 #reduceActionForForStatement2: 41759746 false ) 
	#(475 5 #reduceActionForElseIfStatement4: 39574532 false ) 
	#(475 5 #reduceActionForElseIfStatement3: 39574531 false ) 
	#(469 10 #reduceActionForMidAssignmentStatement2: 38838274 false ) 
	#(485 5 #reduceActionForCaseClause6: 40555526 false ) 
	#(505 6 #reduceActionForCatchStatement5: 42952709 false ) 
	#(505 6 #reduceActionForCatchStatement4: 42952708 false ) 
	#(645 10 #reduceActionForGroupJoinQueryOperator9: 59951113 false ) 
	#(645 10 #reduceActionForGroupJoinQueryOperator2: 59951106 false ) 
	#(645 10 #reduceActionForGroupJoinQueryOperator3: 59951107 false ) 
	#(645 10 #reduceActionForGroupJoinQueryOperator5: 59951109 false ) 
	#(641 10 #reduceActionForGroupByQueryOperator10: 59392010 false ) 
	#(641 10 #reduceActionForGroupByQueryOperator11: 59392011 false ) 
	#(641 10 #reduceActionForGroupByQueryOperator8: 59392008 false ) 
	#(374 10 #reduceActionForExternalSubDeclaration20: 26632212 false ) 
	#(374 10 #reduceActionForExternalSubDeclaration19: 26632211 false ) 
	#(376 10 #reduceActionForExternalFunctionDeclaration30: 26944542 false ) 
	#(376 10 #reduceActionForExternalFunctionDeclaration29: 26944541 false ) 
	#(432 10 #reduceActionForAutoPropertyMemberDeclaration19: 33727507 false ) 
	#(432 10 #reduceActionForAutoPropertyMemberDeclaration8: 33727496 false ) 
	#(432 10 #reduceActionForAutoPropertyMemberDeclaration11: 33727499 false ) 
	#(376 10 #reduceActionForExternalFunctionDeclaration4: 26944516 false ) 
	#(376 10 #reduceActionForExternalFunctionDeclaration3: 26944515 false ) 
	#(374 10 #reduceActionForExternalSubDeclaration8: 26632200 false ) 
	#(374 10 #reduceActionForExternalSubDeclaration7: 26632199 false ) 
	#(374 10 #reduceActionForExternalSubDeclaration12: 26632204 false ) 
	#(374 10 #reduceActionForExternalSubDeclaration11: 26632203 false ) 
	#(432 10 #reduceActionForAutoPropertyMemberDeclaration14: 33727502 false ) 
	#(394 10 #reduceActionForConstructorMemberDeclaration4: 28619780 false ) 
	#(394 10 #reduceActionForConstructorMemberDeclaration3: 28619779 false ) 
	#(444 7 #reduceActionForPropertyGetDeclaration6: 35304454 false ) 
	#(444 7 #reduceActionForPropertyGetDeclaration5: 35304453 false ) 
	#(445 7 #reduceActionForPropertySetDeclaration14: 35523598 false ) 
	#(445 7 #reduceActionForPropertySetDeclaration13: 35523597 false ) 
	#(444 7 #reduceActionForPropertyGetDeclaration4: 35304452 false ) 
	#(444 7 #reduceActionForPropertyGetDeclaration3: 35304451 false ) 
	#(445 7 #reduceActionForPropertySetDeclaration8: 35523592 false ) 
	#(445 7 #reduceActionForPropertySetDeclaration7: 35523591 false ) 
	#(498 2 #reduceActionFor__Comma_Attribute__attribute____2: 42210306 false ) 
	#(494 11 #reduceActionForForStatement3: 41759747 false ) 
	#(469 11 #reduceActionForMidAssignmentStatement4: 38838276 false ) 
	#(645 11 #reduceActionForGroupJoinQueryOperator10: 59951114 false ) 
	#(645 11 #reduceActionForGroupJoinQueryOperator11: 59951115 false ) 
	#(645 11 #reduceActionForGroupJoinQueryOperator13: 59951117 false ) 
	#(645 11 #reduceActionForGroupJoinQueryOperator4: 59951108 false ) 
	#(645 11 #reduceActionForGroupJoinQueryOperator6: 59951110 false ) 
	#(645 11 #reduceActionForGroupJoinQueryOperator7: 59951111 false ) 
	#(641 11 #reduceActionForGroupByQueryOperator12: 59392012 false ) 
	#(376 11 #reduceActionForExternalFunctionDeclaration20: 26944532 false ) 
	#(376 11 #reduceActionForExternalFunctionDeclaration19: 26944531 false ) 
	#(374 11 #reduceActionForExternalSubDeclaration24: 26632216 false ) 
	#(374 11 #reduceActionForExternalSubDeclaration23: 26632215 false ) 
	#(374 11 #reduceActionForExternalSubDeclaration28: 26632220 false ) 
	#(374 11 #reduceActionForExternalSubDeclaration27: 26632219 false ) 
	#(432 11 #reduceActionForAutoPropertyMemberDeclaration20: 33727508 false ) 
	#(394 11 #reduceActionForConstructorMemberDeclaration10: 28619786 false ) 
	#(394 11 #reduceActionForConstructorMemberDeclaration9: 28619785 false ) 
	#(401 11 #reduceActionForCustomEventMemberDeclaration4: 29815812 false ) 
	#(401 11 #reduceActionForCustomEventMemberDeclaration3: 29815811 false ) 
	#(401 11 #reduceActionForCustomEventMemberDeclaration2: 29815810 false ) 
	#(401 11 #reduceActionForCustomEventMemberDeclaration1: 29815809 false ) 
	#(376 11 #reduceActionForExternalFunctionDeclaration8: 26944520 false ) 
	#(376 11 #reduceActionForExternalFunctionDeclaration7: 26944519 false ) 
	#(376 11 #reduceActionForExternalFunctionDeclaration12: 26944524 false ) 
	#(376 11 #reduceActionForExternalFunctionDeclaration11: 26944523 false ) 
	#(374 11 #reduceActionForExternalSubDeclaration16: 26632208 false ) 
	#(374 11 #reduceActionForExternalSubDeclaration15: 26632207 false ) 
	#(432 11 #reduceActionForAutoPropertyMemberDeclaration15: 33727503 false ) 
	#(432 11 #reduceActionForAutoPropertyMemberDeclaration4: 33727492 false ) 
	#(394 11 #reduceActionForConstructorMemberDeclaration6: 28619782 false ) 
	#(394 11 #reduceActionForConstructorMemberDeclaration5: 28619781 false ) 
	#(445 8 #reduceActionForPropertySetDeclaration4: 35523588 false ) 
	#(445 8 #reduceActionForPropertySetDeclaration3: 35523587 false ) 
	#(444 8 #reduceActionForPropertyGetDeclaration8: 35304456 false ) 
	#(444 8 #reduceActionForPropertyGetDeclaration7: 35304455 false ) 
	#(445 8 #reduceActionForPropertySetDeclaration20: 35523604 false ) 
	#(445 8 #reduceActionForPropertySetDeclaration19: 35523603 false ) 
	#(497 2 #reduceActionFor__Comma_Attribute__attribute___1: 42210305 false ) 
	#(494 12 #reduceActionForForStatement4: 41759748 false ) 
	#(505 8 #reduceActionForCatchStatement6: 42952710 false ) 
	#(645 12 #reduceActionForGroupJoinQueryOperator12: 59951116 false ) 
	#(645 12 #reduceActionForGroupJoinQueryOperator14: 59951118 false ) 
	#(645 12 #reduceActionForGroupJoinQueryOperator15: 59951119 false ) 
	#(645 12 #reduceActionForGroupJoinQueryOperator8: 59951112 false ) 
	#(446 11 #reduceActionForOperatorDeclaration2: 35803138 false ) 
	#(446 11 #reduceActionForOperatorDeclaration1: 35803137 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration12: 29815820 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration11: 29815819 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration10: 29815818 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration9: 29815817 false ) 
	#(376 12 #reduceActionForExternalFunctionDeclaration24: 26944536 false ) 
	#(376 12 #reduceActionForExternalFunctionDeclaration23: 26944535 false ) 
	#(376 12 #reduceActionForExternalFunctionDeclaration28: 26944540 false ) 
	#(376 12 #reduceActionForExternalFunctionDeclaration27: 26944539 false ) 
	#(374 12 #reduceActionForExternalSubDeclaration32: 26632224 false ) 
	#(374 12 #reduceActionForExternalSubDeclaration31: 26632223 false ) 
	#(432 12 #reduceActionForAutoPropertyMemberDeclaration21: 33727509 false ) 
	#(432 12 #reduceActionForAutoPropertyMemberDeclaration10: 33727498 false ) 
	#(394 12 #reduceActionForConstructorMemberDeclaration12: 28619788 false ) 
	#(394 12 #reduceActionForConstructorMemberDeclaration11: 28619787 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration8: 29815816 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration7: 29815815 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration6: 29815814 false ) 
	#(401 12 #reduceActionForCustomEventMemberDeclaration5: 29815813 false ) 
	#(376 12 #reduceActionForExternalFunctionDeclaration16: 26944528 false ) 
	#(376 12 #reduceActionForExternalFunctionDeclaration15: 26944527 false ) 
	#(432 12 #reduceActionForAutoPropertyMemberDeclaration16: 33727504 false ) 
	#(432 12 #reduceActionForAutoPropertyMemberDeclaration17: 33727505 false ) 
	#(432 12 #reduceActionForAutoPropertyMemberDeclaration6: 33727494 false ) 
	#(445 9 #reduceActionForPropertySetDeclaration6: 35523590 false ) 
	#(445 9 #reduceActionForPropertySetDeclaration5: 35523589 false ) 
	#(445 9 #reduceActionForPropertySetDeclaration16: 35523600 false ) 
	#(445 9 #reduceActionForPropertySetDeclaration15: 35523599 false ) 
	#(445 9 #reduceActionForPropertySetDeclaration10: 35523594 false ) 
	#(445 9 #reduceActionForPropertySetDeclaration9: 35523593 false ) 
	#(645 13 #reduceActionForGroupJoinQueryOperator16: 59951120 false ) 
	#(446 12 #reduceActionForOperatorDeclaration8: 35803144 false ) 
	#(446 12 #reduceActionForOperatorDeclaration7: 35803143 false ) 
	#(401 13 #reduceActionForCustomEventMemberDeclaration16: 29815824 false ) 
	#(401 13 #reduceActionForCustomEventMemberDeclaration15: 29815823 false ) 
	#(401 13 #reduceActionForCustomEventMemberDeclaration14: 29815822 false ) 
	#(401 13 #reduceActionForCustomEventMemberDeclaration13: 29815821 false ) 
	#(376 13 #reduceActionForExternalFunctionDeclaration32: 26944544 false ) 
	#(376 13 #reduceActionForExternalFunctionDeclaration31: 26944543 false ) 
	#(432 13 #reduceActionForAutoPropertyMemberDeclaration22: 33727510 false ) 
	#(432 13 #reduceActionForAutoPropertyMemberDeclaration23: 33727511 false ) 
	#(432 13 #reduceActionForAutoPropertyMemberDeclaration12: 33727500 false ) 
	#(432 13 #reduceActionForAutoPropertyMemberDeclaration18: 33727506 false ) 
	#(445 10 #reduceActionForPropertySetDeclaration18: 35523602 false ) 
	#(445 10 #reduceActionForPropertySetDeclaration17: 35523601 false ) 
	#(445 10 #reduceActionForPropertySetDeclaration22: 35523606 false ) 
	#(445 10 #reduceActionForPropertySetDeclaration21: 35523605 false ) 
	#(445 10 #reduceActionForPropertySetDeclaration12: 35523596 false ) 
	#(445 10 #reduceActionForPropertySetDeclaration11: 35523595 false ) 
	#(446 13 #reduceActionForOperatorDeclaration4: 35803140 false ) 
	#(446 13 #reduceActionForOperatorDeclaration3: 35803139 false ) 
	#(432 14 #reduceActionForAutoPropertyMemberDeclaration24: 33727512 false ) 
	#(445 11 #reduceActionForPropertySetDeclaration24: 35523608 false ) 
	#(445 11 #reduceActionForPropertySetDeclaration23: 35523607 false ) 
	#(446 14 #reduceActionForOperatorDeclaration10: 35803146 false ) 
	#(446 14 #reduceActionForOperatorDeclaration9: 35803145 false ) 
	#(446 14 #reduceActionForOperatorDeclaration6: 35803142 false ) 
	#(446 14 #reduceActionForOperatorDeclaration5: 35803141 false ) 
	#(446 15 #reduceActionForOperatorDeclaration12: 35803148 false ) 
	#(446 15 #reduceActionForOperatorDeclaration11: 35803147 false ) 
	#(404 9 #reduceActionForAddHandlerDeclaration2: 30345218 false ) 
	#(404 9 #reduceActionForAddHandlerDeclaration1: 30345217 false ) 
	#(406 9 #reduceActionForRaiseEventDeclaration2: 30911490 false ) 
	#(406 9 #reduceActionForRaiseEventDeclaration1: 30911489 false ) 
	#(405 9 #reduceActionForRemoveHandlerDeclaration2: 30620674 false ) 
	#(405 9 #reduceActionForRemoveHandlerDeclaration1: 30620673 false ) 
	#(404 10 #reduceActionForAddHandlerDeclaration4: 30345220 false ) 
	#(404 10 #reduceActionForAddHandlerDeclaration3: 30345219 false ) 
	#(406 10 #reduceActionForRaiseEventDeclaration4: 30911492 false ) 
	#(406 10 #reduceActionForRaiseEventDeclaration3: 30911491 false ) 
	#(405 10 #reduceActionForRemoveHandlerDeclaration4: 30620676 false ) 
	#(405 10 #reduceActionForRemoveHandlerDeclaration3: 30620675 false )
	).
]

{ #category : #'generated-accessing' }
VBNetParser class >> scannerClass [
	^VBNetScanner
]

{ #category : #generated }
VBNetParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
VBNetParser class >> symbolNames [
	^ #('"!"' '"$"' '"&"' '"&="' '"("' '")"' '"*"' '"*="' '"+"' '"+="' '","' '"-"' '"-="' '"."' '"/"' '"/="' '":"' '":="' '"<"' '"<<"' '"<<="' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '">>="' '"?"' '"AddHandler"' '"AddressOf"' '"Aggregate"' '"Alias"' '"And"' '"AndAlso"' '"Ansi"' '"As"' '"Ascending"' '"Assembly"' '"Async"' '"Auto"' '"Await"' '"Binary"' '"Boolean"' '"By"' '"ByRef"' '"ByVal"' '"Byte"' '"CBool"' '"CByte"' '"CChar"' '"CDate"' '"CDbl"' '"CDec"' '"CInt"' '"CLng"' '"CObj"' '"CSByte"' '"CShort"' '"CSng"' '"CStr"' '"CType"' '"CUInt"' '"CULng"' '"CUShort"' '"Call"' '"Case"' '"Catch"' '"Char"' '"Class"' '"Compare"' '"Const"' '"Continue"' '"Custom"' '"Date"' '"Decimal"' '"Declare"' '"Default"' '"Delegate"' '"Descending"' '"Dim"' '"DirectCast"' '"Distinct"' '"Do"' '"Double"' '"Each"' '"Else"' '"End"' '"Enum"' '"Equals"' '"Erase"' '"Error"' '"Event"' '"Exit"' '"Explicit"' '"Finally"' '"For"' '"Friend"' '"From"' '"Function"' '"Get"' '"GetType"' '"Global"' '"GoTo"' '"Group"' '"Handles"' '"If"' '"Implements"' '"Imports"' '"In"' '"Infer"' '"Inherits"' '"Integer"' '"Interface"' '"Into"' '"Is"' '"IsFalse"' '"IsNot"' '"IsTrue"' '"Iterator"' '"Join"' '"Key"' '"Let"' '"Lib"' '"Like"' '"Long"' '"Loop"' '"Me"' '"Mid"' '"Mod"' '"Module"' '"MustInherit"' '"MustOverride"' '"MyBase"' '"MyClass"' '"Namespace"' '"Narrowing"' '"New"' '"Next"' '"Not"' '"NotInheritable"' '"NotOverridable"' '"Object"' '"Of"' '"Off"' '"On"' '"Operator"' '"Option"' '"Optional"' '"Or"' '"OrElse"' '"Order"' '"Out"' '"Overloads"' '"Overridable"' '"Overrides"' '"ParamArray"' '"Partial"' '"Preserve"' '"Private"' '"Property"' '"Protected"' '"Public"' '"RaiseEvent"' '"ReDim"' '"ReadOnly"' '"RemoveHandler"' '"Resume"' '"Return"' '"SByte"' '"Select"' '"Set"' '"Shadows"' '"Shared"' '"Short"' '"Single"' '"Skip"' '"Static"' '"Step"' '"Stop"' '"Strict"' '"String"' '"Structure"' '"Sub"' '"SyncLock"' '"Take"' '"Text"' '"Then"' '"Throw"' '"To"' '"Try"' '"TryCast"' '"TypeOf"' '"UInteger"' '"ULong"' '"UShort"' '"Unicode"' '"Until"' '"Using"' '"When"' '"Where"' '"While"' '"Widening"' '"With"' '"WithEvents"' '"WriteOnly"' '"Xor"' '"Yield"' '"\"' '"\="' '"^"' '"^="' '"{"' '"}"' '<LineTerminator>' '<LineContinuation>' '<whitespace>' '<comment>' '<BooleanLiteral>' '<IntegerLiteral>' '<IntLiteral>' '<FloatingPointLiteral>' '<StringLiteral>' '<CharacterLiteral>' '<DateLiteral>' '<ElseIf>' '<Nothing>' '<IdentifierOrKeyword>' '<Identifier>' '<preprocessorDirective>' 'B e g i n' 'File' '<LineTerminator>*' 'Comma' 'OpenParenthesis' 'CloseParenthesis' 'OpenCurlyBrace' 'CloseCurlyBrace' 'Equals' 'ColonEquals' 'Literal' 'TypeParameterList' '( Comma TypeParameter ''typeParameter'' )' '( Comma TypeParameter ''typeParameter'' )*' 'TypeParameter' 'VarianceModifier' 'TypeParameterConstraints' 'ConstraintList' '( Comma Constraint ''constraint'' )' '( Comma Constraint ''constraint'' )*' 'Constraint' 'Attributes' 'AttributeBlock ''attributeBlock''+' 'AttributeBlock' 'AttributeList' '( Comma Attribute ''attribute'' )' '( Comma Attribute ''attribute'' )*' 'Attribute' 'AttributeModifier' 'AttributeArguments' 'AttributePositionalArgumentList' '( Comma AttributeArgumentExpression ''argument''? )' '( Comma AttributeArgumentExpression ''argument''? )*' 'VariablePropertyInitializerList' '( Comma VariablePropertyInitializer ''argument'' )' '( Comma VariablePropertyInitializer ''argument'' )*' 'VariablePropertyInitializer' 'AttributeArgumentExpression' 'Start' 'OptionStatement ''option''*' 'ImportsStatement ''import''*' 'NamespaceMemberDeclaration+' 'OptionStatement' 'OptionExplicitStatement' 'OnOff' 'OptionStrictStatement' 'OptionCompareStatement' 'CompareOption' 'OptionInferStatement' 'ImportsStatement' 'ImportsClauses' '( Comma ImportsClause ''import'' )' '( Comma ImportsClause ''import'' )*' 'ImportsClause' 'AliasImportsClause' 'MembersImportsClause' 'NamespaceDeclaration' 'NamespaceMemberDeclaration*' 'NamespaceName' 'RelativeNamespaceName' '( "." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'')' '( "." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'')*' 'NamespaceMemberDeclaration' 'AttributesNamespaceDeclaration' 'TypeDeclaration' 'NonModuleDeclaration' 'TypeName' 'NonArrayTypeName' 'SimpleTypeName' 'QualifiedTypeName' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArguments?)' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArguments?)*' 'TypeArguments' 'TypeArgumentList' '( Comma TypeName ''type'')' '( Comma TypeName ''type'')*' 'BuiltInTypeName' 'IdentifierModifiers' 'NullableTypeName' 'NullableNameModifier' 'TypeImplementsClause' 'TypeImplements' '( Comma NonArrayTypeName ''implements'')' '( Comma NonArrayTypeName ''implements'')*' 'PrimitiveTypeName' 'NumericTypeName' 'IntegralTypeName' 'FloatingPointTypeName' 'EnumDeclaration' 'AllModifiers ''modifier''*' 'EnumMemberDeclaration ''declaration''+' 'EnumMemberDeclaration' 'ClassDeclaration' 'TypeImplementsClause*' 'ClassMemberDeclaration ''declaration''*' 'ClassBase' 'ClassMemberDeclaration' 'StructureDeclaration' 'StructMemberDeclaration ''declaration''*' 'StructMemberDeclaration' 'ModuleDeclaration' 'ModuleMemberDeclaration ''declaration''*' 'ModuleMemberDeclaration' 'InterfaceDeclaration' 'InterfaceBase*' 'InterfaceMemberDeclaration ''declaration''*' 'InterfaceBase' 'InterfaceBases' '( Comma NonArrayTypeName ''inherits'')' '( Comma NonArrayTypeName ''inherits'')*' 'InterfaceMemberDeclaration' 'ArrayTypeName' 'ArrayTypeModifiers' 'ArrayTypeModifier ''arrayTypeModifier''+' 'ArrayTypeModifier' 'RankList' 'Comma+' 'ArrayNameModifier' 'DelegateDeclaration' 'MethodSignature' 'ImplementsClause' 'ImplementsList' '( Comma InterfaceMemberSpecifier ''implement'')' '( Comma InterfaceMemberSpecifier ''implement'')*' 'InterfaceMemberSpecifier' 'MethodMemberDeclaration' 'InterfaceMethodMemberDeclaration' 'MethodDeclaration' 'InterfaceMethodDeclaration' 'SubSignature' 'FunctionSignature' 'Attributes?' 'SubDeclaration' 'MustOverrideSubDeclaration' 'InterfaceSubDeclaration' 'InterfaceProcedureModifier ''modifier''*' 'FunctionDeclaration' 'MustOverrideFunctionDeclaration' 'InterfaceFunctionDeclaration' 'MustOverrideProcedureModifier' 'InterfaceProcedureModifier' 'HandlesOrImplements' 'ExternalMethodDeclaration' 'ExternalSubDeclaration' 'ParameterList?' 'ExternalFunctionDeclaration' '( "As" ''asToken'' Attributes? TypeName ''type'')' '( "As" ''asToken'' Attributes? TypeName ''type'')?' 'CharsetModifier' 'LibraryClause' 'AliasClause' 'ParameterList' '( Comma Parameter ''parameter'')' '( Comma Parameter ''parameter'')*' 'Parameter' 'ParameterModifier ''modifier''*' 'ParameterModifier' 'ParameterIdentifier' 'HandlesClause' 'EventHandlesList' '( Comma EventMemberSpecifier ''handle'')' '( Comma EventMemberSpecifier ''handle'')*' 'EventMemberSpecifier' 'ConstructorMemberDeclaration' 'EventMemberDeclaration' 'RegularEventMemberDeclaration' 'InterfaceEventMemberDeclaration' 'InterfaceEventModifiers ''modifier''*' 'ParametersOrType' 'InterfaceEventModifiers' 'CustomEventMemberDeclaration' 'EventAccessorDeclaration ''eventAccessorDeclaration''+' 'EventAccessorDeclaration' 'AddHandlerDeclaration' 'RemoveHandlerDeclaration' 'RaiseEventDeclaration' 'ConstantMemberDeclaration' 'ConstantDeclarators' '( Comma ConstantDeclarator ''constant'')' '( Comma ConstantDeclarator ''constant'')*' 'ConstantDeclarator' 'VariableMemberDeclaration' 'AllModifiers ''modifier''+' 'VariableDeclarators' '( Comma VariableDeclarator ''variable'')' '( Comma VariableDeclarator ''variable'')*' 'VariableDeclarator' 'VariableIdentifiers' '( Comma VariableIdentifier ''variableIdentifier'' )' '( Comma VariableIdentifier ''variableIdentifier'' )*' 'VariableIdentifier' 'ArraySizeInitializationModifier' 'BoundList' '( Comma Bound ''bound'' )' '( Comma Bound ''bound'' )*' 'Bound' 'PropertyMemberDeclaration' 'PropertySignature' 'RegularPropertyMemberDeclaration' 'PropertyAccessorDeclaration ''declaration''+' 'MustOverridePropertyMemberDeclaration' 'AutoPropertyMemberDeclaration' '( Equals Expression ''value'')' '( Equals Expression ''value'')?' 'ImplementsClause?' '( NonArrayTypeName ''type'' ( OpenParenthesis ArgumentList? CloseParenthesis )? )' '( NonArrayTypeName ''type'' ( OpenParenthesis ArgumentList? CloseParenthesis )? )?' 'ObjectCreationExpressionInitializer ''initializer''?' 'InterfacePropertyMemberDeclaration' 'InterfacePropertyModifier ''modifier''*' 'MustOverridePropertyModifier' 'InterfacePropertyModifier' 'PropertyAccessorDeclaration' 'PropertyGetDeclaration' 'PropertySetDeclaration' 'OperatorDeclaration' 'OverloadableOperator' 'Statement' 'Block' '(Statements ''statement''? <LineTerminator>)' '(Statements ''statement''? <LineTerminator>)*' 'LabelDeclarationStatement' 'LabelName' 'Statements' '( ":" ''statementSeparator'' Statement ''statement''? )' '( ":" ''statementSeparator'' Statement ''statement''? )+' 'LocalDeclarationStatement' 'LocalModifier' 'WithStatement' 'SyncLockStatement' 'EventStatement' 'RaiseEventStatement' 'AddHandlerStatement' 'RemoveHandlerStatement' 'AssignmentStatement' 'RegularAssignmentStatement' 'CompoundAssignmentStatement' 'CompoundBinaryOperator' 'MidAssignmentStatement' 'InvocationStatement' 'ConditionalStatement' 'IfStatement' 'BlockIfStatement' 'ElseIfStatement ''elseIf''*' 'ElseIfStatement' 'ElseStatement' 'LineIfThenStatement' 'LineElseStatement' 'SelectStatement' 'CaseStatement ''case''*' 'CaseStatement' 'CaseClauses' '( Comma CaseClause ''clause'')' '( Comma CaseClause ''clause'')*' 'CaseClause' 'ComparisonOperator' 'CaseElseStatement' 'LoopStatement' 'WhileStatement' 'DoLoopStatement' 'DoTopLoopStatement' 'DoBottomLoopStatement' 'WhileOrUntil' 'ForStatement' 'LoopControlVariable' 'NextExpressionList' '( Comma Expression ''next'')' '( Comma Expression ''next'')*' 'ForEachStatement' 'ErrorHandlingStatement' 'StructuredErrorStatement' 'TryStatement' 'CatchStatement ''catch''*' 'FinallyStatement' 'CatchStatement' 'ThrowStatement' 'UnstructuredErrorStatement' 'ErrorStatement' 'OnErrorStatement' 'ErrorClause' 'ResumeStatement' 'ResumeClause' 'BranchStatement' 'GoToStatement' 'ExitStatement' 'ExitKind' 'ContinueStatement' 'ContinueKind' 'StopStatement' 'EndStatement' 'ReturnStatement' 'ArrayHandlingStatement' 'RedimStatement' 'RedimClauses' '( Comma RedimClause ''redim'')' '( Comma RedimClause ''redim'')*' 'RedimClause' 'EraseStatement' 'EraseExpressions' '( Comma Expression ''array'')' '( Comma Expression ''array'')*' 'UsingStatement' 'UsingResources' 'YieldStatement' 'Expression' 'ConstantExpression' 'SimpleExpression' 'LiteralExpression' 'ParenthesizedExpression' 'InstanceExpression' 'SimpleNameExpression' 'AddressOfExpression' 'TypeExpression' 'GetTypeExpression' 'GetTypeTypeName' 'QualifiedOpenTypeName' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArityList?)' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArityList?)*' 'TypeArityList' 'CommaList' 'TypeOfIsExpression' 'IsExpression' 'MemberAccessExpression' 'MemberAccessBase' 'DictionaryAccessExpression' 'AccessBase' 'InvocationExpression' 'ArgumentList' 'PositionalArgumentList' '( Comma Expression ''argument''? )' '( Comma Expression ''argument''? )*' 'NamedArgumentList' '( Comma <IdentifierOrKeyword> ''argumentName'' ColonEquals Expression ''namedArgument'')' '( Comma <IdentifierOrKeyword> ''argumentName'' ColonEquals Expression ''namedArgument'')*' 'NewExpression' 'ObjectCreationExpression' 'ObjectCreationExpressionInitializer' 'ObjectMemberInitializer' 'FieldInitializerList' '( Comma FieldInitializer ''initializer'')' '( Comma FieldInitializer ''initializer'')*' 'FieldInitializer' 'ObjectCollectionInitializer' 'CollectionInitializer' 'CollectionElementList' '( Comma CollectionElement ''element'')' '( Comma CollectionElement ''element'')*' 'CollectionElement' 'ArrayExpression' 'ArrayCreationExpression' 'ArrayLiteralExpression' 'AnonymousObjectCreationExpression' 'CastExpression' 'CastTarget' 'OperatorExpression' 'ArithmeticOperatorExpression' 'UnaryPlusExpression' 'UnaryMinusExpression' 'AdditionOperatorExpression' 'SubtractionOperatorExpression' 'MultiplicationOperatorExpression' 'DivisionOperatorExpression' 'FPDivisionOperatorExpression' 'IntegerDivisionOperatorExpression' 'ModuloOperatorExpression' 'ExponentOperatorExpression' 'RelationalOperatorExpression' 'LikeOperatorExpression' 'ConcatenationOperatorExpression' 'LogicalOperatorExpression' 'ShortCircuitLogicalOperatorExpression' 'ShiftOperatorExpression' 'LambdaExpression' 'SingleLineLambda' 'LambdaModifier ''modifier''*' 'MultiLineLambda' 'MultiLineFunctionLambda' 'MultiLineSubLambda' 'LambdaModifier' 'QueryExpression' '(<LineTerminator>? QueryOperator)' '(<LineTerminator>? QueryOperator)*' 'FromOrAggregateQueryOperator' 'QueryOperator' 'JoinOrGroupJoinQueryOperator' 'CollectionRangeVariableDeclarationList' '( Comma CollectionRangeVariableDeclaration )' '( Comma CollectionRangeVariableDeclaration )*' 'CollectionRangeVariableDeclaration' 'ExpressionRangeVariableDeclarationList' '( Comma ExpressionRangeVariableDeclaration ''declaration'')' '( Comma ExpressionRangeVariableDeclaration ''declaration'')*' 'ExpressionRangeVariableDeclaration' 'FromQueryOperator' 'JoinQueryOperator' 'JoinConditionList' '( "And" ''andToken'' <LineTerminator>? JoinCondition )' '( "And" ''andToken'' <LineTerminator>? JoinCondition )*' 'JoinCondition' 'LetQueryOperator' 'SelectQueryOperator' 'DistinctQueryOperator' 'WhereQueryOperator' 'PartitionQueryOperator' 'OrderByQueryOperator' 'OrderExpressionList' '( Comma OrderExpression ''expression'' )' '( Comma OrderExpression ''expression'' )*' 'OrderExpression' 'Ordering' 'GroupByQueryOperator' '<LineTerminator>?' 'AggregateQueryOperator' 'QueryOperator*' 'GroupJoinQueryOperator' 'ConditionalExpression' 'AwaitOperatorExpression' 'AllModifiers' 'E O F' 'error')
]

{ #category : #generated }
VBNetParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetFileNode #VBNetFileNode nil #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetLiteralNode #VBNetTypeParameterListNode #OrderedCollection #OrderedCollection #VBNetTypeParameterNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #OrderedCollection #OrderedCollection #VBNetAttributeBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetAttributeNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariablePropertyInitializerNode #VBNetExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetOptionStatementNode #VBNetOptionStatementNode #SmaCCToken #VBNetOptionStatementNode #VBNetOptionStatementNode #SmaCCToken #VBNetOptionStatementNode #VBNetImportsStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetAliasImportsClauseNode #VBNetMembersImportsClauseNode #VBNetNamespaceDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetQualifiedTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetBuiltInTypeNameNode #OrderedCollection #VBNetNullableTypeNameNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetEnumDeclarationNode #OrderedCollection #OrderedCollection #VBNetEnumMemberDeclarationNode #VBNetClassDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetStructureDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetModuleDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetInterfaceDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetArrayTypeNameNode #OrderedCollection #OrderedCollection #VBNetArrayTypeModifierNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetDelegateDeclarationNode #VBNetProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetInterfaceMemberSpecifierNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetSubSignatureNode #VBNetFunctionSignatureNode #OrderedCollection #VBNetSubDeclarationNode #VBNetSubDeclarationNode #VBNetSubDeclarationNode #OrderedCollection #VBNetFunctionDeclarationNode #VBNetFunctionDeclarationNode #VBNetFunctionDeclarationNode #SmaCCToken #SmaCCToken #OrderedCollection #VBNetProgramNode #VBNetExternalSubDeclarationNode #OrderedCollection #VBNetExternalFunctionDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetParameterNode #OrderedCollection #SmaCCToken #VBNetParameterIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetEventMemberSpecifierNode #VBNetConstructorMemberDeclarationNode #VBNetProgramNode #VBNetRegularEventMemberDeclarationNode #VBNetRegularEventMemberDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #VBNetCustomEventMemberDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetAddHandlerDeclarationNode #VBNetRemoveHandlerDeclarationNode #VBNetRaiseEventDeclarationNode #VBNetConstantMemberDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetConstantDeclaratorNode #VBNetVariableMemberDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariableDeclaratorNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariableIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetProgramNode #OrderedCollection #VBNetPropertyMemberDeclarationNode #OrderedCollection #VBNetPropertyMemberDeclarationNode #VBNetAutoPropertyMemberDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetPropertyMemberDeclarationNode #OrderedCollection #SmaCCToken #SmaCCToken #VBNetProgramNode #VBNetPropertyGetDeclarationNode #VBNetPropertySetDeclarationNode #VBNetOperatorDeclarationNode #SmaCCToken #VBNetStatementNode #OrderedCollection #VBNetProgramNode #OrderedCollection #VBNetLabelDeclarationStatementNode #SmaCCToken #VBNetProgramNode #OrderedCollection #OrderedCollection #VBNetLocalDeclarationStatementNode #SmaCCToken #VBNetWithStatementNode #VBNetSyncLockStatementNode #VBNetStatementNode #VBNetRaiseEventStatementNode #VBNetAddHandlerStatementNode #VBNetRemoveHandlerStatementNode #VBNetStatementNode #VBNetAssignmentStatementNode #VBNetAssignmentStatementNode #SmaCCToken #VBNetMidAssignmentStatementNode #VBNetInvocationStatementNode #VBNetStatementNode #VBNetIfStatementNode #VBNetIfStatementNode #OrderedCollection #VBNetElseIfStatementNode #VBNetElseStatementNode #VBNetIfStatementNode #VBNetElseStatementNode #VBNetSelectStatementNode #OrderedCollection #VBNetCaseStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetCaseClauseNode #SmaCCToken #VBNetCaseElseStatementNode #VBNetStatementNode #VBNetWhileStatementNode #VBNetDoLoopStatementNode #VBNetDoTopLoopStatementNode #VBNetDoBottomLoopStatementNode #SmaCCToken #VBNetForStatementNode #VBNetProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetForEachStatementNode #VBNetStatementNode #VBNetStatementNode #VBNetTryStatementNode #OrderedCollection #VBNetFinallyStatementNode #VBNetCatchStatementNode #VBNetThrowStatementNode #VBNetStatementNode #VBNetErrorStatementNode #VBNetOnErrorStatementNode #VBNetProgramNode #VBNetResumeStatementNode #SmaCCToken #VBNetStatementNode #VBNetGoToStatementNode #VBNetExitStatementNode #SmaCCToken #VBNetContinueStatementNode #SmaCCToken #VBNetStopStatementNode #VBNetEndStatementNode #VBNetReturnStatementNode #VBNetStatementNode #VBNetRedimStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetRedimClauseNode #VBNetEraseStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetUsingStatementNode #OrderedCollection #VBNetYieldStatementNode #VBNetExpressionNode #VBNetExpressionNode #VBNetExpressionNode #VBNetLiteralNode #VBNetExpressionNode #VBNetInstanceExpressionNode #VBNetSimpleNameExpressionNode #VBNetAddressOfExpressionNode #VBNetExpressionNode #VBNetGetTypeExpressionNode #VBNetProgramNode #VBNetQualifiedOpenTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetTypeOfIsExpressionNode #VBNetBinaryExpressionNode #VBNetMemberAccessExpressionNode #VBNetProgramNode #VBNetDictionaryAccessExpressionNode #VBNetExpressionNode #VBNetInvocationExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionNode #VBNetObjectCreationExpressionNode #VBNetProgramNode #VBNetObjectMemberInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetFieldInitializerNode #VBNetObjectCollectionInitializerNode #VBNetCollectionInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionNode #VBNetExpressionNode #VBNetArrayCreationExpressionNode #VBNetCollectionInitializerNode #VBNetAnonymousCreationExpressionNode #VBNetExpressionNode #SmaCCToken #VBNetExpressionNode #VBNetExpressionNode #VBNetUnaryExpressionNode #VBNetUnaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetLambdaExpressionNode #VBNetLambdaExpressionNode #OrderedCollection #VBNetLambdaExpressionNode #VBNetFunctionLambdaExpressionNode #VBNetSubLambdaExpressionNode #SmaCCToken #VBNetQueryExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionRangeVariableDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #VBNetExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetOrderExpressionNode #SmaCCToken #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetConditionalExpressionNode #VBNetAwaitExpressionNode #SmaCCToken #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBNetParser class >> transitionTable [
^#(
#[1 0 6 0 19 0 6 0 40 0 6 0 70 0 6 0 78 0 6 0 79 0 6 0 81 0 6 0 89 0 6 0 98 0 6 0 109 0 6 0 114 0 6 0 120 0 6 0 131 0 6 0 132 0 6 0 136 0 6 0 137 0 6 0 141 0 6 0 142 0 6 0 148 0 6 0 154 0 6 0 155 0 6 0 156 0 6 0 158 0 6 0 160 0 6 0 162 0 6 0 163 0 6 0 166 0 6 0 173 0 6 0 174 0 6 0 183 0 6 0 203 0 6 0 205 0 6 0 206 0 6 0 215 0 9 0 232 0 13 0 233 0 6 2 137] 
#[0 0 0 2 137] 
#[1 0 10 0 19 0 10 0 40 0 10 0 70 0 10 0 78 0 10 0 79 0 10 0 81 0 10 0 89 0 10 0 98 0 10 0 109 0 10 0 114 0 10 0 120 0 10 0 131 0 10 0 132 0 10 0 136 0 10 0 137 0 10 0 141 0 10 0 142 0 10 0 148 0 10 0 154 0 10 0 155 0 10 0 156 0 10 0 158 0 10 0 160 0 10 0 162 0 10 0 163 0 10 0 166 0 10 0 173 0 10 0 174 0 10 0 183 0 10 0 203 0 10 0 205 0 10 0 206 0 17 0 215 0 21 1 13 0 25 1 14 0 10 2 137] 
#[0 0 14 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 0 215 2 137] 
#[0 0 18 2 137] 
#[1 0 22 0 19 0 22 0 40 0 22 0 70 0 22 0 78 0 22 0 79 0 22 0 81 0 22 0 89 0 22 0 98 0 22 0 109 0 22 0 114 0 22 0 120 0 22 0 131 0 22 0 132 0 22 0 136 0 22 0 137 0 22 0 141 0 22 0 142 0 29 0 148 0 22 0 154 0 22 0 155 0 22 0 156 0 22 0 158 0 22 0 160 0 22 0 162 0 22 0 163 0 22 0 166 0 22 0 173 0 22 0 174 0 22 0 183 0 22 0 203 0 22 0 205 0 22 0 206 0 33 1 15 0 37 1 17 0 37 1 18 0 37 1 20 0 37 1 21 0 37 1 23 0 22 2 137] 
#[1 0 57 0 71 0 61 0 95 0 65 0 111 0 69 0 181] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 0 26 0 78 0 26 0 79 0 26 0 81 0 26 0 89 0 26 0 98 0 77 0 109 0 26 0 114 0 26 0 120 0 26 0 131 0 26 0 132 0 81 0 136 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 183 0 26 0 203 0 26 0 205 0 26 0 206 0 85 0 252 0 89 0 253 0 93 0 254 0 97 1 16 0 101 1 24 0 105 1 31 0 109 1 37 0 113 1 38 0 117 1 39 0 117 1 40 0 117 1 63 0 129 1 64 0 117 1 67 0 117 1 72 0 117 1 75 0 117 1 78 0 117 1 93 0 30 2 137] 
#[0 0 34 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 38 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 42 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 46 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 50 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 161 0 43 0 187 1 22] 
#[1 0 165 0 17 0 181 0 145 0 181 0 146 0 177 0 215 0 181 1 19] 
#[1 0 185 0 17 0 193 0 145 0 193 0 146 0 189 0 215 0 193 1 19] 
#[1 0 197 0 17 0 205 0 145 0 205 0 146 0 201 0 215 0 205 1 19] 
#[1 1 41 0 39 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 1 41 0 131 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 1 33 0 255 1 37 1 2 1 41 1 3 1 45 1 43 1 45 1 44 1 45 1 51 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 73 0 229 1 77 1 25 1 81 1 28 1 81 1 29 1 81 1 30 1 93 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 1 93 1 86] 
#[1 1 113 0 103 1 117 0 229 1 121 1 33 1 125 1 34] 
#[1 0 26 0 40 0 26 0 70 0 26 0 78 0 26 0 79 0 26 0 81 0 26 0 89 0 26 0 98 0 26 0 114 0 26 0 120 0 26 0 131 0 26 0 132 0 81 0 136 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 183 0 26 0 203 0 26 0 205 0 26 0 206 1 129 1 31 1 133 1 64 0 54 2 137] 
#[1 0 73 0 19 0 58 0 30 0 58 0 40 0 58 0 44 0 58 0 46 0 58 0 47 0 58 0 48 0 58 0 69 0 58 0 70 0 58 0 72 0 58 0 74 0 58 0 75 0 58 0 76 0 58 0 77 0 58 0 78 0 58 0 79 0 58 0 81 0 58 0 85 0 58 0 89 0 58 0 93 0 58 0 98 0 58 0 100 0 58 0 101 0 58 0 103 0 58 0 113 0 58 0 114 0 58 0 120 0 58 0 126 0 58 0 131 0 58 0 132 0 58 0 133 0 58 0 136 0 58 0 137 0 58 0 138 0 58 0 141 0 58 0 142 0 58 0 143 0 58 0 147 0 58 0 149 0 58 0 154 0 58 0 155 0 58 0 156 0 58 0 157 0 58 0 158 0 58 0 160 0 58 0 161 0 58 0 162 0 58 0 163 0 58 0 164 0 58 0 166 0 58 0 167 0 58 0 170 0 58 0 172 0 58 0 173 0 58 0 174 0 58 0 175 0 58 0 176 0 58 0 182 0 58 0 183 0 58 0 184 0 58 0 194 0 58 0 195 0 58 0 196 0 58 0 203 0 58 0 205 0 58 0 206 0 58 0 229 1 137 0 254 0 58 2 137] 
#[0 0 62 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 137] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 0 26 0 78 0 26 0 79 0 26 0 81 0 26 0 89 0 26 0 98 0 26 0 114 0 26 0 120 0 26 0 131 0 26 0 132 0 81 0 136 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 183 0 26 0 203 0 26 0 205 0 26 0 206 1 141 0 252 0 89 0 253 0 93 0 254 0 105 1 31 1 145 1 37 0 113 1 38 0 117 1 39 0 117 1 40 0 117 1 63 0 129 1 64 0 117 1 67 0 117 1 72 0 117 1 75 0 117 1 78 0 117 1 93 0 66 2 137] 
#[0 0 70 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 74 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 78 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 82 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 86 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 90 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 2 5 0 40 1 153 0 70 2 5 0 78 1 161 0 79 2 5 0 81 1 169 0 89 2 5 0 98 1 177 0 114 2 5 0 120 1 185 0 131 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 1 245 0 183 2 5 0 203 2 5 0 205 2 5 0 206 2 5 2 136] 
#[0 0 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 0 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 0 106 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 0 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 0 118 0 17 0 215] 
#[0 0 122 0 17 0 215] 
#[1 2 9 0 17 2 13 0 215] 
#[0 0 126 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 130 0 17 0 215] 
#[0 0 134 0 17 0 215] 
#[0 0 138 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 2 17 0 17 2 21 0 215] 
#[0 0 142 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 146 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 2 25 0 17 2 29 0 215] 
#[0 0 150 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 0 154 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 2 33 0 17 2 37 0 215] 
#[0 0 158 0 17] 
#[0 0 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 41 0 14] 
#[0 0 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 194 0 17] 
#[0 0 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 230 0 1 0 230 0 3 0 230 0 4 0 7 0 5 0 230 0 6 0 230 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 15 0 230 0 16 0 230 0 17 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 23 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 32 0 230 0 34 0 230 0 35 0 230 0 38 0 230 0 45 0 230 0 80 0 230 0 83 0 230 0 87 0 230 0 90 0 230 0 99 0 230 0 105 0 230 0 106 0 230 0 108 0 230 0 110 0 230 0 115 0 230 0 116 0 230 0 118 0 230 0 121 0 230 0 123 0 230 0 125 0 230 0 130 0 230 0 146 0 230 0 150 0 230 0 151 0 230 0 152 0 230 0 171 0 230 0 177 0 230 0 179 0 230 0 186 0 230 0 188 0 230 0 190 0 230 0 200 0 230 0 201 0 230 0 204 0 230 0 207 0 230 0 209 0 230 0 210 0 230 0 211 0 230 0 212 0 230 0 214 0 230 0 215 2 49 0 235 2 53 1 46 2 57 1 47] 
#[1 2 61 0 25 2 65 0 215] 
#[1 0 234 0 11 0 234 0 25 0 234 0 215 2 69 1 1] 
#[0 2 73 0 17] 
#[1 2 45 0 5 0 238 0 11 0 238 0 25 0 238 0 215 2 77 0 235] 
#[0 0 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 7 0 5 0 230 0 11 0 230 0 14 0 230 0 17 2 81 0 24 0 230 0 29 0 230 0 215 2 49 0 235 2 85 0 239 2 53 1 46 2 57 1 47] 
#[1 2 89 0 17 2 93 0 215] 
#[1 1 10 0 11 1 10 0 17 1 10 0 215 2 97 1 27] 
#[0 1 14 0 11 0 17 0 215] 
#[0 1 18 0 11 0 17 0 215] 
#[0 1 22 0 11 0 17 0 215] 
#[1 1 26 0 3 1 26 0 4 0 11 0 5 1 26 0 6 1 26 0 7 1 26 0 8 1 26 0 9 1 26 0 10 1 26 0 11 1 26 0 12 1 26 0 13 1 26 0 15 1 26 0 16 1 26 0 17 1 26 0 19 1 26 0 20 1 26 0 21 1 26 0 22 1 26 0 23 1 26 0 24 1 26 0 25 1 26 0 26 1 26 0 27 1 26 0 28 2 101 0 29 1 26 0 32 1 26 0 34 1 26 0 35 1 26 0 38 1 26 0 45 1 26 0 80 1 26 0 83 1 26 0 87 1 26 0 90 1 26 0 99 1 26 0 105 1 26 0 106 1 26 0 108 1 26 0 110 1 26 0 115 1 26 0 116 1 26 0 118 1 26 0 121 1 26 0 123 1 26 0 125 1 26 0 130 1 26 0 146 1 26 0 150 1 26 0 151 1 26 0 152 1 26 0 171 1 26 0 177 1 26 0 179 1 26 0 186 1 26 0 188 1 26 0 190 1 26 0 201 1 26 0 207 1 26 0 209 1 26 0 210 1 26 0 211 1 26 0 212 1 26 0 214 1 26 0 215 2 105 0 235 2 109 1 87 2 113 1 88 2 117 1 89] 
#[0 1 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 34 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 38 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 121 0 14 1 42 0 17 1 42 0 215] 
#[1 1 46 0 14 1 46 0 17 1 46 0 215 2 125 1 36] 
#[1 2 129 0 17 2 133 0 215] 
#[0 1 50 0 17 0 215] 
#[0 1 54 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 2 5 0 40 2 137 0 70 2 5 0 78 2 141 0 79 2 5 0 81 2 145 0 89 2 5 0 98 2 149 0 114 2 5 0 120 2 153 0 131 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 157 0 183 2 5 0 203 2 5 0 205 2 5 0 206 2 5 2 136] 
#[0 1 58 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 137] 
#[1 0 26 0 40 0 26 0 70 0 26 0 78 0 26 0 79 0 26 0 81 0 26 0 89 0 26 0 98 0 26 0 114 0 26 0 120 0 26 0 131 0 26 0 132 0 81 0 136 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 183 0 26 0 203 0 26 0 205 0 26 0 206 1 129 1 31 1 133 1 64] 
#[0 1 62 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 66 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 2 161 0 229] 
#[0 1 70 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[1 2 165 0 100 2 169 0 184 2 173 1 94 2 173 1 104 2 173 1 105] 
#[0 1 74 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 2 185 0 229] 
#[0 1 78 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 2 189 0 229] 
#[0 1 82 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 2 193 0 229] 
#[0 1 86 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 90 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 94 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 98 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 102 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 106 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 110 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 114 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 118 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 122 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 126 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 130 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 134 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 138 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 2 197 0 229] 
#[0 1 142 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 146 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 150 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 203 0 205 0 206 0 229] 
#[0 1 154 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 1 158 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 162 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 166 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 170 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 174 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 178 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 182 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 186 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 148 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 2 201 0 215 2 205 0 228] 
#[1 1 190 0 1 1 190 0 5 1 190 0 6 1 190 0 9 1 190 0 11 1 190 0 12 1 190 0 14 1 190 0 19 1 190 0 31 1 190 0 32 1 190 0 40 1 190 0 42 1 190 0 44 1 190 0 46 1 190 0 47 1 190 0 48 1 190 0 49 1 190 0 50 1 190 0 51 1 190 0 52 1 190 0 53 1 190 0 54 1 190 0 55 1 190 0 56 1 190 0 57 1 190 0 58 1 190 0 59 1 190 0 60 1 190 0 61 1 190 0 62 1 190 0 63 1 190 0 64 1 190 0 65 1 190 0 69 1 190 0 75 1 190 0 76 1 190 0 82 1 190 0 85 1 190 0 99 1 190 0 100 1 190 0 102 1 190 0 103 1 190 0 107 1 190 0 113 1 190 0 120 1 190 0 126 1 190 0 128 1 190 0 134 1 190 0 135 1 190 0 138 1 190 0 140 1 190 0 143 1 190 0 144 1 190 0 149 1 190 0 157 1 190 0 170 1 190 0 175 1 190 0 176 1 190 0 182 1 190 0 184 1 190 0 192 1 190 0 193 1 190 0 194 1 190 0 195 1 190 0 196 1 190 0 213 0 15 0 215 1 190 0 219 1 190 0 220 1 190 0 222 1 190 0 223 1 190 0 224 1 190 0 225 1 190 0 227 1 190 0 228 1 190 0 229] 
#[0 2 213 0 144] 
#[1 1 194 0 1 1 194 0 3 1 194 0 4 1 194 0 5 1 194 0 6 1 194 0 7 1 194 0 8 1 194 0 9 1 194 0 10 1 194 0 11 1 194 0 12 1 194 0 13 0 19 0 14 1 194 0 15 1 194 0 16 1 194 0 17 1 194 0 19 1 194 0 20 1 194 0 21 1 194 0 22 1 194 0 23 1 194 0 24 1 194 0 25 1 194 0 26 1 194 0 27 1 194 0 28 1 194 0 29 1 194 0 32 1 194 0 34 1 194 0 35 1 194 0 38 1 194 0 45 1 194 0 80 1 194 0 83 1 194 0 87 1 194 0 90 1 194 0 99 1 194 0 105 1 194 0 106 1 194 0 108 1 194 0 110 1 194 0 115 1 194 0 116 1 194 0 118 1 194 0 121 1 194 0 123 1 194 0 125 1 194 0 130 1 194 0 146 1 194 0 150 1 194 0 151 1 194 0 152 1 194 0 171 1 194 0 177 1 194 0 179 1 194 0 186 1 194 0 188 1 194 0 190 1 194 0 200 1 194 0 201 1 194 0 204 1 194 0 207 1 194 0 209 1 194 0 210 1 194 0 211 1 194 0 212 1 194 0 214 1 194 0 215 2 221 1 45] 
#[1 0 230 0 1 0 230 0 3 0 230 0 4 0 230 0 5 0 230 0 6 0 230 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 15 0 230 0 16 0 230 0 17 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 23 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 32 0 230 0 34 0 230 0 35 0 230 0 38 0 230 0 45 0 230 0 80 0 230 0 83 0 230 0 87 0 230 0 90 0 230 0 99 0 230 0 105 0 230 0 106 0 230 0 108 0 230 0 110 0 230 0 115 0 230 0 116 0 230 0 118 0 230 0 121 0 230 0 123 0 230 0 125 0 230 0 130 0 230 0 146 0 230 0 150 0 230 0 151 0 230 0 152 0 230 0 171 0 230 0 177 0 230 0 179 0 230 0 186 0 230 0 188 0 230 0 190 0 230 0 200 0 230 0 201 0 230 0 204 0 230 0 207 0 230 0 209 0 230 0 210 0 230 0 211 0 230 0 212 0 230 0 214 0 230 0 215 2 225 1 46] 
#[1 2 229 0 17 1 198 0 19 1 198 0 30 1 198 0 40 1 198 0 44 1 198 0 46 1 198 0 47 1 198 0 48 1 198 0 69 1 198 0 70 1 198 0 72 1 198 0 74 1 198 0 75 1 198 0 76 1 198 0 77 1 198 0 78 1 198 0 79 1 198 0 81 1 198 0 85 1 198 0 89 1 198 0 93 1 198 0 98 1 198 0 100 1 198 0 101 1 198 0 103 1 198 0 113 1 198 0 114 1 198 0 120 1 198 0 126 1 198 0 131 1 198 0 132 1 198 0 133 1 198 0 136 1 198 0 137 1 198 0 138 1 198 0 141 1 198 0 142 1 198 0 143 1 198 0 147 1 198 0 149 1 198 0 154 1 198 0 155 1 198 0 156 1 198 0 157 1 198 0 158 1 198 0 160 1 198 0 161 1 198 0 162 1 198 0 163 1 198 0 164 1 198 0 166 1 198 0 167 1 198 0 170 1 198 0 172 1 198 0 173 1 198 0 174 1 198 0 175 1 198 0 176 1 198 0 182 1 198 0 183 1 198 0 184 1 198 0 194 1 198 0 195 1 198 0 196 1 198 0 203 1 198 0 205 1 198 0 206 2 233 0 215 1 198 0 229 1 198 2 137] 
#[0 2 237 0 25] 
#[1 2 241 0 11 1 202 0 25 1 202 0 215 2 245 0 234 2 249 1 0] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 2 253 1 43 2 253 1 44 2 253 1 51 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 3 1 0 1 2 45 0 5 3 197 0 6 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 185 0 228 3 189 0 229 3 193 0 235 3 197 0 236 3 201 0 237 3 245 0 241 3 209 1 4 3 213 1 5 3 217 1 8 3 221 1 11 3 225 1 12 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 3 225 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[1 1 210 0 1 1 210 0 5 1 210 0 9 1 210 0 12 1 210 0 14 1 210 0 31 1 210 0 32 1 210 0 40 1 210 0 42 1 210 0 44 1 210 0 48 1 210 0 49 1 210 0 50 1 210 0 51 1 210 0 52 1 210 0 53 1 210 0 54 1 210 0 55 1 210 0 56 1 210 0 57 1 210 0 58 1 210 0 59 1 210 0 60 1 210 0 61 1 210 0 62 1 210 0 63 1 210 0 64 1 210 0 65 1 210 0 69 1 210 0 75 1 210 0 76 1 210 0 82 1 210 0 85 1 210 0 99 1 210 0 100 1 210 0 102 1 210 0 103 1 210 0 107 1 210 0 113 1 210 0 120 1 210 0 126 1 210 0 128 1 210 0 134 1 210 0 135 1 210 0 138 1 210 0 140 1 210 0 143 1 210 0 170 1 210 0 175 1 210 0 176 1 210 0 182 1 210 0 184 1 210 0 192 1 210 0 193 1 210 0 194 1 210 0 195 1 210 0 196 1 210 0 213 4 201 0 215 1 210 0 219 1 210 0 220 1 210 0 222 1 210 0 223 1 210 0 224 1 210 0 225 1 210 0 227 1 210 0 229] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 4 205 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 4 205 1 86] 
#[0 1 214 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 1 218 0 19 0 40 0 70 0 78 0 79 0 81 0 89 0 98 0 109 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 2 241 0 11 1 222 0 17 1 222 0 215 4 209 0 234 4 213 1 26] 
#[0 1 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 221 0 6 2 241 0 11 3 153 0 215 4 217 0 234 4 221 0 236 4 225 1 90 4 229 1 91] 
#[0 1 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 234 0 3 1 234 0 4 0 23 0 5 1 234 0 6 1 234 0 7 1 234 0 8 1 234 0 9 1 234 0 10 1 234 0 11 1 234 0 12 1 234 0 13 1 234 0 15 1 234 0 16 1 234 0 17 1 234 0 19 1 234 0 20 1 234 0 21 1 234 0 22 1 234 0 23 1 234 0 24 1 234 0 25 1 234 0 26 1 234 0 27 1 234 0 28 1 234 0 32 1 234 0 34 1 234 0 35 1 234 0 37 1 234 0 38 1 234 0 45 1 234 0 80 1 234 0 83 1 234 0 87 1 234 0 90 1 234 0 99 1 234 0 105 1 234 0 106 1 234 0 108 1 234 0 110 1 234 0 115 1 234 0 116 1 234 0 118 1 234 0 121 1 234 0 123 1 234 0 125 1 234 0 130 1 234 0 146 1 234 0 150 1 234 0 151 1 234 0 152 1 234 0 171 1 234 0 177 1 234 0 179 1 234 0 186 1 234 0 188 1 234 0 190 1 234 0 201 1 234 0 207 1 234 0 209 1 234 0 210 1 234 0 211 1 234 0 212 1 234 0 213 1 234 0 214 1 234 0 215 2 105 0 235 4 233 1 89] 
#[0 1 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 4 237 0 215 1 117 0 229 4 241 1 34] 
#[1 4 245 0 14 1 242 0 17 1 242 0 215 4 249 1 35] 
#[1 1 246 0 19 1 246 0 40 1 246 0 70 1 246 0 78 1 246 0 79 1 246 0 81 1 246 0 88 1 246 0 89 1 246 0 98 1 246 0 114 1 246 0 120 1 246 0 131 1 246 0 132 1 246 0 136 1 246 0 137 1 246 0 141 1 246 0 142 1 246 0 154 1 246 0 155 1 246 0 156 1 246 0 158 1 246 0 160 1 246 0 162 1 246 0 163 1 246 0 166 1 246 0 173 1 246 0 174 1 246 0 183 1 246 0 203 1 246 0 205 1 246 0 206 4 253 1 32] 
#[1 1 246 0 19 1 246 0 40 1 246 0 70 1 246 0 78 1 246 0 79 1 246 0 81 1 246 0 88 1 246 0 89 1 246 0 98 1 246 0 114 1 246 0 120 1 246 0 131 1 246 0 132 1 246 0 136 1 246 0 137 1 246 0 141 1 246 0 142 1 246 0 154 1 246 0 155 1 246 0 156 1 246 0 158 1 246 0 160 1 246 0 162 1 246 0 163 1 246 0 166 1 246 0 173 1 246 0 174 1 246 0 183 1 246 0 203 1 246 0 205 1 246 0 206 5 1 1 32] 
#[0 5 5 0 229] 
#[1 2 165 0 100 2 169 0 184 5 9 1 94 5 9 1 104 5 9 1 105] 
#[0 5 13 0 229] 
#[0 5 17 0 229] 
#[0 5 21 0 229] 
#[0 5 25 0 229] 
#[1 2 45 0 5 5 29 0 17 5 33 0 215 5 37 0 235 5 41 0 242] 
#[0 5 45 0 229] 
#[0 5 49 0 229] 
#[1 5 53 0 17 5 57 0 215] 
#[0 1 250 0 17 0 215] 
#[0 1 254 0 17 0 215] 
#[1 5 61 0 17 5 65 0 37 5 69 0 215] 
#[1 2 45 0 5 5 73 0 17 5 77 0 215 5 37 0 235 5 81 0 242] 
#[1 5 85 0 17 5 89 0 215] 
#[1 2 45 0 5 5 93 0 17 5 97 0 215 5 37 0 235 5 101 0 242] 
#[0 5 105 0 228] 
#[1 0 230 0 1 0 230 0 3 0 230 0 4 0 7 0 5 0 230 0 6 0 230 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 15 0 230 0 16 0 230 0 17 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 23 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 32 0 230 0 34 0 230 0 35 0 230 0 38 0 230 0 45 0 230 0 80 0 230 0 83 0 230 0 87 0 230 0 90 0 230 0 99 0 230 0 105 0 230 0 106 0 230 0 108 0 230 0 110 0 230 0 115 0 230 0 116 0 230 0 118 0 230 0 121 0 230 0 123 0 230 0 125 0 230 0 130 0 230 0 146 0 230 0 150 0 230 0 151 0 230 0 152 0 230 0 171 0 230 0 177 0 230 0 179 0 230 0 186 0 230 0 188 0 230 0 190 0 230 0 200 0 230 0 201 0 230 0 204 0 230 0 207 0 230 0 209 0 230 0 210 0 230 0 211 0 230 0 212 0 230 0 214 0 230 0 215 2 49 0 235 5 109 1 46 5 113 1 47] 
#[0 2 2 0 1 0 5 0 6 0 9 0 11 0 12 0 14 0 19 0 31 0 32 0 40 0 42 0 44 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 144 0 149 0 157 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 228 0 229] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 5 121 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86] 
#[1 5 125 0 215 5 129 0 228] 
#[0 2 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 10 0 1 2 10 0 3 2 10 0 4 2 10 0 5 2 10 0 6 2 10 0 7 2 10 0 8 2 10 0 9 2 10 0 10 2 10 0 11 2 10 0 12 2 10 0 13 0 27 0 14 2 10 0 15 2 10 0 16 2 10 0 17 2 10 0 19 2 10 0 20 2 10 0 21 2 10 0 22 2 10 0 23 2 10 0 24 2 10 0 25 2 10 0 26 2 10 0 27 2 10 0 28 2 10 0 29 2 10 0 32 2 10 0 34 2 10 0 35 2 10 0 38 2 10 0 45 2 10 0 80 2 10 0 83 2 10 0 87 2 10 0 90 2 10 0 99 2 10 0 105 2 10 0 106 2 10 0 108 2 10 0 110 2 10 0 115 2 10 0 116 2 10 0 118 2 10 0 121 2 10 0 123 2 10 0 125 2 10 0 130 2 10 0 146 2 10 0 150 2 10 0 151 2 10 0 152 2 10 0 171 2 10 0 177 2 10 0 179 2 10 0 186 2 10 0 188 2 10 0 190 2 10 0 200 2 10 0 201 2 10 0 204 2 10 0 207 2 10 0 209 2 10 0 210 2 10 0 211 2 10 0 212 2 10 0 214 2 10 0 215 2 221 1 45] 
#[0 2 14 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 137] 
#[0 2 18 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 137] 
#[1 5 133 0 17 2 22 0 19 2 22 0 30 2 22 0 40 2 22 0 44 2 22 0 46 2 22 0 47 2 22 0 48 2 22 0 69 2 22 0 70 2 22 0 72 2 22 0 74 2 22 0 75 2 22 0 76 2 22 0 77 2 22 0 78 2 22 0 79 2 22 0 81 2 22 0 85 2 22 0 89 2 22 0 93 2 22 0 98 2 22 0 100 2 22 0 101 2 22 0 103 2 22 0 113 2 22 0 114 2 22 0 120 2 22 0 126 2 22 0 131 2 22 0 132 2 22 0 133 2 22 0 136 2 22 0 137 2 22 0 138 2 22 0 141 2 22 0 142 2 22 0 143 2 22 0 147 2 22 0 149 2 22 0 154 2 22 0 155 2 22 0 156 2 22 0 157 2 22 0 158 2 22 0 160 2 22 0 161 2 22 0 162 2 22 0 163 2 22 0 164 2 22 0 166 2 22 0 167 2 22 0 170 2 22 0 172 2 22 0 173 2 22 0 174 2 22 0 175 2 22 0 176 2 22 0 182 2 22 0 183 2 22 0 184 2 22 0 194 2 22 0 195 2 22 0 196 2 22 0 203 2 22 0 205 2 22 0 206 5 137 0 215 2 22 0 229 2 22 2 137] 
#[1 2 26 0 1 2 26 0 5 2 26 0 6 2 26 0 9 2 26 0 11 2 26 0 12 2 26 0 14 2 26 0 19 2 26 0 22 2 26 0 23 2 26 0 24 2 26 0 25 2 26 0 26 2 26 0 31 2 26 0 32 2 26 0 39 2 26 0 40 2 26 0 42 2 26 0 44 2 26 0 46 2 26 0 47 2 26 0 48 2 26 0 49 2 26 0 50 2 26 0 51 2 26 0 52 2 26 0 53 2 26 0 54 2 26 0 55 2 26 0 56 2 26 0 57 2 26 0 58 2 26 0 59 2 26 0 60 2 26 0 61 2 26 0 62 2 26 0 63 2 26 0 64 2 26 0 65 2 26 0 69 2 26 0 70 2 26 0 75 2 26 0 76 2 26 0 82 2 26 0 85 2 26 0 99 2 26 0 100 2 26 0 102 2 26 0 103 2 26 0 107 2 26 0 110 2 26 0 113 2 26 0 116 2 26 0 120 2 26 0 122 2 26 0 126 2 26 0 128 2 26 0 131 2 26 0 134 2 26 0 135 2 26 0 138 2 26 0 140 2 26 0 143 2 26 0 149 2 26 0 153 2 26 0 157 2 26 0 170 2 26 0 175 2 26 0 176 2 26 0 182 2 26 0 183 2 26 0 184 2 26 0 192 2 26 0 193 2 26 0 194 2 26 0 195 2 26 0 196 2 26 0 213 0 31 0 215 2 26 0 219 2 26 0 220 2 26 0 222 2 26 0 223 2 26 0 224 2 26 0 225 2 26 0 227 2 26 0 228 2 26 0 229] 
#[1 1 41 0 39 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 1 41 0 131 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 145 1 2 1 41 1 3 1 45 1 43 1 45 1 44 1 45 1 51 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[0 2 30 0 11 0 25 0 215] 
#[1 2 45 0 5 2 34 0 11 2 34 0 25 2 34 0 215 5 149 0 235] 
#[0 5 153 0 228] 
#[0 2 38 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 37 0 38 0 40 0 42 0 44 0 45 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 69 0 72 0 73 0 75 0 76 0 80 0 81 0 82 0 83 0 84 0 85 0 87 0 88 0 90 0 91 0 92 0 94 0 97 0 99 0 100 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 110 0 113 0 115 0 116 0 118 0 120 0 121 0 123 0 125 0 126 0 128 0 129 0 130 0 134 0 135 0 138 0 140 0 143 0 146 0 150 0 151 0 152 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 177 0 178 0 179 0 180 0 182 0 184 0 185 0 186 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 200 0 201 0 202 0 204 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 157 2 23 5 157 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 5 157 2 30 5 157 2 31 4 13 2 32 5 157 2 39 5 157 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 5 157 2 73 5 157 2 74 5 157 2 75 5 157 2 76 5 157 2 77 5 157 2 78 5 157 2 79 5 157 2 80 5 157 2 81 5 157 2 82 5 157 2 83 5 157 2 84 5 157 2 85 5 157 2 86 5 157 2 87 5 157 2 88 5 157 2 89 5 157 2 90 5 157 2 91 5 157 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 5 157 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 5 157 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 161 2 23 5 161 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 5 161 2 30 5 161 2 31 4 13 2 32 5 161 2 39 5 161 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 5 161 2 73 5 161 2 74 5 161 2 75 5 161 2 76 5 161 2 77 5 161 2 78 5 161 2 79 5 161 2 80 5 161 2 81 5 161 2 82 5 161 2 83 5 161 2 84 5 161 2 85 5 161 2 86 5 161 2 87 5 161 2 88 5 161 2 89 5 161 2 90 5 161 2 91 5 161 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 5 161 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 5 161 2 135] 
#[1 5 165 0 215 5 169 0 228] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 173 2 23 5 173 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 5 173 2 30 5 173 2 31 4 13 2 32 5 173 2 39 5 173 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 5 173 2 73 5 173 2 74 5 173 2 75 5 173 2 76 5 173 2 77 5 173 2 78 5 173 2 79 5 173 2 80 5 173 2 81 5 173 2 82 5 173 2 83 5 173 2 84 5 173 2 85 5 173 2 86 5 173 2 87 5 173 2 88 5 173 2 89 5 173 2 90 5 173 2 91 5 173 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 5 173 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 5 173 2 135] 
#[1 5 177 0 215 5 181 0 229 5 185 2 107] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 189 2 23 5 189 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 5 189 2 30 5 189 2 31 4 13 2 32 5 189 2 39 5 189 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 5 189 2 73 5 189 2 74 5 189 2 75 5 189 2 76 5 189 2 77 5 189 2 78 5 189 2 79 5 189 2 80 5 189 2 81 5 189 2 82 5 189 2 83 5 189 2 84 5 189 2 85 5 189 2 86 5 189 2 87 5 189 2 88 5 189 2 89 5 189 2 90 5 189 2 91 5 189 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 5 189 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 5 189 2 135] 
#[0 2 42 0 5] 
#[0 2 46 0 5] 
#[0 2 50 0 5] 
#[0 2 54 0 5] 
#[0 2 58 0 5] 
#[0 2 62 0 5] 
#[0 2 66 0 5] 
#[0 2 70 0 5] 
#[0 2 74 0 5] 
#[0 2 78 0 5] 
#[0 2 82 0 5] 
#[0 2 86 0 5] 
#[0 2 90 0 5] 
#[1 2 45 0 5 5 193 0 235] 
#[0 2 94 0 5] 
#[0 2 98 0 5] 
#[0 2 102 0 5] 
#[1 2 45 0 5 5 197 0 235] 
#[1 5 201 0 215 5 181 0 229 5 205 2 104 5 209 2 107] 
#[1 2 45 0 5 5 213 0 235] 
#[0 0 35 0 14] 
#[1 2 45 0 5 5 217 0 235] 
#[0 2 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 114 0 14] 
#[0 2 118 0 14] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 5 221 0 204 1 29 0 229 5 225 1 42 5 225 1 43 5 225 1 44 5 225 1 51 5 225 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 229 2 56] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 233 2 23 5 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 5 233 2 30 5 233 2 31 4 13 2 32 5 233 2 39 5 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 5 233 2 73 5 233 2 74 5 233 2 75 5 233 2 76 5 233 2 77 5 233 2 78 5 233 2 79 5 233 2 80 5 233 2 81 5 233 2 82 5 233 2 83 5 233 2 84 5 233 2 85 5 233 2 86 5 233 2 87 5 233 2 88 5 233 2 89 5 233 2 90 5 233 2 91 5 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 5 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 5 233 2 135] 
#[1 2 45 0 5 5 237 0 235] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 241 2 23 5 241 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 5 241 2 30 5 241 2 31 4 13 2 32 5 241 2 39 5 241 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 5 241 2 73 5 241 2 74 5 241 2 75 5 241 2 76 5 241 2 77 5 241 2 78 5 241 2 79 5 241 2 80 5 241 2 81 5 241 2 82 5 241 2 83 5 241 2 84 5 241 2 85 5 241 2 86 5 241 2 87 5 241 2 88 5 241 2 89 5 241 2 90 5 241 2 91 5 241 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 5 241 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 5 241 2 135] 
#[1 2 122 0 1 2 122 0 5 2 122 0 9 2 122 0 12 2 122 0 14 2 122 0 31 2 122 0 32 2 122 0 40 2 122 0 42 2 122 0 44 2 122 0 48 2 122 0 49 2 122 0 50 2 122 0 51 2 122 0 52 2 122 0 53 2 122 0 54 2 122 0 55 2 122 0 56 2 122 0 57 2 122 0 58 2 122 0 59 2 122 0 60 2 122 0 61 2 122 0 62 2 122 0 63 2 122 0 64 2 122 0 65 2 122 0 69 2 122 0 70 2 122 0 75 2 122 0 76 2 122 0 82 2 122 0 85 2 122 0 99 2 122 0 100 2 122 0 102 2 122 0 103 2 122 0 107 2 122 0 113 2 122 0 120 2 122 0 122 2 122 0 126 2 122 0 128 2 122 0 134 2 122 0 135 2 122 0 138 2 122 0 140 2 122 0 143 2 122 0 170 2 122 0 175 2 122 0 176 2 122 0 182 2 122 0 183 2 122 0 184 2 122 0 192 2 122 0 193 2 122 0 194 2 122 0 195 2 122 0 196 2 122 0 213 2 122 0 214 0 39 0 215 2 122 0 219 2 122 0 220 2 122 0 222 2 122 0 223 2 122 0 224 2 122 0 225 2 122 0 227 2 122 0 229] 
#[0 5 249 0 6] 
#[0 2 126 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 142 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 253 0 18 6 1 0 240] 
#[1 2 154 0 1 0 43 0 3 0 43 0 4 0 47 0 5 0 43 0 6 0 43 0 7 0 43 0 8 0 43 0 9 0 43 0 10 0 43 0 11 0 43 0 12 0 43 0 13 0 43 0 14 0 43 0 15 0 43 0 16 0 43 0 17 0 43 0 19 0 43 0 20 0 43 0 21 0 43 0 22 0 43 0 23 0 43 0 24 0 43 0 25 0 43 0 26 0 43 0 27 0 43 0 28 0 230 0 29 0 43 0 32 0 43 0 34 0 43 0 35 0 43 0 38 0 43 0 45 0 43 0 80 0 43 0 83 0 43 0 87 0 43 0 90 0 43 0 99 0 43 0 105 0 43 0 108 0 43 0 110 0 43 0 115 0 43 0 116 0 43 0 118 0 43 0 121 0 43 0 123 0 43 0 125 0 43 0 130 0 43 0 146 0 43 0 150 0 43 0 151 0 43 0 152 0 43 0 171 0 43 0 177 0 43 0 179 0 43 0 186 0 43 0 188 0 43 0 190 0 43 0 201 0 43 0 207 0 43 0 209 0 43 0 210 0 43 0 211 0 43 0 212 0 43 0 214 0 43 0 215 6 5 0 235 2 53 1 46 2 57 1 47] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 6 9 2 23 6 9 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 6 9 2 30 6 9 2 31 4 13 2 32 6 9 2 39 6 9 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 6 9 2 73 6 9 2 74 6 9 2 75 6 9 2 76 6 9 2 77 6 9 2 78 6 9 2 79 6 9 2 80 6 9 2 81 6 9 2 82 6 9 2 83 6 9 2 84 6 9 2 85 6 9 2 86 6 9 2 87 6 9 2 88 6 9 2 89 6 9 2 90 6 9 2 91 6 9 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 6 9 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 6 9 2 135] 
#[0 2 158 0 11 0 25 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 6 21 0 214 6 17 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 6 21 0 238 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 6 25 2 23 6 25 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 6 25 2 30 6 25 2 31 4 13 2 32 6 25 2 39 6 25 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 6 29 2 62 6 33 2 63 6 37 2 66 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 6 25 2 73 6 25 2 74 6 25 2 75 6 25 2 76 6 25 2 77 6 25 2 78 6 25 2 79 6 25 2 80 6 25 2 81 6 25 2 82 6 25 2 83 6 25 2 84 6 25 2 85 6 25 2 86 6 25 2 87 6 25 2 88 6 25 2 89 6 25 2 90 6 25 2 91 6 25 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 6 25 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 6 25 2 135] 
#[0 2 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 41 0 6 3 153 0 215 6 41 0 236] 
#[1 2 166 0 6 2 241 0 11 2 166 0 215 6 45 0 234] 
#[0 2 170 0 6 0 215] 
#[1 2 174 0 6 2 174 0 11 2 174 0 215 6 49 1 10] 
#[1 2 178 0 6 2 178 0 11 2 178 0 215 6 53 1 7] 
#[1 2 182 0 14 2 101 0 29] 
#[1 6 57 0 3 2 186 0 6 6 61 0 7 6 65 0 9 2 186 0 11 6 69 0 12 6 73 0 15 2 186 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 2 186 0 215] 
#[0 2 190 0 6 0 11 0 215] 
#[0 2 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 198 0 1 2 202 0 3 2 202 0 4 0 51 0 5 2 202 0 6 2 202 0 7 2 202 0 8 2 202 0 9 2 202 0 10 2 202 0 11 2 202 0 12 2 202 0 13 2 198 0 14 2 202 0 15 2 202 0 16 2 202 0 17 2 202 0 19 2 202 0 20 2 202 0 21 2 202 0 22 2 202 0 23 2 202 0 24 2 202 0 25 2 202 0 26 2 202 0 27 2 202 0 28 2 202 0 32 2 202 0 34 2 202 0 35 2 202 0 38 2 202 0 45 2 202 0 80 2 202 0 83 2 202 0 87 2 202 0 90 2 202 0 99 2 202 0 105 2 202 0 108 2 202 0 110 2 202 0 115 2 202 0 116 2 202 0 118 2 202 0 121 2 202 0 123 2 202 0 125 2 202 0 130 2 202 0 146 2 202 0 150 2 202 0 151 2 202 0 152 2 202 0 171 2 202 0 177 2 202 0 179 2 202 0 186 2 202 0 188 2 202 0 190 2 202 0 201 2 202 0 207 2 202 0 209 2 202 0 210 2 202 0 211 2 202 0 212 2 202 0 214 2 202 0 215] 
#[1 2 206 0 1 2 210 0 3 2 210 0 4 0 55 0 5 2 210 0 6 2 210 0 7 2 210 0 8 2 210 0 9 2 210 0 10 2 210 0 11 2 210 0 12 2 210 0 13 2 206 0 14 2 210 0 15 2 210 0 16 2 210 0 17 2 210 0 19 2 210 0 20 2 210 0 21 2 210 0 22 2 210 0 23 2 210 0 24 2 210 0 25 2 210 0 26 2 210 0 27 2 210 0 28 2 210 0 32 2 210 0 34 2 210 0 35 2 210 0 38 2 210 0 45 2 210 0 80 2 210 0 83 2 210 0 87 2 210 0 90 2 210 0 99 2 210 0 105 2 210 0 108 2 210 0 110 2 210 0 115 2 210 0 116 2 210 0 118 2 210 0 121 2 210 0 123 2 210 0 125 2 210 0 130 2 210 0 146 2 210 0 150 2 210 0 151 2 210 0 152 2 210 0 171 2 210 0 177 2 210 0 179 2 210 0 186 2 210 0 188 2 210 0 190 2 210 0 201 2 210 0 207 2 210 0 209 2 210 0 210 2 210 0 211 2 210 0 212 2 210 0 214 2 210 0 215] 
#[1 2 214 0 1 2 218 0 3 2 218 0 4 0 59 0 5 2 218 0 6 2 218 0 7 2 218 0 8 2 218 0 9 2 218 0 10 2 218 0 11 2 218 0 12 2 218 0 13 2 214 0 14 2 218 0 15 2 218 0 16 2 218 0 17 2 218 0 19 2 218 0 20 2 218 0 21 2 218 0 22 2 218 0 23 2 218 0 24 2 218 0 25 2 218 0 26 2 218 0 27 2 218 0 28 2 218 0 32 2 218 0 34 2 218 0 35 2 218 0 38 2 218 0 45 2 218 0 80 2 218 0 83 2 218 0 87 2 218 0 90 2 218 0 99 2 218 0 105 2 218 0 108 2 218 0 110 2 218 0 115 2 218 0 116 2 218 0 118 2 218 0 121 2 218 0 123 2 218 0 125 2 218 0 130 2 218 0 146 2 218 0 150 2 218 0 151 2 218 0 152 2 218 0 171 2 218 0 177 2 218 0 179 2 218 0 186 2 218 0 188 2 218 0 190 2 218 0 201 2 218 0 207 2 218 0 209 2 218 0 210 2 218 0 211 2 218 0 212 2 218 0 214 2 218 0 215] 
#[1 2 222 0 1 2 226 0 3 2 226 0 4 0 63 0 5 2 226 0 6 2 226 0 7 2 226 0 8 2 226 0 9 2 226 0 10 2 226 0 11 2 226 0 12 2 226 0 13 2 222 0 14 2 226 0 15 2 226 0 16 2 226 0 17 2 226 0 19 2 226 0 20 2 226 0 21 2 226 0 22 2 226 0 23 2 226 0 24 2 226 0 25 2 226 0 26 2 226 0 27 2 226 0 28 2 226 0 32 2 226 0 34 2 226 0 35 2 226 0 38 2 226 0 45 2 226 0 80 2 226 0 83 2 226 0 87 2 226 0 90 2 226 0 99 2 226 0 105 2 226 0 108 2 226 0 110 2 226 0 115 2 226 0 116 2 226 0 118 2 226 0 121 2 226 0 123 2 226 0 125 2 226 0 130 2 226 0 146 2 226 0 150 2 226 0 151 2 226 0 152 2 226 0 171 2 226 0 177 2 226 0 179 2 226 0 186 2 226 0 188 2 226 0 190 2 226 0 201 2 226 0 207 2 226 0 209 2 226 0 210 2 226 0 211 2 226 0 212 2 226 0 214 2 226 0 215] 
#[0 2 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 238 0 1 2 242 0 3 2 242 0 4 0 67 0 5 2 242 0 6 2 242 0 7 2 242 0 8 2 242 0 9 2 242 0 10 2 242 0 11 2 242 0 12 2 242 0 13 2 238 0 14 2 242 0 15 2 242 0 16 2 242 0 17 2 242 0 19 2 242 0 20 2 242 0 21 2 242 0 22 2 242 0 23 2 242 0 24 2 242 0 25 2 242 0 26 2 242 0 27 2 242 0 28 2 242 0 32 2 242 0 34 2 242 0 35 2 242 0 38 2 242 0 45 2 242 0 80 2 242 0 83 2 242 0 87 2 242 0 90 2 242 0 99 2 242 0 105 2 242 0 108 2 242 0 110 2 242 0 115 2 242 0 116 2 242 0 118 2 242 0 121 2 242 0 123 2 242 0 125 2 242 0 130 2 242 0 146 2 242 0 150 2 242 0 151 2 242 0 152 2 242 0 171 2 242 0 177 2 242 0 179 2 242 0 186 2 242 0 188 2 242 0 190 2 242 0 201 2 242 0 207 2 242 0 209 2 242 0 210 2 242 0 211 2 242 0 212 2 242 0 214 2 242 0 215] 
#[0 2 246 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 254 0 1 3 2 0 3 3 2 0 4 0 71 0 5 3 2 0 6 3 2 0 7 3 2 0 8 3 2 0 9 3 2 0 10 3 2 0 11 3 2 0 12 3 2 0 13 2 254 0 14 3 2 0 15 3 2 0 16 3 2 0 17 3 2 0 19 3 2 0 20 3 2 0 21 3 2 0 22 3 2 0 23 3 2 0 24 3 2 0 25 3 2 0 26 3 2 0 27 3 2 0 28 3 2 0 32 3 2 0 34 3 2 0 35 3 2 0 38 3 2 0 45 3 2 0 80 3 2 0 83 3 2 0 87 3 2 0 90 3 2 0 99 3 2 0 105 3 2 0 108 3 2 0 110 3 2 0 115 3 2 0 116 3 2 0 118 3 2 0 121 3 2 0 123 3 2 0 125 3 2 0 130 3 2 0 146 3 2 0 150 3 2 0 151 3 2 0 152 3 2 0 171 3 2 0 177 3 2 0 179 3 2 0 186 3 2 0 188 3 2 0 190 3 2 0 201 3 2 0 207 3 2 0 209 3 2 0 210 3 2 0 211 3 2 0 212 3 2 0 214 3 2 0 215] 
#[0 6 153 0 14] 
#[1 3 6 0 1 3 10 0 3 3 10 0 4 0 75 0 5 3 10 0 6 3 10 0 7 3 10 0 8 3 10 0 9 3 10 0 10 3 10 0 11 3 10 0 12 3 10 0 13 3 6 0 14 3 10 0 15 3 10 0 16 3 10 0 17 3 10 0 19 3 10 0 20 3 10 0 21 3 10 0 22 3 10 0 23 3 10 0 24 3 10 0 25 3 10 0 26 3 10 0 27 3 10 0 28 3 10 0 32 3 10 0 34 3 10 0 35 3 10 0 38 3 10 0 45 3 10 0 80 3 10 0 83 3 10 0 87 3 10 0 90 3 10 0 99 3 10 0 105 3 10 0 108 3 10 0 110 3 10 0 115 3 10 0 116 3 10 0 118 3 10 0 121 3 10 0 123 3 10 0 125 3 10 0 130 3 10 0 146 3 10 0 150 3 10 0 151 3 10 0 152 3 10 0 171 3 10 0 177 3 10 0 179 3 10 0 186 3 10 0 188 3 10 0 190 3 10 0 201 3 10 0 207 3 10 0 209 3 10 0 210 3 10 0 211 3 10 0 212 3 10 0 214 3 10 0 215] 
#[1 6 157 0 1 2 45 0 5 3 14 0 14 6 161 0 235] 
#[1 3 18 0 1 3 22 0 3 3 22 0 4 0 79 0 5 3 22 0 6 3 22 0 7 3 22 0 8 3 22 0 9 3 22 0 10 3 22 0 11 3 22 0 12 3 22 0 13 3 18 0 14 3 22 0 15 3 22 0 16 3 22 0 17 3 22 0 19 3 22 0 20 3 22 0 21 3 22 0 22 3 22 0 23 3 22 0 24 3 22 0 25 3 22 0 26 3 22 0 27 3 22 0 28 3 22 0 32 3 22 0 34 3 22 0 35 3 22 0 38 3 22 0 45 3 22 0 80 3 22 0 83 3 22 0 87 3 22 0 90 3 22 0 99 3 22 0 105 3 22 0 108 3 22 0 110 3 22 0 115 3 22 0 116 3 22 0 118 3 22 0 121 3 22 0 123 3 22 0 125 3 22 0 130 3 22 0 146 3 22 0 150 3 22 0 151 3 22 0 152 3 22 0 171 3 22 0 177 3 22 0 179 3 22 0 186 3 22 0 188 3 22 0 190 3 22 0 201 3 22 0 207 3 22 0 209 3 22 0 210 3 22 0 211 3 22 0 212 3 22 0 214 3 22 0 215] 
#[1 3 26 0 1 3 30 0 3 3 30 0 4 0 83 0 5 3 30 0 6 3 30 0 7 3 30 0 8 3 30 0 9 3 30 0 10 3 30 0 11 3 30 0 12 3 30 0 13 3 26 0 14 3 30 0 15 3 30 0 16 3 30 0 17 3 30 0 19 3 30 0 20 3 30 0 21 3 30 0 22 3 30 0 23 3 30 0 24 3 30 0 25 3 30 0 26 3 30 0 27 3 30 0 28 3 30 0 32 3 30 0 34 3 30 0 35 3 30 0 38 3 30 0 45 3 30 0 80 3 30 0 83 3 30 0 87 3 30 0 90 3 30 0 99 3 30 0 105 3 30 0 108 3 30 0 110 3 30 0 115 3 30 0 116 3 30 0 118 3 30 0 121 3 30 0 123 3 30 0 125 3 30 0 130 3 30 0 146 3 30 0 150 3 30 0 151 3 30 0 152 3 30 0 171 3 30 0 177 3 30 0 179 3 30 0 186 3 30 0 188 3 30 0 190 3 30 0 201 3 30 0 207 3 30 0 209 3 30 0 210 3 30 0 211 3 30 0 212 3 30 0 214 3 30 0 215] 
#[0 3 34 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 38 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 54 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 58 0 1 3 62 0 3 3 62 0 4 0 87 0 5 3 62 0 6 3 62 0 7 3 62 0 8 3 62 0 9 3 62 0 10 3 62 0 11 3 62 0 12 3 62 0 13 3 58 0 14 3 62 0 15 3 62 0 16 3 62 0 17 3 62 0 19 3 62 0 20 3 62 0 21 3 62 0 22 3 62 0 23 3 62 0 24 3 62 0 25 3 62 0 26 3 62 0 27 3 62 0 28 3 62 0 32 3 62 0 34 3 62 0 35 3 62 0 38 3 62 0 45 3 62 0 80 3 62 0 83 3 62 0 87 3 62 0 90 3 62 0 99 3 62 0 105 3 62 0 108 3 62 0 110 3 62 0 115 3 62 0 116 3 62 0 118 3 62 0 121 3 62 0 123 3 62 0 125 3 62 0 130 3 62 0 146 3 62 0 150 3 62 0 151 3 62 0 152 3 62 0 171 3 62 0 177 3 62 0 179 3 62 0 186 3 62 0 188 3 62 0 190 3 62 0 201 3 62 0 207 3 62 0 209 3 62 0 210 3 62 0 211 3 62 0 212 3 62 0 214 3 62 0 215] 
#[1 2 45 0 5 6 165 0 235] 
#[0 3 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 74 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 78 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 90 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 110 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 118 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 126 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 130 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 134 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 185 0 40 6 173 0 100 6 185 0 120 6 181 0 184 6 185 2 97] 
#[1 3 146 0 1 3 150 0 3 3 150 0 4 0 91 0 5 3 150 0 6 3 150 0 7 3 150 0 8 3 150 0 9 3 150 0 10 3 150 0 11 3 150 0 12 3 150 0 13 3 146 0 14 3 150 0 15 3 150 0 16 3 150 0 17 3 150 0 19 3 150 0 20 3 150 0 21 3 150 0 22 3 150 0 23 3 150 0 24 3 150 0 25 3 150 0 26 3 150 0 27 3 150 0 28 3 150 0 32 3 150 0 34 3 150 0 35 3 150 0 38 3 150 0 45 3 150 0 80 3 150 0 83 3 150 0 87 3 150 0 90 3 150 0 99 3 150 0 105 3 150 0 108 3 150 0 110 3 150 0 115 3 150 0 116 3 150 0 118 3 150 0 121 3 150 0 123 3 150 0 125 3 150 0 130 3 150 0 146 3 150 0 150 3 150 0 151 3 150 0 152 3 150 0 171 3 150 0 177 3 150 0 179 3 150 0 186 3 150 0 188 3 150 0 190 3 150 0 201 3 150 0 207 3 150 0 209 3 150 0 210 3 150 0 211 3 150 0 212 3 150 0 214 3 150 0 215] 
#[0 3 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 166 0 3 3 166 0 4 3 166 0 5 3 166 0 6 3 166 0 7 3 166 0 8 3 166 0 9 3 166 0 10 3 166 0 11 3 166 0 12 3 166 0 13 3 166 0 15 3 166 0 16 3 166 0 17 3 166 0 19 3 166 0 20 3 166 0 21 3 166 0 22 3 166 0 23 3 166 0 24 3 166 0 25 3 166 0 26 3 166 0 27 3 166 0 28 3 166 0 32 3 166 0 34 3 166 0 35 3 166 0 38 3 166 0 45 3 166 0 80 3 166 0 83 3 166 0 87 3 166 0 90 3 166 0 99 3 166 0 105 3 166 0 108 3 166 0 110 3 166 0 115 3 166 0 116 3 166 0 118 3 166 0 121 3 166 0 123 3 166 0 125 3 166 0 130 3 166 0 146 3 166 0 150 3 166 0 151 3 166 0 152 3 166 0 171 3 166 0 177 3 166 0 179 3 166 0 186 3 166 0 188 3 166 0 190 3 166 0 201 3 166 0 207 3 166 0 209 3 166 0 210 3 166 0 211 3 166 0 212 3 166 0 214 3 166 0 215 6 189 2 100] 
#[0 3 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 178 0 1 3 182 0 3 3 182 0 4 0 95 0 5 3 182 0 6 3 182 0 7 3 182 0 8 3 182 0 9 3 182 0 10 3 182 0 11 3 182 0 12 3 182 0 13 3 178 0 14 3 182 0 15 3 182 0 16 3 182 0 17 3 182 0 19 3 182 0 20 3 182 0 21 3 182 0 22 3 182 0 23 3 182 0 24 3 182 0 25 3 182 0 26 3 182 0 27 3 182 0 28 3 182 0 32 3 182 0 34 3 182 0 35 3 182 0 38 3 182 0 45 3 182 0 80 3 182 0 83 3 182 0 87 3 182 0 90 3 182 0 99 3 182 0 105 3 182 0 108 3 182 0 110 3 182 0 115 3 182 0 116 3 182 0 118 3 182 0 121 3 182 0 123 3 182 0 125 3 182 0 130 3 182 0 146 3 182 0 150 3 182 0 151 3 182 0 152 3 182 0 171 3 182 0 177 3 182 0 179 3 182 0 186 3 182 0 188 3 182 0 190 3 182 0 201 3 182 0 207 3 182 0 209 3 182 0 210 3 182 0 211 3 182 0 212 3 182 0 214 3 182 0 215] 
#[0 3 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 190 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 3 194 0 11 0 17 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 73 0 229 6 193 1 28 6 193 1 29 6 193 1 30 1 93 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 1 93 1 86] 
#[0 3 198 0 11 0 17 0 215] 
#[0 3 202 0 6 0 11 0 215] 
#[0 3 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 6 197 0 6 3 153 0 215 6 197 0 236] 
#[1 3 210 0 6 2 241 0 11 3 210 0 215 6 201 0 234] 
#[0 3 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 1 117 0 229 6 205 1 34] 
#[0 3 218 0 17 0 215] 
#[1 6 209 0 215 6 213 0 228] 
#[0 3 222 0 14 0 17 0 215] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 0 26 0 78 0 26 0 79 0 26 0 81 6 217 0 88 0 26 0 89 0 26 0 98 0 26 0 114 0 26 0 120 0 26 0 131 0 26 0 132 0 81 0 136 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 183 0 26 0 203 0 26 0 205 0 26 0 206 1 141 0 252 0 89 0 253 0 93 0 254 0 105 1 31 6 221 1 37 0 113 1 38 0 117 1 39 0 117 1 40 0 117 1 63 0 129 1 64 0 117 1 67 0 117 1 72 0 117 1 75 0 117 1 78 0 117 1 93] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 0 26 0 78 0 26 0 79 0 26 0 81 6 225 0 88 0 26 0 89 0 26 0 98 0 26 0 114 0 26 0 120 0 26 0 131 0 26 0 132 0 81 0 136 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 183 0 26 0 203 0 26 0 205 0 26 0 206 1 141 0 252 0 89 0 253 0 93 0 254 0 105 1 31 6 221 1 37 0 113 1 38 0 117 1 39 0 117 1 40 0 117 1 63 0 129 1 64 0 117 1 67 0 117 1 72 0 117 1 75 0 117 1 78 0 117 1 93] 
#[1 2 45 0 5 6 229 0 17 6 233 0 215 5 37 0 235 6 237 0 242] 
#[1 6 241 0 17 6 245 0 215] 
#[1 6 249 0 17 6 253 0 37 7 1 0 215] 
#[1 2 45 0 5 7 5 0 17 7 9 0 215 5 37 0 235 7 13 0 242] 
#[1 7 17 0 17 7 21 0 215] 
#[1 2 45 0 5 7 25 0 17 7 29 0 215 5 37 0 235 7 33 0 242] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 7 41 1 68 7 45 1 70] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 7 49 1 68 7 53 1 70] 
#[0 7 57 0 144] 
#[1 7 61 0 17 7 65 0 215] 
#[1 2 45 0 5 3 230 0 17 7 69 0 37 3 230 0 106 3 230 0 108 3 230 0 215 7 73 0 235 7 77 0 242] 
#[1 2 45 0 5 3 234 0 17 3 234 0 106 3 234 0 108 3 234 0 215 7 81 0 235 7 85 0 242] 
#[0 3 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 3 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 7 97 1 65 7 101 1 66] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 7 105 1 42 7 105 1 43 7 105 1 44 7 105 1 51 7 105 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 7 109 1 65 7 101 1 66] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 7 113 1 79] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 7 117 1 79] 
#[1 7 121 0 17 7 125 0 215] 
#[1 3 250 0 19 3 250 0 40 3 250 0 70 3 250 0 72 3 250 0 74 3 250 0 77 3 250 0 78 3 250 0 79 3 250 0 81 3 250 0 88 3 250 0 89 3 250 0 93 3 250 0 98 3 250 0 100 3 250 0 114 3 250 0 120 3 250 0 132 3 250 0 133 3 250 0 137 3 250 0 141 3 250 0 142 3 250 0 154 3 250 0 155 3 250 0 156 3 250 0 158 3 250 0 160 3 250 0 161 3 250 0 162 3 250 0 163 3 250 0 166 3 250 0 173 3 250 0 174 3 250 0 183 3 250 0 184 3 250 0 203 3 250 0 205 3 250 0 206 7 129 1 76] 
#[1 3 250 0 19 3 250 0 40 3 250 0 70 3 250 0 72 3 250 0 74 3 250 0 77 3 250 0 78 3 250 0 79 3 250 0 81 3 250 0 88 3 250 0 89 3 250 0 93 3 250 0 98 3 250 0 100 3 250 0 114 3 250 0 120 3 250 0 132 3 250 0 133 3 250 0 137 3 250 0 141 3 250 0 142 3 250 0 154 3 250 0 155 3 250 0 156 3 250 0 158 3 250 0 160 3 250 0 161 3 250 0 162 3 250 0 163 3 250 0 166 3 250 0 173 3 250 0 174 3 250 0 183 3 250 0 184 3 250 0 203 3 250 0 205 3 250 0 206 7 133 1 76] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 7 137 1 68] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 7 141 1 68] 
#[1 7 145 0 17 7 149 0 215] 
#[1 0 230 0 1 0 230 0 3 0 230 0 4 0 7 0 5 0 230 0 6 0 230 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 15 0 230 0 16 0 230 0 17 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 23 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 32 0 230 0 34 0 230 0 35 0 230 0 38 0 230 0 45 0 230 0 80 0 230 0 83 0 230 0 87 0 230 0 90 0 230 0 99 0 230 0 105 0 230 0 106 0 230 0 108 0 230 0 110 0 230 0 115 0 230 0 116 0 230 0 118 0 230 0 121 0 230 0 123 0 230 0 125 0 230 0 130 0 230 0 146 0 230 0 150 0 230 0 151 0 230 0 152 0 230 0 171 0 230 0 177 0 230 0 179 0 230 0 186 0 230 0 188 0 230 0 190 0 230 0 200 0 230 0 201 0 230 0 204 0 230 0 207 0 230 0 209 0 230 0 210 0 230 0 211 0 230 0 212 0 230 0 214 0 230 0 215 2 49 0 235 7 153 1 46 7 157 1 47] 
#[1 3 254 0 1 3 254 0 3 3 254 0 4 3 254 0 5 3 254 0 6 3 254 0 7 3 254 0 8 3 254 0 9 3 254 0 10 3 254 0 11 3 254 0 12 3 254 0 13 0 99 0 14 3 254 0 15 3 254 0 16 3 254 0 17 3 254 0 19 3 254 0 20 3 254 0 21 3 254 0 22 3 254 0 23 3 254 0 24 3 254 0 25 3 254 0 26 3 254 0 27 3 254 0 28 3 254 0 29 3 254 0 32 3 254 0 34 3 254 0 35 3 254 0 38 3 254 0 45 3 254 0 80 3 254 0 83 3 254 0 87 3 254 0 90 3 254 0 99 3 254 0 105 3 254 0 106 3 254 0 108 3 254 0 110 3 254 0 115 3 254 0 116 3 254 0 118 3 254 0 121 3 254 0 123 3 254 0 125 3 254 0 130 3 254 0 146 3 254 0 150 3 254 0 151 3 254 0 152 3 254 0 171 3 254 0 177 3 254 0 179 3 254 0 186 3 254 0 188 3 254 0 190 3 254 0 200 3 254 0 201 3 254 0 204 3 254 0 207 3 254 0 209 3 254 0 210 3 254 0 211 3 254 0 212 3 254 0 214 3 254 0 215 2 221 1 45] 
#[1 0 230 0 1 0 230 0 3 0 230 0 4 0 230 0 5 0 230 0 6 0 230 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 15 0 230 0 16 0 230 0 17 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 23 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 32 0 230 0 34 0 230 0 35 0 230 0 38 0 230 0 45 0 230 0 80 0 230 0 83 0 230 0 87 0 230 0 90 0 230 0 99 0 230 0 105 0 230 0 106 0 230 0 108 0 230 0 110 0 230 0 115 0 230 0 116 0 230 0 118 0 230 0 121 0 230 0 123 0 230 0 125 0 230 0 130 0 230 0 146 0 230 0 150 0 230 0 151 0 230 0 152 0 230 0 171 0 230 0 177 0 230 0 179 0 230 0 186 0 230 0 188 0 230 0 190 0 230 0 200 0 230 0 201 0 230 0 204 0 230 0 207 0 230 0 209 0 230 0 210 0 230 0 211 0 230 0 212 0 230 0 214 0 230 0 215 7 161 1 46] 
#[1 4 2 0 6 4 2 0 11 4 2 0 215 7 165 1 50] 
#[1 7 169 0 6 3 153 0 215 7 169 0 236] 
#[0 7 173 0 228] 
#[1 4 6 0 1 4 6 0 3 4 6 0 4 0 103 0 5 4 6 0 6 4 6 0 7 4 6 0 8 4 6 0 9 4 6 0 10 4 6 0 11 4 6 0 12 4 6 0 13 4 6 0 14 4 6 0 15 4 6 0 16 4 6 0 17 4 6 0 19 4 6 0 20 4 6 0 21 4 6 0 22 4 6 0 23 4 6 0 24 4 6 0 25 4 6 0 26 4 6 0 27 4 6 0 28 4 6 0 29 4 6 0 32 4 6 0 34 4 6 0 35 4 6 0 38 4 6 0 45 4 6 0 80 4 6 0 83 4 6 0 87 4 6 0 90 4 6 0 99 4 6 0 105 4 6 0 106 4 6 0 108 4 6 0 110 4 6 0 115 4 6 0 116 4 6 0 118 4 6 0 121 4 6 0 123 4 6 0 125 4 6 0 130 4 6 0 146 4 6 0 150 4 6 0 151 4 6 0 152 4 6 0 171 4 6 0 177 4 6 0 179 4 6 0 186 4 6 0 188 4 6 0 190 4 6 0 200 4 6 0 201 4 6 0 204 4 6 0 207 4 6 0 209 4 6 0 210 4 6 0 211 4 6 0 212 4 6 0 214 4 6 0 215 2 49 0 235 7 177 1 47] 
#[0 4 10 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 137] 
#[0 4 14 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 137] 
#[0 4 18 0 1 0 5 0 6 0 9 0 11 0 12 0 14 0 19 0 22 0 23 0 24 0 25 0 26 0 31 0 32 0 39 0 40 0 42 0 44 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 70 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 110 0 113 0 116 0 120 0 122 0 126 0 128 0 131 0 134 0 135 0 138 0 140 0 143 0 149 0 153 0 157 0 170 0 175 0 176 0 182 0 183 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 228 0 229] 
#[0 4 22 0 11 0 25 0 215] 
#[1 3 1 0 1 2 45 0 5 7 181 0 6 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 185 0 228 3 189 0 229 3 193 0 235 7 181 0 236 3 201 0 237 3 245 0 241 7 185 1 4 3 213 1 5 3 217 1 8 3 221 1 11 3 225 1 12 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 3 225 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 4 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 30 0 3 4 30 0 4 4 30 0 5 4 30 0 6 6 61 0 7 4 30 0 8 4 30 0 9 4 30 0 10 4 30 0 11 4 30 0 12 4 30 0 13 6 73 0 15 4 30 0 16 4 30 0 17 4 30 0 19 4 30 0 20 4 30 0 21 4 30 0 22 4 30 0 23 4 30 0 24 4 30 0 25 4 30 0 26 4 30 0 27 4 30 0 28 4 30 0 32 4 30 0 34 4 30 0 35 4 30 0 38 4 30 0 45 4 30 0 80 4 30 0 83 4 30 0 87 4 30 0 90 4 30 0 99 4 30 0 105 4 30 0 108 4 30 0 110 4 30 0 115 4 30 0 116 4 30 0 118 4 30 0 121 4 30 0 123 4 30 0 125 6 129 0 130 4 30 0 146 4 30 0 150 4 30 0 151 4 30 0 152 4 30 0 171 4 30 0 177 4 30 0 179 4 30 0 186 4 30 0 188 4 30 0 190 4 30 0 201 4 30 0 207 6 145 0 209 4 30 0 210 6 149 0 211 4 30 0 212 4 30 0 214 4 30 0 215] 
#[1 4 34 0 3 4 34 0 4 4 34 0 5 4 34 0 6 6 61 0 7 4 34 0 8 4 34 0 9 4 34 0 10 4 34 0 11 4 34 0 12 4 34 0 13 6 73 0 15 4 34 0 16 4 34 0 17 4 34 0 19 4 34 0 20 4 34 0 21 4 34 0 22 4 34 0 23 4 34 0 24 4 34 0 25 4 34 0 26 4 34 0 27 4 34 0 28 4 34 0 32 4 34 0 34 4 34 0 35 4 34 0 38 4 34 0 45 4 34 0 80 4 34 0 83 4 34 0 87 4 34 0 90 4 34 0 99 4 34 0 105 4 34 0 108 4 34 0 110 4 34 0 115 4 34 0 116 4 34 0 118 4 34 0 121 4 34 0 123 4 34 0 125 6 129 0 130 4 34 0 146 4 34 0 150 4 34 0 151 4 34 0 152 4 34 0 171 4 34 0 177 4 34 0 179 4 34 0 186 4 34 0 188 4 34 0 190 4 34 0 201 4 34 0 207 6 145 0 209 4 34 0 210 6 149 0 211 4 34 0 212 4 34 0 214 4 34 0 215] 
#[0 7 189 0 228] 
#[1 4 38 0 1 4 38 0 3 4 38 0 4 0 107 0 5 4 38 0 6 4 38 0 7 4 38 0 8 4 38 0 9 4 38 0 10 4 38 0 11 4 38 0 12 4 38 0 13 4 38 0 14 4 38 0 15 4 38 0 16 4 38 0 17 4 38 0 19 4 38 0 20 4 38 0 21 4 38 0 22 4 38 0 23 4 38 0 24 4 38 0 25 4 38 0 26 4 38 0 27 4 38 0 28 4 38 0 32 4 38 0 34 4 38 0 35 4 38 0 38 4 38 0 45 4 38 0 80 4 38 0 83 4 38 0 87 4 38 0 90 4 38 0 99 4 38 0 105 4 38 0 108 4 38 0 110 4 38 0 115 4 38 0 116 4 38 0 118 4 38 0 121 4 38 0 123 4 38 0 125 4 38 0 130 4 38 0 146 4 38 0 150 4 38 0 151 4 38 0 152 4 38 0 171 4 38 0 177 4 38 0 179 4 38 0 186 4 38 0 188 4 38 0 190 4 38 0 201 4 38 0 207 4 38 0 209 4 38 0 210 4 38 0 211 4 38 0 212 4 38 0 214 4 38 0 215 7 193 0 235] 
#[1 6 57 0 3 4 42 0 4 4 42 0 5 4 42 0 6 6 61 0 7 4 42 0 8 6 65 0 9 4 42 0 10 4 42 0 11 6 69 0 12 4 42 0 13 6 73 0 15 4 42 0 16 4 42 0 17 6 77 0 19 6 81 0 20 4 42 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 4 42 0 28 4 42 0 32 6 109 0 34 6 113 0 35 4 42 0 38 4 42 0 45 4 42 0 80 4 42 0 83 4 42 0 87 4 42 0 90 4 42 0 99 4 42 0 105 4 42 0 108 4 42 0 110 4 42 0 115 6 117 0 116 6 121 0 118 4 42 0 121 4 42 0 123 6 125 0 125 6 129 0 130 4 42 0 146 6 133 0 150 6 137 0 151 4 42 0 152 4 42 0 171 4 42 0 177 4 42 0 179 4 42 0 186 4 42 0 188 4 42 0 190 4 42 0 201 6 141 0 207 6 145 0 209 4 42 0 210 6 149 0 211 4 42 0 212 4 42 0 214 4 42 0 215] 
#[1 5 181 0 229 7 197 2 107] 
#[1 7 201 0 37 7 205 0 110] 
#[1 4 46 0 32 4 46 0 83 4 46 0 99 4 46 0 105 4 46 0 115 4 46 0 121 4 46 0 123 4 46 0 152 4 46 0 171 4 46 0 177 4 46 0 186 4 46 0 201 4 46 0 215 7 209 2 132] 
#[0 4 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 7 213 2 23 7 213 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 7 213 2 30 7 213 2 31 4 13 2 32 7 213 2 39 7 213 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 7 213 2 73 7 213 2 74 7 213 2 75 7 213 2 76 7 213 2 77 7 213 2 78 7 213 2 79 7 213 2 80 7 213 2 81 7 213 2 82 7 213 2 83 7 213 2 84 7 213 2 85 7 213 2 86 7 213 2 87 7 213 2 88 7 213 2 89 7 213 2 90 7 213 2 91 7 213 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 7 213 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 7 213 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 7 217 2 23 7 217 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 7 217 2 30 7 217 2 31 4 13 2 32 7 217 2 39 7 217 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 7 217 2 73 7 217 2 74 7 217 2 75 7 217 2 76 7 217 2 77 7 217 2 78 7 217 2 79 7 217 2 80 7 217 2 81 7 217 2 82 7 217 2 83 7 217 2 84 7 217 2 85 7 217 2 86 7 217 2 87 7 217 2 88 7 217 2 89 7 217 2 90 7 217 2 91 7 217 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 7 217 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 7 217 2 135] 
#[1 5 181 0 229 7 221 2 104 5 209 2 107] 
#[0 4 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 58 0 3 4 58 0 4 4 58 0 5 4 58 0 6 4 58 0 7 4 58 0 8 4 58 0 9 4 58 0 10 4 58 0 11 4 58 0 12 4 58 0 13 4 58 0 15 4 58 0 16 4 58 0 17 4 58 0 19 4 58 0 20 4 58 0 21 4 58 0 22 4 58 0 23 4 58 0 24 4 58 0 25 4 58 0 26 4 58 0 27 4 58 0 28 4 58 0 32 4 58 0 34 4 58 0 35 4 58 0 38 4 58 0 45 4 58 0 80 4 58 0 83 4 58 0 87 4 58 0 90 4 58 0 99 4 58 0 105 4 58 0 108 4 58 0 110 4 58 0 115 4 58 0 116 4 58 0 118 4 58 0 121 4 58 0 123 4 58 0 125 4 58 0 130 4 58 0 146 4 58 0 150 4 58 0 151 4 58 0 152 4 58 0 171 4 58 0 177 4 58 0 179 4 58 0 186 4 58 0 188 4 58 0 190 4 58 0 201 4 58 0 207 4 58 0 209 4 58 0 210 4 58 0 211 4 58 0 212 4 58 0 214 4 58 0 215 7 225 2 106] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 7 229 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 7 233 0 229 7 241 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 7 241 1 86 7 241 2 33 7 241 2 34] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 7 249 2 23 7 249 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 7 249 2 30 7 249 2 31 4 13 2 32 7 249 2 39 7 249 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 7 249 2 73 7 249 2 74 7 249 2 75 7 249 2 76 7 249 2 77 7 249 2 78 7 249 2 79 7 249 2 80 7 249 2 81 7 249 2 82 7 249 2 83 7 249 2 84 7 249 2 85 7 249 2 86 7 249 2 87 7 249 2 88 7 249 2 89 7 249 2 90 7 249 2 91 7 249 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 7 249 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 7 249 2 135] 
#[1 3 149 0 213 7 253 0 237] 
#[1 4 62 0 1 4 62 0 3 4 62 0 4 0 111 0 5 4 62 0 6 4 62 0 7 4 62 0 8 4 62 0 9 4 62 0 10 4 62 0 11 4 62 0 12 4 62 0 13 4 62 0 14 4 62 0 15 4 62 0 16 4 62 0 17 4 62 0 19 4 62 0 20 4 62 0 21 4 62 0 22 4 62 0 23 4 62 0 24 4 62 0 25 4 62 0 26 4 62 0 27 4 62 0 28 2 101 0 29 4 62 0 32 4 62 0 34 4 62 0 35 4 62 0 38 4 62 0 45 4 62 0 80 4 62 0 83 4 62 0 87 4 62 0 90 0 115 0 99 4 62 0 105 4 62 0 108 4 62 0 110 4 62 0 115 4 62 0 116 4 62 0 118 4 62 0 121 4 62 0 123 4 62 0 125 4 62 0 130 4 62 0 146 4 62 0 150 4 62 0 151 4 62 0 152 4 62 0 171 4 62 0 177 4 62 0 179 4 62 0 186 4 62 0 188 4 62 0 190 4 62 0 201 5 221 0 204 4 62 0 207 4 62 0 209 4 62 0 210 4 62 0 211 4 62 0 212 4 62 0 214 4 62 0 215 8 5 0 235 8 9 1 87 2 113 1 88 2 117 1 89 8 13 1 92 8 17 1 166 8 21 2 55 8 21 2 56 8 21 2 61] 
#[0 4 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 4 70 0 4 4 70 0 5 4 70 0 6 6 61 0 7 4 70 0 8 6 65 0 9 4 70 0 10 4 70 0 11 6 69 0 12 4 70 0 13 6 73 0 15 4 70 0 16 4 70 0 17 6 77 0 19 6 81 0 20 4 70 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 4 70 0 28 4 70 0 32 4 70 0 34 4 70 0 35 4 70 0 38 4 70 0 45 4 70 0 80 4 70 0 83 4 70 0 87 4 70 0 90 4 70 0 99 4 70 0 105 4 70 0 108 4 70 0 110 4 70 0 115 6 117 0 116 6 121 0 118 4 70 0 121 4 70 0 123 6 125 0 125 6 129 0 130 4 70 0 146 4 70 0 150 4 70 0 151 4 70 0 152 4 70 0 171 4 70 0 177 4 70 0 179 4 70 0 186 4 70 0 188 4 70 0 190 4 70 0 201 4 70 0 207 6 145 0 209 4 70 0 210 6 149 0 211 4 70 0 212 4 70 0 214 4 70 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 33 2 23 8 33 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 33 2 30 8 33 2 31 4 13 2 32 8 33 2 39 8 33 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 33 2 73 8 33 2 74 8 33 2 75 8 33 2 76 8 33 2 77 8 33 2 78 8 33 2 79 8 33 2 80 8 33 2 81 8 33 2 82 8 33 2 83 8 33 2 84 8 33 2 85 8 33 2 86 8 33 2 87 8 33 2 88 8 33 2 89 8 33 2 90 8 33 2 91 8 33 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 33 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 33 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 8 37 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211] 
#[0 4 74 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 70 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 122 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 183 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 214 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 4 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 37 0 38 0 40 0 42 0 44 0 45 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 69 0 72 0 73 0 75 0 76 0 80 0 81 0 82 0 83 0 84 0 85 0 87 0 88 0 90 0 91 0 92 0 94 0 97 0 99 0 100 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 110 0 113 0 115 0 116 0 118 0 120 0 121 0 123 0 125 0 126 0 128 0 129 0 130 0 134 0 135 0 138 0 140 0 143 0 146 0 150 0 151 0 152 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 177 0 178 0 179 0 180 0 182 0 184 0 185 0 186 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 200 0 201 0 202 0 204 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 4 82 0 1 4 82 0 5 4 82 0 9 4 82 0 12 4 82 0 14 4 82 0 31 4 82 0 32 4 82 0 40 4 82 0 42 4 82 0 44 4 82 0 48 4 82 0 49 4 82 0 50 4 82 0 51 4 82 0 52 4 82 0 53 4 82 0 54 4 82 0 55 4 82 0 56 4 82 0 57 4 82 0 58 4 82 0 59 4 82 0 60 4 82 0 61 4 82 0 62 4 82 0 63 4 82 0 64 4 82 0 65 4 82 0 69 4 82 0 75 4 82 0 76 4 82 0 82 4 82 0 85 4 82 0 99 4 82 0 100 4 82 0 102 4 82 0 103 4 82 0 107 4 82 0 113 4 82 0 120 4 82 0 126 4 82 0 128 4 82 0 134 4 82 0 135 4 82 0 138 4 82 0 140 4 82 0 143 4 82 0 170 4 82 0 175 4 82 0 176 4 82 0 182 4 82 0 184 4 82 0 192 4 82 0 193 4 82 0 194 4 82 0 195 4 82 0 196 4 82 0 213 8 41 0 215 4 82 0 219 4 82 0 220 4 82 0 222 4 82 0 223 4 82 0 224 4 82 0 225 4 82 0 227 4 82 0 229] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 8 45 1 12 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 8 45 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 8 49 0 144] 
#[1 6 57 0 3 8 53 0 6 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 8 53 0 236] 
#[0 4 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 57 0 214] 
#[0 4 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 4 94 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 4 94 0 214 4 94 0 215] 
#[1 3 38 0 1 3 38 0 3 3 38 0 5 3 38 0 7 3 38 0 9 0 119 0 11 3 38 0 12 3 38 0 14 3 38 0 15 3 38 0 19 3 38 0 20 3 38 0 22 3 38 0 23 3 38 0 24 3 38 0 25 3 38 0 26 3 38 0 27 3 38 0 34 3 38 0 35 3 38 0 116 3 38 0 118 3 38 0 125 3 38 0 130 3 38 0 150 3 38 0 151 3 38 0 207 3 38 0 209 3 38 0 211 0 119 0 214 0 119 0 215] 
#[1 8 61 0 214 6 17 0 215 8 61 0 238] 
#[1 4 102 0 11 4 102 0 214 4 102 0 215 8 65 2 65] 
#[0 4 106 0 11 0 25 0 215] 
#[1 3 185 0 228 8 69 1 8 3 221 1 11] 
#[1 4 110 0 6 2 241 0 11 4 110 0 215 8 73 0 234 8 77 1 9] 
#[1 4 114 0 6 0 123 0 11 4 114 0 215 8 81 0 234 8 85 1 6] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 89 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 93 2 23 8 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 93 2 30 8 93 2 31 4 13 2 32 8 93 2 39 8 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 93 2 73 8 93 2 74 8 93 2 75 8 93 2 76 8 93 2 77 8 93 2 78 8 93 2 79 8 93 2 80 8 93 2 81 8 93 2 82 8 93 2 83 8 93 2 84 8 93 2 85 8 93 2 86 8 93 2 87 8 93 2 88 8 93 2 89 8 93 2 90 8 93 2 91 8 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 93 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 97 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 101 2 23 8 101 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 101 2 30 8 101 2 31 4 13 2 32 8 101 2 39 8 101 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 101 2 73 8 101 2 74 8 101 2 75 8 101 2 76 8 101 2 77 8 101 2 78 8 101 2 79 8 101 2 80 8 101 2 81 8 101 2 82 8 101 2 83 8 101 2 84 8 101 2 85 8 101 2 86 8 101 2 87 8 101 2 88 8 101 2 89 8 101 2 90 8 101 2 91 8 101 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 101 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 101 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 105 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 109 2 23 8 109 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 109 2 30 8 109 2 31 4 13 2 32 8 109 2 39 8 109 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 109 2 73 8 109 2 74 8 109 2 75 8 109 2 76 8 109 2 77 8 109 2 78 8 109 2 79 8 109 2 80 8 109 2 81 8 109 2 82 8 109 2 83 8 109 2 84 8 109 2 85 8 109 2 86 8 109 2 87 8 109 2 88 8 109 2 89 8 109 2 90 8 109 2 91 8 109 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 109 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 109 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 113 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 117 2 23 8 117 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 117 2 30 8 117 2 31 4 13 2 32 8 117 2 39 8 117 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 117 2 73 8 117 2 74 8 117 2 75 8 117 2 76 8 117 2 77 8 117 2 78 8 117 2 79 8 117 2 80 8 117 2 81 8 117 2 82 8 117 2 83 8 117 2 84 8 117 2 85 8 117 2 86 8 117 2 87 8 117 2 88 8 117 2 89 8 117 2 90 8 117 2 91 8 117 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 117 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 117 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 121 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 125 2 23 8 125 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 125 2 30 8 125 2 31 4 13 2 32 8 125 2 39 8 125 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 125 2 73 8 125 2 74 8 125 2 75 8 125 2 76 8 125 2 77 8 125 2 78 8 125 2 79 8 125 2 80 8 125 2 81 8 125 2 82 8 125 2 83 8 125 2 84 8 125 2 85 8 125 2 86 8 125 2 87 8 125 2 88 8 125 2 89 8 125 2 90 8 125 2 91 8 125 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 125 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 125 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 129 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 133 2 23 8 133 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 133 2 30 8 133 2 31 4 13 2 32 8 133 2 39 8 133 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 133 2 73 8 133 2 74 8 133 2 75 8 133 2 76 8 133 2 77 8 133 2 78 8 133 2 79 8 133 2 80 8 133 2 81 8 133 2 82 8 133 2 83 8 133 2 84 8 133 2 85 8 133 2 86 8 133 2 87 8 133 2 88 8 133 2 89 8 133 2 90 8 133 2 91 8 133 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 133 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 133 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 137 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 141 2 23 8 141 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 141 2 30 8 141 2 31 4 13 2 32 8 141 2 39 8 141 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 141 2 73 8 141 2 74 8 141 2 75 8 141 2 76 8 141 2 77 8 141 2 78 8 141 2 79 8 141 2 80 8 141 2 81 8 141 2 82 8 141 2 83 8 141 2 84 8 141 2 85 8 141 2 86 8 141 2 87 8 141 2 88 8 141 2 89 8 141 2 90 8 141 2 91 8 141 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 141 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 141 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 145 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 149 2 23 8 149 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 149 2 30 8 149 2 31 4 13 2 32 8 149 2 39 8 149 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 149 2 73 8 149 2 74 8 149 2 75 8 149 2 76 8 149 2 77 8 149 2 78 8 149 2 79 8 149 2 80 8 149 2 81 8 149 2 82 8 149 2 83 8 149 2 84 8 149 2 85 8 149 2 86 8 149 2 87 8 149 2 88 8 149 2 89 8 149 2 90 8 149 2 91 8 149 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 149 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 149 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 157 2 23 8 157 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 157 2 30 8 157 2 31 4 13 2 32 8 157 2 39 8 157 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 157 2 73 8 157 2 74 8 157 2 75 8 157 2 76 8 157 2 77 8 157 2 78 8 157 2 79 8 157 2 80 8 157 2 81 8 157 2 82 8 157 2 83 8 157 2 84 8 157 2 85 8 157 2 86 8 157 2 87 8 157 2 88 8 157 2 89 8 157 2 90 8 157 2 91 8 157 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 157 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 157 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 161 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 165 2 23 8 165 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 165 2 30 8 165 2 31 4 13 2 32 8 165 2 39 8 165 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 165 2 73 8 165 2 74 8 165 2 75 8 165 2 76 8 165 2 77 8 165 2 78 8 165 2 79 8 165 2 80 8 165 2 81 8 165 2 82 8 165 2 83 8 165 2 84 8 165 2 85 8 165 2 86 8 165 2 87 8 165 2 88 8 165 2 89 8 165 2 90 8 165 2 91 8 165 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 165 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 165 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 169 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 173 2 23 8 173 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 173 2 30 8 173 2 31 4 13 2 32 8 173 2 39 8 173 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 173 2 73 8 173 2 74 8 173 2 75 8 173 2 76 8 173 2 77 8 173 2 78 8 173 2 79 8 173 2 80 8 173 2 81 8 173 2 82 8 173 2 83 8 173 2 84 8 173 2 85 8 173 2 86 8 173 2 87 8 173 2 88 8 173 2 89 8 173 2 90 8 173 2 91 8 173 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 173 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 173 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 177 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 181 2 23 8 181 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 181 2 30 8 181 2 31 4 13 2 32 8 181 2 39 8 181 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 181 2 73 8 181 2 74 8 181 2 75 8 181 2 76 8 181 2 77 8 181 2 78 8 181 2 79 8 181 2 80 8 181 2 81 8 181 2 82 8 181 2 83 8 181 2 84 8 181 2 85 8 181 2 86 8 181 2 87 8 181 2 88 8 181 2 89 8 181 2 90 8 181 2 91 8 181 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 181 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 181 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 185 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 189 2 23 8 189 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 189 2 30 8 189 2 31 4 13 2 32 8 189 2 39 8 189 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 189 2 73 8 189 2 74 8 189 2 75 8 189 2 76 8 189 2 77 8 189 2 78 8 189 2 79 8 189 2 80 8 189 2 81 8 189 2 82 8 189 2 83 8 189 2 84 8 189 2 85 8 189 2 86 8 189 2 87 8 189 2 88 8 189 2 89 8 189 2 90 8 189 2 91 8 189 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 189 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 189 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 193 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 197 2 23 8 197 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 197 2 30 8 197 2 31 4 13 2 32 8 197 2 39 8 197 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 197 2 73 8 197 2 74 8 197 2 75 8 197 2 76 8 197 2 77 8 197 2 78 8 197 2 79 8 197 2 80 8 197 2 81 8 197 2 82 8 197 2 83 8 197 2 84 8 197 2 85 8 197 2 86 8 197 2 87 8 197 2 88 8 197 2 89 8 197 2 90 8 197 2 91 8 197 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 197 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 197 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 201 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 205 2 23 8 205 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 205 2 30 8 205 2 31 4 13 2 32 8 205 2 39 8 205 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 205 2 73 8 205 2 74 8 205 2 75 8 205 2 76 8 205 2 77 8 205 2 78 8 205 2 79 8 205 2 80 8 205 2 81 8 205 2 82 8 205 2 83 8 205 2 84 8 205 2 85 8 205 2 86 8 205 2 87 8 205 2 88 8 205 2 89 8 205 2 90 8 205 2 91 8 205 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 205 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 205 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 209 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 213 2 23 8 213 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 213 2 30 8 213 2 31 4 13 2 32 8 213 2 39 8 213 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 213 2 73 8 213 2 74 8 213 2 75 8 213 2 76 8 213 2 77 8 213 2 78 8 213 2 79 8 213 2 80 8 213 2 81 8 213 2 82 8 213 2 83 8 213 2 84 8 213 2 85 8 213 2 86 8 213 2 87 8 213 2 88 8 213 2 89 8 213 2 90 8 213 2 91 8 213 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 213 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 213 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 217 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 221 2 23 8 221 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 221 2 30 8 221 2 31 4 13 2 32 8 221 2 39 8 221 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 221 2 73 8 221 2 74 8 221 2 75 8 221 2 76 8 221 2 77 8 221 2 78 8 221 2 79 8 221 2 80 8 221 2 81 8 221 2 82 8 221 2 83 8 221 2 84 8 221 2 85 8 221 2 86 8 221 2 87 8 221 2 88 8 221 2 89 8 221 2 90 8 221 2 91 8 221 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 221 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 221 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 225 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 229 2 23 8 229 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 229 2 30 8 229 2 31 4 13 2 32 8 229 2 39 8 229 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 229 2 73 8 229 2 74 8 229 2 75 8 229 2 76 8 229 2 77 8 229 2 78 8 229 2 79 8 229 2 80 8 229 2 81 8 229 2 82 8 229 2 83 8 229 2 84 8 229 2 85 8 229 2 86 8 229 2 87 8 229 2 88 8 229 2 89 8 229 2 90 8 229 2 91 8 229 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 229 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 229 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 233 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 237 2 23 8 237 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 237 2 30 8 237 2 31 4 13 2 32 8 237 2 39 8 237 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 237 2 73 8 237 2 74 8 237 2 75 8 237 2 76 8 237 2 77 8 237 2 78 8 237 2 79 8 237 2 80 8 237 2 81 8 237 2 82 8 237 2 83 8 237 2 84 8 237 2 85 8 237 2 86 8 237 2 87 8 237 2 88 8 237 2 89 8 237 2 90 8 237 2 91 8 237 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 237 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 237 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 241 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 245 2 23 8 245 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 245 2 30 8 245 2 31 4 13 2 32 8 245 2 39 8 245 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 245 2 73 8 245 2 74 8 245 2 75 8 245 2 76 8 245 2 77 8 245 2 78 8 245 2 79 8 245 2 80 8 245 2 81 8 245 2 82 8 245 2 83 8 245 2 84 8 245 2 85 8 245 2 86 8 245 2 87 8 245 2 88 8 245 2 89 8 245 2 90 8 245 2 91 8 245 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 245 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 245 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 8 249 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 253 2 23 8 253 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 253 2 30 8 253 2 31 4 13 2 32 8 253 2 39 8 253 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 253 2 73 8 253 2 74 8 253 2 75 8 253 2 76 8 253 2 77 8 253 2 78 8 253 2 79 8 253 2 80 8 253 2 81 8 253 2 82 8 253 2 83 8 253 2 84 8 253 2 85 8 253 2 86 8 253 2 87 8 253 2 88 8 253 2 89 8 253 2 90 8 253 2 91 8 253 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 253 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 253 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 9 1 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 5 2 23 9 5 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 5 2 30 9 5 2 31 4 13 2 32 9 5 2 39 9 5 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 5 2 73 9 5 2 74 9 5 2 75 9 5 2 76 9 5 2 77 9 5 2 78 9 5 2 79 9 5 2 80 9 5 2 81 9 5 2 82 9 5 2 83 9 5 2 84 9 5 2 85 9 5 2 86 9 5 2 87 9 5 2 88 9 5 2 89 9 5 2 90 9 5 2 91 9 5 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 5 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 5 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 9 9 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 13 2 23 9 13 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 13 2 30 9 13 2 31 4 13 2 32 9 13 2 39 9 13 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 13 2 73 9 13 2 74 9 13 2 75 9 13 2 76 9 13 2 77 9 13 2 78 9 13 2 79 9 13 2 80 9 13 2 81 9 13 2 82 9 13 2 83 9 13 2 84 9 13 2 85 9 13 2 86 9 13 2 87 9 13 2 88 9 13 2 89 9 13 2 90 9 13 2 91 9 13 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 13 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 13 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 9 17 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 21 2 23 9 21 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 21 2 30 9 21 2 31 4 13 2 32 9 21 2 39 9 21 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 21 2 73 9 21 2 74 9 21 2 75 9 21 2 76 9 21 2 77 9 21 2 78 9 21 2 79 9 21 2 80 9 21 2 81 9 21 2 82 9 21 2 83 9 21 2 84 9 21 2 85 9 21 2 86 9 21 2 87 9 21 2 88 9 21 2 89 9 21 2 90 9 21 2 91 9 21 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 21 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 21 2 135] 
#[1 9 25 0 215 9 29 0 228] 
#[0 9 33 0 228] 
#[1 3 1 0 1 2 45 0 5 9 41 0 6 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 37 0 228 3 189 0 229 3 193 0 235 9 41 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 45 2 23 9 45 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 45 2 30 9 45 2 31 4 13 2 32 9 45 2 39 9 45 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 9 49 2 46 9 53 2 47 9 57 2 50 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 45 2 73 9 45 2 74 9 45 2 75 9 45 2 76 9 45 2 77 9 45 2 78 9 45 2 79 9 45 2 80 9 45 2 81 9 45 2 82 9 45 2 83 9 45 2 84 9 45 2 85 9 45 2 86 9 45 2 87 9 45 2 88 9 45 2 89 9 45 2 90 9 45 2 91 9 45 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 45 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 45 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 61 2 23 9 61 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 61 2 30 9 61 2 31 4 13 2 32 9 61 2 39 9 61 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 61 2 73 9 61 2 74 9 61 2 75 9 61 2 76 9 61 2 77 9 61 2 78 9 61 2 79 9 61 2 80 9 61 2 81 9 61 2 82 9 61 2 83 9 61 2 84 9 61 2 85 9 61 2 86 9 61 2 87 9 61 2 88 9 61 2 89 9 61 2 90 9 61 2 91 9 61 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 61 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 61 2 135] 
#[0 4 118 0 40 0 100 0 120 0 184] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 9 65 0 37 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 9 69 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 9 73 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 77 2 23 9 77 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 77 2 30 9 77 2 31 4 13 2 32 9 77 2 39 9 77 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 77 2 73 9 77 2 74 9 77 2 75 9 77 2 76 9 77 2 77 9 77 2 78 9 77 2 79 9 77 2 80 9 77 2 81 9 77 2 82 9 77 2 83 9 77 2 84 9 77 2 85 9 77 2 86 9 77 2 87 9 77 2 88 9 77 2 89 9 77 2 90 9 77 2 91 9 77 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 77 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 77 2 135] 
#[0 4 122 0 40 0 100 0 120 0 184] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 9 81 0 30 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 9 233 0 81 3 101 0 82 9 101 0 84 1 57 0 85 9 105 0 88 9 109 0 91 9 113 0 92 9 117 0 94 9 121 0 97 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 9 129 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 9 133 0 129 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 9 137 0 146 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 9 161 0 171 1 57 0 175 1 57 0 176 9 233 0 178 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 9 177 0 189 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 9 189 0 202 9 193 0 204 9 197 0 208 3 149 0 213 9 201 0 215 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 209 0 229 9 213 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 217 1 192 9 217 1 196 9 225 1 197 9 217 1 201 9 233 1 202 9 217 1 203 9 217 1 204 9 217 1 205 9 217 1 206 9 217 1 207 9 217 1 208 9 217 1 209 9 217 1 210 9 217 1 211 9 217 1 213 9 217 1 214 9 217 1 215 9 217 1 216 9 217 1 217 9 217 1 221 9 217 1 223 9 217 1 232 9 217 1 233 9 217 1 234 9 217 1 235 9 217 1 236 9 217 1 238 9 217 1 243 9 217 1 244 9 217 1 245 9 217 1 246 9 217 1 250 9 217 1 251 9 217 1 252 9 217 1 253 9 217 1 255 9 217 2 1 9 217 2 2 9 217 2 3 9 217 2 5 9 217 2 7 9 217 2 8 9 217 2 9 9 217 2 10 9 217 2 11 9 217 2 16 9 217 2 20 9 217 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[0 4 126 0 40 0 100 0 120 0 184] 
#[1 4 130 0 3 4 130 0 4 4 130 0 5 4 130 0 6 4 130 0 7 4 130 0 8 4 130 0 9 4 130 0 10 4 130 0 11 4 130 0 12 4 130 0 13 4 130 0 15 4 130 0 16 4 130 0 17 4 130 0 19 4 130 0 20 4 130 0 21 4 130 0 22 4 130 0 23 4 130 0 24 4 130 0 25 4 130 0 26 4 130 0 27 4 130 0 28 0 127 0 32 4 130 0 34 4 130 0 35 4 130 0 38 4 130 0 45 4 130 0 80 0 131 0 83 4 130 0 87 4 130 0 90 0 135 0 99 0 139 0 105 4 130 0 108 4 130 0 110 4 130 0 115 4 130 0 116 4 130 0 118 0 143 0 121 0 147 0 123 4 130 0 125 4 130 0 130 4 130 0 146 4 130 0 150 4 130 0 151 0 151 0 152 0 155 0 171 0 159 0 177 4 130 0 179 0 163 0 186 4 130 0 188 4 130 0 190 0 167 0 201 4 130 0 207 4 130 0 209 4 130 0 210 4 130 0 211 4 130 0 212 4 130 0 214 0 171 0 215 10 197 2 99 10 201 2 102 10 205 2 103 10 209 2 112 10 213 2 113 10 217 2 118 10 221 2 119 10 225 2 120 10 229 2 121 10 233 2 122 10 237 2 123 10 241 2 129 10 245 2 131 10 249 2 133] 
#[0 4 134 0 11 0 17 0 215] 
#[0 4 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 4 142 0 6 0 11 0 215] 
#[0 4 146 0 17 0 215] 
#[0 10 253 0 228] 
#[0 4 150 0 14 0 17 0 215] 
#[0 11 1 0 136] 
#[0 4 154 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206] 
#[0 11 5 0 136] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 9 1 68 11 13 1 70] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 17 1 68 11 21 1 70] 
#[1 11 25 0 17 11 29 0 215] 
#[0 4 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 4 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 33 1 65 7 101 1 66] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 11 37 1 42 11 37 1 43 11 37 1 44 11 37 1 51 11 37 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 41 1 65 7 101 1 66] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 11 45 1 79] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 11 49 1 79] 
#[1 11 53 0 17 11 57 0 215] 
#[1 3 250 0 19 3 250 0 40 3 250 0 70 3 250 0 72 3 250 0 74 3 250 0 77 3 250 0 78 3 250 0 79 3 250 0 81 3 250 0 88 3 250 0 89 3 250 0 93 3 250 0 98 3 250 0 100 3 250 0 114 3 250 0 120 3 250 0 132 3 250 0 133 3 250 0 137 3 250 0 141 3 250 0 142 3 250 0 154 3 250 0 155 3 250 0 156 3 250 0 158 3 250 0 160 3 250 0 161 3 250 0 162 3 250 0 163 3 250 0 166 3 250 0 173 3 250 0 174 3 250 0 183 3 250 0 184 3 250 0 203 3 250 0 205 3 250 0 206 11 61 1 76] 
#[1 3 250 0 19 3 250 0 40 3 250 0 70 3 250 0 72 3 250 0 74 3 250 0 77 3 250 0 78 3 250 0 79 3 250 0 81 3 250 0 88 3 250 0 89 3 250 0 93 3 250 0 98 3 250 0 100 3 250 0 114 3 250 0 120 3 250 0 132 3 250 0 133 3 250 0 137 3 250 0 141 3 250 0 142 3 250 0 154 3 250 0 155 3 250 0 156 3 250 0 158 3 250 0 160 3 250 0 161 3 250 0 162 3 250 0 163 3 250 0 166 3 250 0 173 3 250 0 174 3 250 0 183 3 250 0 184 3 250 0 203 3 250 0 205 3 250 0 206 11 65 1 76] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 69 1 68] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 73 1 68] 
#[1 11 77 0 17 11 81 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 11 85 1 42 11 85 1 43 11 85 1 44 11 85 1 51 11 85 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 11 97 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 101 1 68] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 11 105 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 109 1 68] 
#[1 11 129 0 110 11 129 0 153 11 121 0 229 11 125 0 245 11 129 0 246] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 133 1 68 11 137 1 70] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 11 141 1 68 11 145 1 70] 
#[1 0 73 0 19 4 170 0 44 4 170 0 48 4 170 0 69 4 170 0 75 4 170 0 76 4 170 0 85 4 170 0 103 4 170 0 113 4 170 0 126 4 170 0 143 4 170 0 170 4 170 0 175 4 170 0 176 4 170 0 182 4 170 0 194 4 170 0 195 4 170 0 196 4 170 0 229 11 149 0 252 0 89 0 253 0 93 0 254 11 153 1 106] 
#[1 11 157 0 6 0 73 0 19 4 174 0 46 4 174 0 47 7 57 0 144 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 11 157 0 236 11 161 0 252 0 89 0 253 0 93 0 254 11 165 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 4 178 0 17 11 177 0 37 4 178 0 106 4 178 0 108 4 178 0 215 11 181 0 235] 
#[1 11 185 0 6 0 73 0 19 4 174 0 46 4 174 0 47 7 57 0 144 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 11 185 0 236 11 161 0 252 0 89 0 253 0 93 0 254 11 189 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 4 182 0 17 4 182 0 106 4 182 0 108 4 182 0 215 11 193 0 235] 
#[1 11 197 0 17 2 81 0 24 11 201 0 215 11 205 0 239] 
#[0 11 209 0 229] 
#[1 0 73 0 19 11 213 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[0 4 186 0 19 0 88 0 229] 
#[1 11 221 0 17 2 101 0 29 11 225 0 215] 
#[1 0 73 0 19 11 229 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 11 237 1 80 11 241 1 81] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 11 245 1 80 11 241 1 81] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 11 249 1 79] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 11 253 1 79] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 12 1 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 12 5 0 252 0 89 0 253 0 93 0 254 12 17 1 40 12 17 1 63 12 13 1 64 12 17 1 67 12 17 1 72 12 17 1 77 12 17 1 78 12 17 1 93 12 17 1 100 12 17 1 102 12 17 1 107 12 17 1 108 12 17 1 111 12 17 1 112 12 17 1 117 12 17 1 118 12 17 1 120 12 17 1 138 12 17 1 139 12 17 1 140 12 17 1 145 12 17 1 151 12 17 1 156 12 81 1 157 12 17 1 171 12 17 1 173 12 17 1 175 12 17 1 176 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 12 105 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 12 5 0 252 0 89 0 253 0 93 0 254 12 17 1 40 12 17 1 63 12 13 1 64 12 17 1 67 12 17 1 72 12 17 1 77 12 17 1 78 12 17 1 93 12 17 1 100 12 17 1 102 12 17 1 107 12 17 1 108 12 17 1 111 12 17 1 112 12 17 1 117 12 17 1 118 12 17 1 120 12 17 1 138 12 17 1 139 12 17 1 140 12 17 1 145 12 17 1 151 12 17 1 156 12 81 1 157 12 17 1 171 12 17 1 173 12 17 1 175 12 17 1 176 12 101 2 136] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 12 109 1 73] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 12 113 1 73] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 12 117 1 68] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 12 121 1 68] 
#[1 4 198 0 1 4 198 0 3 4 198 0 4 4 198 0 5 4 198 0 6 4 198 0 7 4 198 0 8 4 198 0 9 4 198 0 10 4 198 0 11 4 198 0 12 4 198 0 13 1 7 0 14 4 198 0 15 4 198 0 16 4 198 0 17 4 198 0 19 4 198 0 20 4 198 0 21 4 198 0 22 4 198 0 23 4 198 0 24 4 198 0 25 4 198 0 26 4 198 0 27 4 198 0 28 4 198 0 29 4 198 0 32 4 198 0 34 4 198 0 35 4 198 0 38 4 198 0 45 4 198 0 80 4 198 0 83 4 198 0 87 4 198 0 90 4 198 0 99 4 198 0 105 4 198 0 106 4 198 0 108 4 198 0 110 4 198 0 115 4 198 0 116 4 198 0 118 4 198 0 121 4 198 0 123 4 198 0 125 4 198 0 130 4 198 0 146 4 198 0 150 4 198 0 151 4 198 0 152 4 198 0 171 4 198 0 177 4 198 0 179 4 198 0 186 4 198 0 188 4 198 0 190 4 198 0 200 4 198 0 201 4 198 0 204 4 198 0 207 4 198 0 209 4 198 0 210 4 198 0 211 4 198 0 212 4 198 0 214 4 198 0 215 2 221 1 45] 
#[1 0 230 0 1 0 230 0 3 0 230 0 4 0 230 0 5 0 230 0 6 0 230 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 15 0 230 0 16 0 230 0 17 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 23 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 32 0 230 0 34 0 230 0 35 0 230 0 38 0 230 0 45 0 230 0 80 0 230 0 83 0 230 0 87 0 230 0 90 0 230 0 99 0 230 0 105 0 230 0 106 0 230 0 108 0 230 0 110 0 230 0 115 0 230 0 116 0 230 0 118 0 230 0 121 0 230 0 123 0 230 0 125 0 230 0 130 0 230 0 146 0 230 0 150 0 230 0 151 0 230 0 152 0 230 0 171 0 230 0 177 0 230 0 179 0 230 0 186 0 230 0 188 0 230 0 190 0 230 0 200 0 230 0 201 0 230 0 204 0 230 0 207 0 230 0 209 0 230 0 210 0 230 0 211 0 230 0 212 0 230 0 214 0 230 0 215 12 125 1 46] 
#[1 4 202 0 1 4 202 0 3 4 202 0 4 4 202 0 5 4 202 0 6 4 202 0 7 4 202 0 8 4 202 0 9 4 202 0 10 4 202 0 11 4 202 0 12 4 202 0 13 1 11 0 14 4 202 0 15 4 202 0 16 4 202 0 17 4 202 0 19 4 202 0 20 4 202 0 21 4 202 0 22 4 202 0 23 4 202 0 24 4 202 0 25 4 202 0 26 4 202 0 27 4 202 0 28 4 202 0 29 4 202 0 32 4 202 0 34 4 202 0 35 4 202 0 38 4 202 0 45 4 202 0 80 4 202 0 83 4 202 0 87 4 202 0 90 4 202 0 99 4 202 0 105 4 202 0 106 4 202 0 108 4 202 0 110 4 202 0 115 4 202 0 116 4 202 0 118 4 202 0 121 4 202 0 123 4 202 0 125 4 202 0 130 4 202 0 146 4 202 0 150 4 202 0 151 4 202 0 152 4 202 0 171 4 202 0 177 4 202 0 179 4 202 0 186 4 202 0 188 4 202 0 190 4 202 0 200 4 202 0 201 4 202 0 204 4 202 0 207 4 202 0 209 4 202 0 210 4 202 0 211 4 202 0 212 4 202 0 214 4 202 0 215 2 221 1 45] 
#[1 4 206 0 6 2 241 0 11 4 206 0 215 12 129 0 234 12 133 1 49] 
#[0 4 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 214 0 1 4 214 0 3 4 214 0 4 1 15 0 5 4 214 0 6 4 214 0 7 4 214 0 8 4 214 0 9 4 214 0 10 4 214 0 11 4 214 0 12 4 214 0 13 4 214 0 14 4 214 0 15 4 214 0 16 4 214 0 17 4 214 0 19 4 214 0 20 4 214 0 21 4 214 0 22 4 214 0 23 4 214 0 24 4 214 0 25 4 214 0 26 4 214 0 27 4 214 0 28 4 214 0 29 4 214 0 32 4 214 0 34 4 214 0 35 4 214 0 38 4 214 0 45 4 214 0 80 4 214 0 83 4 214 0 87 4 214 0 90 4 214 0 99 4 214 0 105 4 214 0 106 4 214 0 108 4 214 0 110 4 214 0 115 4 214 0 116 4 214 0 118 4 214 0 121 4 214 0 123 4 214 0 125 4 214 0 130 4 214 0 146 4 214 0 150 4 214 0 151 4 214 0 152 4 214 0 171 4 214 0 177 4 214 0 179 4 214 0 186 4 214 0 188 4 214 0 190 4 214 0 200 4 214 0 201 4 214 0 204 4 214 0 207 4 214 0 209 4 214 0 210 4 214 0 211 4 214 0 212 4 214 0 214 4 214 0 215 2 49 0 235 12 137 1 47] 
#[0 4 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 222 0 11 0 25 0 215] 
#[1 12 141 0 6 3 153 0 215 12 141 0 236] 
#[1 4 226 0 1 4 226 0 3 4 226 0 4 1 19 0 5 4 226 0 6 4 226 0 7 4 226 0 8 4 226 0 9 4 226 0 10 4 226 0 11 4 226 0 12 4 226 0 13 4 226 0 14 4 226 0 15 4 226 0 16 4 226 0 17 4 226 0 19 4 226 0 20 4 226 0 21 4 226 0 22 4 226 0 23 4 226 0 24 4 226 0 25 4 226 0 26 4 226 0 27 4 226 0 28 4 226 0 32 4 226 0 34 4 226 0 35 4 226 0 38 4 226 0 45 4 226 0 80 4 226 0 83 4 226 0 87 4 226 0 90 4 226 0 99 4 226 0 105 4 226 0 108 4 226 0 110 4 226 0 115 4 226 0 116 4 226 0 118 4 226 0 121 4 226 0 123 4 226 0 125 4 226 0 130 4 226 0 146 4 226 0 150 4 226 0 151 4 226 0 152 4 226 0 171 4 226 0 177 4 226 0 179 4 226 0 186 4 226 0 188 4 226 0 190 4 226 0 201 4 226 0 207 4 226 0 209 4 226 0 210 4 226 0 211 4 226 0 212 4 226 0 214 4 226 0 215 12 145 0 235] 
#[0 12 149 0 144] 
#[1 4 46 0 32 4 46 0 83 4 46 0 99 4 46 0 105 4 46 0 115 4 46 0 121 4 46 0 123 4 46 0 152 4 46 0 171 4 46 0 177 4 46 0 186 4 46 0 201 4 46 0 215 12 153 2 132] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 12 157 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 12 157 1 86] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 12 161 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 12 165 2 23 12 165 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 12 165 2 30 12 165 2 31 4 13 2 32 12 165 2 39 12 165 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 12 165 2 73 12 165 2 74 12 165 2 75 12 165 2 76 12 165 2 77 12 165 2 78 12 165 2 79 12 165 2 80 12 165 2 81 12 165 2 82 12 165 2 83 12 165 2 84 12 165 2 85 12 165 2 86 12 165 2 87 12 165 2 88 12 165 2 89 12 165 2 90 12 165 2 91 12 165 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 12 165 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 12 165 2 135] 
#[1 3 25 0 32 10 225 0 83 3 105 0 99 10 161 0 105 12 169 0 115 10 165 0 121 10 169 0 123 10 173 0 152 10 177 0 171 10 181 0 177 10 185 0 186 10 189 0 201 12 173 0 215 12 177 2 102 10 205 2 103 10 209 2 112 10 213 2 113 10 217 2 118 10 221 2 119 10 225 2 120 10 229 2 121 10 233 2 122 10 237 2 123 10 241 2 129 10 245 2 131 10 249 2 133] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 12 181 0 234] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 12 185 0 234] 
#[0 4 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 234 0 3 4 234 0 4 4 234 0 5 4 234 0 6 4 234 0 7 4 234 0 8 4 234 0 9 4 234 0 10 1 23 0 11 4 234 0 12 4 234 0 13 4 234 0 15 4 234 0 16 4 234 0 17 4 234 0 19 4 234 0 20 4 234 0 21 4 234 0 22 4 234 0 23 4 234 0 24 4 234 0 25 4 234 0 26 4 234 0 27 4 234 0 28 4 234 0 32 4 234 0 34 4 234 0 35 4 234 0 38 4 234 0 45 4 234 0 80 4 234 0 83 4 234 0 87 4 234 0 90 4 234 0 99 4 234 0 105 4 234 0 108 4 234 0 110 4 234 0 115 4 234 0 116 4 234 0 118 4 234 0 121 4 234 0 123 4 234 0 125 4 234 0 130 4 234 0 146 4 234 0 150 4 234 0 151 4 234 0 152 4 234 0 171 4 234 0 177 4 234 0 179 4 234 0 186 4 234 0 188 4 234 0 190 4 234 0 201 4 234 0 207 4 234 0 209 4 234 0 210 4 234 0 211 4 234 0 212 4 234 0 214 4 234 0 215 12 189 0 234 12 193 2 105] 
#[0 12 197 0 14] 
#[1 0 7 0 5 1 27 0 6 1 27 0 14 0 230 0 29 1 27 0 215 12 201 0 235 2 53 1 46 2 57 1 47 12 205 2 36 12 209 2 37] 
#[0 4 242 0 6 0 215] 
#[1 12 213 0 6 3 153 0 215 12 213 0 236] 
#[0 4 246 0 6 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 12 217 0 234] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 12 221 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 12 225 0 122 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 12 229 2 23 12 229 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 12 229 2 30 12 229 2 31 4 13 2 32 12 229 2 39 12 229 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 12 233 2 57 12 237 2 60 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 12 229 2 73 12 229 2 74 12 229 2 75 12 229 2 76 12 229 2 77 12 229 2 78 12 229 2 79 12 229 2 80 12 229 2 81 12 229 2 82 12 229 2 83 12 229 2 84 12 229 2 85 12 229 2 86 12 229 2 87 12 229 2 88 12 229 2 89 12 229 2 90 12 229 2 91 12 229 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 12 229 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 12 229 2 135] 
#[1 3 149 0 213 3 201 0 237 12 241 2 62] 
#[1 3 1 0 1 2 45 0 5 12 249 0 6 3 9 0 9 2 241 0 11 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 12 245 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 37 0 228 3 189 0 229 4 217 0 234 3 193 0 235 12 249 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 4 225 1 90 4 229 1 91 12 253 1 167 13 1 1 170 13 5 2 23 13 5 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 5 2 30 13 5 2 31 4 13 2 32 13 5 2 39 13 5 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 13 9 2 46 9 53 2 47 9 57 2 50 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 5 2 73 13 5 2 74 13 5 2 75 13 5 2 76 13 5 2 77 13 5 2 78 13 5 2 79 13 5 2 80 13 5 2 81 13 5 2 82 13 5 2 83 13 5 2 84 13 5 2 85 13 5 2 86 13 5 2 87 13 5 2 88 13 5 2 89 13 5 2 90 13 5 2 91 13 5 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 5 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 5 2 135] 
#[0 4 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 3 149 0 213 3 201 0 237 13 13 2 62] 
#[0 4 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 5 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 13 17 0 234] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 13 21 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 13 25 1 41 13 29 1 42 13 29 1 43 13 29 1 44 13 29 1 51 13 29 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 25 1 86 8 213 2 23 8 213 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 213 2 30 8 213 2 31 4 13 2 32 8 213 2 39 8 213 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 213 2 73 8 213 2 74 8 213 2 75 8 213 2 76 8 213 2 77 8 213 2 78 8 213 2 79 8 213 2 80 8 213 2 81 8 213 2 82 8 213 2 83 8 213 2 84 8 213 2 85 8 213 2 86 8 213 2 87 8 213 2 88 8 213 2 89 8 213 2 90 8 213 2 91 8 213 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 213 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 213 2 135] 
#[0 5 14 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 5 18 0 6 0 11 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 13 33 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86] 
#[0 5 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 11 5 34 0 214 5 34 0 215 13 37 0 234 13 41 2 64] 
#[0 5 38 0 6 0 215] 
#[1 3 185 0 228 13 45 1 11] 
#[0 5 42 0 6 0 11 0 215] 
#[1 3 1 0 1 2 45 0 5 5 46 0 6 3 9 0 9 5 46 0 11 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 5 46 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 13 49 1 12 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 13 49 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 5 50 0 6 0 11 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 53 2 23 13 53 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 53 2 30 13 53 2 31 4 13 2 32 13 53 2 39 13 53 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 53 2 73 13 53 2 74 13 53 2 75 13 53 2 76 13 53 2 77 13 53 2 78 13 53 2 79 13 53 2 80 13 53 2 81 13 53 2 82 13 53 2 83 13 53 2 84 13 53 2 85 13 53 2 86 13 53 2 87 13 53 2 88 13 53 2 89 13 53 2 90 13 53 2 91 13 53 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 53 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 53 2 135] 
#[1 5 54 0 3 5 54 0 4 5 54 0 5 5 54 0 6 6 61 0 7 5 54 0 8 6 65 0 9 5 54 0 10 5 54 0 11 6 69 0 12 5 54 0 13 6 73 0 15 5 54 0 16 5 54 0 17 5 54 0 19 5 54 0 20 5 54 0 21 5 54 0 22 5 54 0 23 5 54 0 24 5 54 0 25 5 54 0 26 5 54 0 27 5 54 0 28 5 54 0 32 5 54 0 34 5 54 0 35 5 54 0 38 5 54 0 45 5 54 0 80 5 54 0 83 5 54 0 87 5 54 0 90 5 54 0 99 5 54 0 105 5 54 0 108 5 54 0 110 5 54 0 115 5 54 0 116 5 54 0 118 5 54 0 121 5 54 0 123 5 54 0 125 6 129 0 130 5 54 0 146 5 54 0 150 5 54 0 151 5 54 0 152 5 54 0 171 5 54 0 177 5 54 0 179 5 54 0 186 5 54 0 188 5 54 0 190 5 54 0 201 5 54 0 207 6 145 0 209 5 54 0 210 6 149 0 211 5 54 0 212 5 54 0 214 5 54 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 57 2 23 13 57 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 57 2 30 13 57 2 31 4 13 2 32 13 57 2 39 13 57 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 57 2 73 13 57 2 74 13 57 2 75 13 57 2 76 13 57 2 77 13 57 2 78 13 57 2 79 13 57 2 80 13 57 2 81 13 57 2 82 13 57 2 83 13 57 2 84 13 57 2 85 13 57 2 86 13 57 2 87 13 57 2 88 13 57 2 89 13 57 2 90 13 57 2 91 13 57 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 57 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 57 2 135] 
#[1 5 58 0 3 5 58 0 4 5 58 0 5 5 58 0 6 5 58 0 7 5 58 0 8 5 58 0 9 5 58 0 10 5 58 0 11 5 58 0 12 5 58 0 13 5 58 0 15 5 58 0 16 5 58 0 17 5 58 0 19 5 58 0 20 5 58 0 21 5 58 0 22 5 58 0 23 5 58 0 24 5 58 0 25 5 58 0 26 5 58 0 27 5 58 0 28 5 58 0 32 5 58 0 34 5 58 0 35 5 58 0 38 5 58 0 45 5 58 0 80 5 58 0 83 5 58 0 87 5 58 0 90 5 58 0 99 5 58 0 105 5 58 0 108 5 58 0 110 5 58 0 115 5 58 0 116 5 58 0 118 5 58 0 121 5 58 0 123 5 58 0 125 5 58 0 130 5 58 0 146 5 58 0 150 5 58 0 151 5 58 0 152 5 58 0 171 5 58 0 177 5 58 0 179 5 58 0 186 5 58 0 188 5 58 0 190 5 58 0 201 5 58 0 207 5 58 0 209 5 58 0 210 6 149 0 211 5 58 0 212 5 58 0 214 5 58 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 61 2 23 13 61 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 61 2 30 13 61 2 31 4 13 2 32 13 61 2 39 13 61 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 61 2 73 13 61 2 74 13 61 2 75 13 61 2 76 13 61 2 77 13 61 2 78 13 61 2 79 13 61 2 80 13 61 2 81 13 61 2 82 13 61 2 83 13 61 2 84 13 61 2 85 13 61 2 86 13 61 2 87 13 61 2 88 13 61 2 89 13 61 2 90 13 61 2 91 13 61 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 61 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 61 2 135] 
#[1 5 62 0 3 5 62 0 4 5 62 0 5 5 62 0 6 6 61 0 7 5 62 0 8 5 62 0 9 5 62 0 10 5 62 0 11 5 62 0 12 5 62 0 13 6 73 0 15 5 62 0 16 5 62 0 17 5 62 0 19 5 62 0 20 5 62 0 21 5 62 0 22 5 62 0 23 5 62 0 24 5 62 0 25 5 62 0 26 5 62 0 27 5 62 0 28 5 62 0 32 5 62 0 34 5 62 0 35 5 62 0 38 5 62 0 45 5 62 0 80 5 62 0 83 5 62 0 87 5 62 0 90 5 62 0 99 5 62 0 105 5 62 0 108 5 62 0 110 5 62 0 115 5 62 0 116 5 62 0 118 5 62 0 121 5 62 0 123 5 62 0 125 6 129 0 130 5 62 0 146 5 62 0 150 5 62 0 151 5 62 0 152 5 62 0 171 5 62 0 177 5 62 0 179 5 62 0 186 5 62 0 188 5 62 0 190 5 62 0 201 5 62 0 207 6 145 0 209 5 62 0 210 6 149 0 211 5 62 0 212 5 62 0 214 5 62 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 65 2 23 13 65 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 65 2 30 13 65 2 31 4 13 2 32 13 65 2 39 13 65 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 65 2 73 13 65 2 74 13 65 2 75 13 65 2 76 13 65 2 77 13 65 2 78 13 65 2 79 13 65 2 80 13 65 2 81 13 65 2 82 13 65 2 83 13 65 2 84 13 65 2 85 13 65 2 86 13 65 2 87 13 65 2 88 13 65 2 89 13 65 2 90 13 65 2 91 13 65 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 65 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 65 2 135] 
#[1 5 66 0 3 5 66 0 4 5 66 0 5 5 66 0 6 6 61 0 7 5 66 0 8 5 66 0 9 5 66 0 10 5 66 0 11 5 66 0 12 5 66 0 13 6 73 0 15 5 66 0 16 5 66 0 17 5 66 0 19 5 66 0 20 5 66 0 21 5 66 0 22 5 66 0 23 5 66 0 24 5 66 0 25 5 66 0 26 5 66 0 27 5 66 0 28 5 66 0 32 5 66 0 34 5 66 0 35 5 66 0 38 5 66 0 45 5 66 0 80 5 66 0 83 5 66 0 87 5 66 0 90 5 66 0 99 5 66 0 105 5 66 0 108 5 66 0 110 5 66 0 115 5 66 0 116 5 66 0 118 5 66 0 121 5 66 0 123 5 66 0 125 6 129 0 130 5 66 0 146 5 66 0 150 5 66 0 151 5 66 0 152 5 66 0 171 5 66 0 177 5 66 0 179 5 66 0 186 5 66 0 188 5 66 0 190 5 66 0 201 5 66 0 207 6 145 0 209 5 66 0 210 6 149 0 211 5 66 0 212 5 66 0 214 5 66 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 69 2 23 13 69 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 69 2 30 13 69 2 31 4 13 2 32 13 69 2 39 13 69 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 69 2 73 13 69 2 74 13 69 2 75 13 69 2 76 13 69 2 77 13 69 2 78 13 69 2 79 13 69 2 80 13 69 2 81 13 69 2 82 13 69 2 83 13 69 2 84 13 69 2 85 13 69 2 86 13 69 2 87 13 69 2 88 13 69 2 89 13 69 2 90 13 69 2 91 13 69 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 69 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 69 2 135] 
#[1 5 70 0 3 5 70 0 4 5 70 0 5 5 70 0 6 5 70 0 7 5 70 0 8 5 70 0 9 5 70 0 10 5 70 0 11 5 70 0 12 5 70 0 13 5 70 0 15 5 70 0 16 5 70 0 17 5 70 0 19 5 70 0 20 5 70 0 21 5 70 0 22 5 70 0 23 5 70 0 24 5 70 0 25 5 70 0 26 5 70 0 27 5 70 0 28 5 70 0 32 5 70 0 34 5 70 0 35 5 70 0 38 5 70 0 45 5 70 0 80 5 70 0 83 5 70 0 87 5 70 0 90 5 70 0 99 5 70 0 105 5 70 0 108 5 70 0 110 5 70 0 115 5 70 0 116 5 70 0 118 5 70 0 121 5 70 0 123 5 70 0 125 5 70 0 130 5 70 0 146 5 70 0 150 5 70 0 151 5 70 0 152 5 70 0 171 5 70 0 177 5 70 0 179 5 70 0 186 5 70 0 188 5 70 0 190 5 70 0 201 5 70 0 207 5 70 0 209 5 70 0 210 6 149 0 211 5 70 0 212 5 70 0 214 5 70 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 73 2 23 13 73 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 73 2 30 13 73 2 31 4 13 2 32 13 73 2 39 13 73 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 73 2 73 13 73 2 74 13 73 2 75 13 73 2 76 13 73 2 77 13 73 2 78 13 73 2 79 13 73 2 80 13 73 2 81 13 73 2 82 13 73 2 83 13 73 2 84 13 73 2 85 13 73 2 86 13 73 2 87 13 73 2 88 13 73 2 89 13 73 2 90 13 73 2 91 13 73 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 73 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 73 2 135] 
#[1 6 57 0 3 5 74 0 4 5 74 0 5 5 74 0 6 6 61 0 7 5 74 0 8 6 65 0 9 5 74 0 10 5 74 0 11 6 69 0 12 5 74 0 13 6 73 0 15 5 74 0 16 5 74 0 17 6 81 0 20 5 74 0 21 6 105 0 27 5 74 0 28 5 74 0 32 5 74 0 34 5 74 0 35 5 74 0 38 5 74 0 45 5 74 0 80 5 74 0 83 5 74 0 87 5 74 0 90 5 74 0 99 5 74 0 105 5 74 0 108 5 74 0 110 5 74 0 115 5 74 0 121 5 74 0 123 6 129 0 130 5 74 0 146 5 74 0 150 5 74 0 151 5 74 0 152 5 74 0 171 5 74 0 177 5 74 0 179 5 74 0 186 5 74 0 188 5 74 0 190 5 74 0 201 5 74 0 207 6 145 0 209 5 74 0 210 6 149 0 211 5 74 0 212 5 74 0 214 5 74 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 77 2 23 13 77 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 77 2 30 13 77 2 31 4 13 2 32 13 77 2 39 13 77 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 77 2 73 13 77 2 74 13 77 2 75 13 77 2 76 13 77 2 77 13 77 2 78 13 77 2 79 13 77 2 80 13 77 2 81 13 77 2 82 13 77 2 83 13 77 2 84 13 77 2 85 13 77 2 86 13 77 2 87 13 77 2 88 13 77 2 89 13 77 2 90 13 77 2 91 13 77 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 77 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 77 2 135] 
#[1 6 57 0 3 5 78 0 4 5 78 0 5 5 78 0 6 6 61 0 7 5 78 0 8 6 65 0 9 5 78 0 10 5 78 0 11 6 69 0 12 5 78 0 13 6 73 0 15 5 78 0 16 5 78 0 17 5 78 0 19 5 78 0 20 5 78 0 21 5 78 0 22 5 78 0 23 5 78 0 24 5 78 0 25 5 78 0 26 5 78 0 27 5 78 0 28 5 78 0 32 5 78 0 34 5 78 0 35 5 78 0 38 5 78 0 45 5 78 0 80 5 78 0 83 5 78 0 87 5 78 0 90 5 78 0 99 5 78 0 105 5 78 0 108 5 78 0 110 5 78 0 115 5 78 0 116 5 78 0 118 5 78 0 121 5 78 0 123 5 78 0 125 6 129 0 130 5 78 0 146 5 78 0 150 5 78 0 151 5 78 0 152 5 78 0 171 5 78 0 177 5 78 0 179 5 78 0 186 5 78 0 188 5 78 0 190 5 78 0 201 5 78 0 207 6 145 0 209 5 78 0 210 6 149 0 211 5 78 0 212 5 78 0 214 5 78 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 81 2 23 13 81 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 81 2 30 13 81 2 31 4 13 2 32 13 81 2 39 13 81 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 81 2 73 13 81 2 74 13 81 2 75 13 81 2 76 13 81 2 77 13 81 2 78 13 81 2 79 13 81 2 80 13 81 2 81 13 81 2 82 13 81 2 83 13 81 2 84 13 81 2 85 13 81 2 86 13 81 2 87 13 81 2 88 13 81 2 89 13 81 2 90 13 81 2 91 13 81 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 81 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 81 2 135] 
#[1 6 57 0 3 5 82 0 4 5 82 0 5 5 82 0 6 6 61 0 7 5 82 0 8 6 65 0 9 5 82 0 10 5 82 0 11 6 69 0 12 5 82 0 13 6 73 0 15 5 82 0 16 5 82 0 17 6 81 0 20 5 82 0 21 6 105 0 27 5 82 0 28 5 82 0 32 5 82 0 34 5 82 0 35 5 82 0 38 5 82 0 45 5 82 0 80 5 82 0 83 5 82 0 87 5 82 0 90 5 82 0 99 5 82 0 105 5 82 0 108 5 82 0 110 5 82 0 115 5 82 0 121 5 82 0 123 6 129 0 130 5 82 0 146 5 82 0 150 5 82 0 151 5 82 0 152 5 82 0 171 5 82 0 177 5 82 0 179 5 82 0 186 5 82 0 188 5 82 0 190 5 82 0 201 5 82 0 207 6 145 0 209 5 82 0 210 6 149 0 211 5 82 0 212 5 82 0 214 5 82 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 85 2 23 13 85 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 85 2 30 13 85 2 31 4 13 2 32 13 85 2 39 13 85 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 85 2 73 13 85 2 74 13 85 2 75 13 85 2 76 13 85 2 77 13 85 2 78 13 85 2 79 13 85 2 80 13 85 2 81 13 85 2 82 13 85 2 83 13 85 2 84 13 85 2 85 13 85 2 86 13 85 2 87 13 85 2 88 13 85 2 89 13 85 2 90 13 85 2 91 13 85 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 85 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 85 2 135] 
#[1 6 57 0 3 5 86 0 4 5 86 0 5 5 86 0 6 6 61 0 7 5 86 0 8 6 65 0 9 5 86 0 10 5 86 0 11 6 69 0 12 5 86 0 13 6 73 0 15 5 86 0 16 5 86 0 17 6 81 0 20 5 86 0 21 6 105 0 27 5 86 0 28 5 86 0 32 5 86 0 34 5 86 0 35 5 86 0 38 5 86 0 45 5 86 0 80 5 86 0 83 5 86 0 87 5 86 0 90 5 86 0 99 5 86 0 105 5 86 0 108 5 86 0 110 5 86 0 115 5 86 0 121 5 86 0 123 6 129 0 130 5 86 0 146 5 86 0 150 5 86 0 151 5 86 0 152 5 86 0 171 5 86 0 177 5 86 0 179 5 86 0 186 5 86 0 188 5 86 0 190 5 86 0 201 5 86 0 207 6 145 0 209 5 86 0 210 6 149 0 211 5 86 0 212 5 86 0 214 5 86 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 89 2 23 13 89 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 89 2 30 13 89 2 31 4 13 2 32 13 89 2 39 13 89 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 89 2 73 13 89 2 74 13 89 2 75 13 89 2 76 13 89 2 77 13 89 2 78 13 89 2 79 13 89 2 80 13 89 2 81 13 89 2 82 13 89 2 83 13 89 2 84 13 89 2 85 13 89 2 86 13 89 2 87 13 89 2 88 13 89 2 89 13 89 2 90 13 89 2 91 13 89 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 89 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 89 2 135] 
#[1 6 57 0 3 5 90 0 4 5 90 0 5 5 90 0 6 6 61 0 7 5 90 0 8 6 65 0 9 5 90 0 10 5 90 0 11 6 69 0 12 5 90 0 13 6 73 0 15 5 90 0 16 5 90 0 17 6 81 0 20 5 90 0 21 6 105 0 27 5 90 0 28 5 90 0 32 5 90 0 34 5 90 0 35 5 90 0 38 5 90 0 45 5 90 0 80 5 90 0 83 5 90 0 87 5 90 0 90 5 90 0 99 5 90 0 105 5 90 0 108 5 90 0 110 5 90 0 115 5 90 0 121 5 90 0 123 6 129 0 130 5 90 0 146 5 90 0 150 5 90 0 151 5 90 0 152 5 90 0 171 5 90 0 177 5 90 0 179 5 90 0 186 5 90 0 188 5 90 0 190 5 90 0 201 5 90 0 207 6 145 0 209 5 90 0 210 6 149 0 211 5 90 0 212 5 90 0 214 5 90 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 93 2 23 13 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 93 2 30 13 93 2 31 4 13 2 32 13 93 2 39 13 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 93 2 73 13 93 2 74 13 93 2 75 13 93 2 76 13 93 2 77 13 93 2 78 13 93 2 79 13 93 2 80 13 93 2 81 13 93 2 82 13 93 2 83 13 93 2 84 13 93 2 85 13 93 2 86 13 93 2 87 13 93 2 88 13 93 2 89 13 93 2 90 13 93 2 91 13 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 93 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 93 2 135] 
#[1 6 57 0 3 5 94 0 4 5 94 0 5 5 94 0 6 6 61 0 7 5 94 0 8 6 65 0 9 5 94 0 10 5 94 0 11 6 69 0 12 5 94 0 13 6 73 0 15 5 94 0 16 5 94 0 17 6 81 0 20 5 94 0 21 6 105 0 27 5 94 0 28 5 94 0 32 5 94 0 34 5 94 0 35 5 94 0 38 5 94 0 45 5 94 0 80 5 94 0 83 5 94 0 87 5 94 0 90 5 94 0 99 5 94 0 105 5 94 0 108 5 94 0 110 5 94 0 115 5 94 0 121 5 94 0 123 6 129 0 130 5 94 0 146 5 94 0 150 5 94 0 151 5 94 0 152 5 94 0 171 5 94 0 177 5 94 0 179 5 94 0 186 5 94 0 188 5 94 0 190 5 94 0 201 5 94 0 207 6 145 0 209 5 94 0 210 6 149 0 211 5 94 0 212 5 94 0 214 5 94 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 97 2 23 13 97 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 97 2 30 13 97 2 31 4 13 2 32 13 97 2 39 13 97 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 97 2 73 13 97 2 74 13 97 2 75 13 97 2 76 13 97 2 77 13 97 2 78 13 97 2 79 13 97 2 80 13 97 2 81 13 97 2 82 13 97 2 83 13 97 2 84 13 97 2 85 13 97 2 86 13 97 2 87 13 97 2 88 13 97 2 89 13 97 2 90 13 97 2 91 13 97 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 97 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 97 2 135] 
#[1 6 57 0 3 5 98 0 4 5 98 0 5 5 98 0 6 6 61 0 7 5 98 0 8 6 65 0 9 5 98 0 10 5 98 0 11 6 69 0 12 5 98 0 13 6 73 0 15 5 98 0 16 5 98 0 17 6 81 0 20 5 98 0 21 6 105 0 27 5 98 0 28 5 98 0 32 5 98 0 34 5 98 0 35 5 98 0 38 5 98 0 45 5 98 0 80 5 98 0 83 5 98 0 87 5 98 0 90 5 98 0 99 5 98 0 105 5 98 0 108 5 98 0 110 5 98 0 115 5 98 0 121 5 98 0 123 6 129 0 130 5 98 0 146 5 98 0 150 5 98 0 151 5 98 0 152 5 98 0 171 5 98 0 177 5 98 0 179 5 98 0 186 5 98 0 188 5 98 0 190 5 98 0 201 5 98 0 207 6 145 0 209 5 98 0 210 6 149 0 211 5 98 0 212 5 98 0 214 5 98 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 101 2 23 13 101 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 101 2 30 13 101 2 31 4 13 2 32 13 101 2 39 13 101 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 101 2 73 13 101 2 74 13 101 2 75 13 101 2 76 13 101 2 77 13 101 2 78 13 101 2 79 13 101 2 80 13 101 2 81 13 101 2 82 13 101 2 83 13 101 2 84 13 101 2 85 13 101 2 86 13 101 2 87 13 101 2 88 13 101 2 89 13 101 2 90 13 101 2 91 13 101 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 101 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 101 2 135] 
#[1 6 57 0 3 5 102 0 4 5 102 0 5 5 102 0 6 6 61 0 7 5 102 0 8 6 65 0 9 5 102 0 10 5 102 0 11 6 69 0 12 5 102 0 13 6 73 0 15 5 102 0 16 5 102 0 17 5 102 0 19 5 102 0 20 5 102 0 21 5 102 0 22 5 102 0 23 5 102 0 24 5 102 0 25 5 102 0 26 5 102 0 27 5 102 0 28 5 102 0 32 5 102 0 34 5 102 0 35 5 102 0 38 5 102 0 45 5 102 0 80 5 102 0 83 5 102 0 87 5 102 0 90 5 102 0 99 5 102 0 105 5 102 0 108 5 102 0 110 5 102 0 115 5 102 0 116 5 102 0 118 5 102 0 121 5 102 0 123 5 102 0 125 6 129 0 130 5 102 0 146 5 102 0 150 5 102 0 151 5 102 0 152 5 102 0 171 5 102 0 177 5 102 0 179 5 102 0 186 5 102 0 188 5 102 0 190 5 102 0 201 5 102 0 207 6 145 0 209 5 102 0 210 6 149 0 211 5 102 0 212 5 102 0 214 5 102 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 105 2 23 13 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 105 2 30 13 105 2 31 4 13 2 32 13 105 2 39 13 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 105 2 73 13 105 2 74 13 105 2 75 13 105 2 76 13 105 2 77 13 105 2 78 13 105 2 79 13 105 2 80 13 105 2 81 13 105 2 82 13 105 2 83 13 105 2 84 13 105 2 85 13 105 2 86 13 105 2 87 13 105 2 88 13 105 2 89 13 105 2 90 13 105 2 91 13 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 105 2 135] 
#[1 6 57 0 3 5 106 0 4 5 106 0 5 5 106 0 6 6 61 0 7 5 106 0 8 6 65 0 9 5 106 0 10 5 106 0 11 6 69 0 12 5 106 0 13 6 73 0 15 5 106 0 16 5 106 0 17 6 77 0 19 6 81 0 20 5 106 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 5 106 0 28 5 106 0 32 5 106 0 34 5 106 0 35 5 106 0 38 5 106 0 45 5 106 0 80 5 106 0 83 5 106 0 87 5 106 0 90 5 106 0 99 5 106 0 105 5 106 0 108 5 106 0 110 5 106 0 115 6 117 0 116 6 121 0 118 5 106 0 121 5 106 0 123 6 125 0 125 6 129 0 130 5 106 0 146 5 106 0 150 5 106 0 151 5 106 0 152 5 106 0 171 5 106 0 177 5 106 0 179 5 106 0 186 5 106 0 188 5 106 0 190 5 106 0 201 5 106 0 207 6 145 0 209 5 106 0 210 6 149 0 211 5 106 0 212 5 106 0 214 5 106 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 109 2 23 13 109 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 109 2 30 13 109 2 31 4 13 2 32 13 109 2 39 13 109 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 109 2 73 13 109 2 74 13 109 2 75 13 109 2 76 13 109 2 77 13 109 2 78 13 109 2 79 13 109 2 80 13 109 2 81 13 109 2 82 13 109 2 83 13 109 2 84 13 109 2 85 13 109 2 86 13 109 2 87 13 109 2 88 13 109 2 89 13 109 2 90 13 109 2 91 13 109 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 109 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 109 2 135] 
#[1 6 57 0 3 5 110 0 4 5 110 0 5 5 110 0 6 6 61 0 7 5 110 0 8 6 65 0 9 5 110 0 10 5 110 0 11 6 69 0 12 5 110 0 13 6 73 0 15 5 110 0 16 5 110 0 17 6 77 0 19 6 81 0 20 5 110 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 5 110 0 28 5 110 0 32 5 110 0 34 5 110 0 35 5 110 0 38 5 110 0 45 5 110 0 80 5 110 0 83 5 110 0 87 5 110 0 90 5 110 0 99 5 110 0 105 5 110 0 108 5 110 0 110 5 110 0 115 6 117 0 116 6 121 0 118 5 110 0 121 5 110 0 123 6 125 0 125 6 129 0 130 5 110 0 146 5 110 0 150 5 110 0 151 5 110 0 152 5 110 0 171 5 110 0 177 5 110 0 179 5 110 0 186 5 110 0 188 5 110 0 190 5 110 0 201 5 110 0 207 6 145 0 209 5 110 0 210 6 149 0 211 5 110 0 212 5 110 0 214 5 110 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 113 2 23 13 113 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 113 2 30 13 113 2 31 4 13 2 32 13 113 2 39 13 113 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 113 2 73 13 113 2 74 13 113 2 75 13 113 2 76 13 113 2 77 13 113 2 78 13 113 2 79 13 113 2 80 13 113 2 81 13 113 2 82 13 113 2 83 13 113 2 84 13 113 2 85 13 113 2 86 13 113 2 87 13 113 2 88 13 113 2 89 13 113 2 90 13 113 2 91 13 113 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 113 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 113 2 135] 
#[1 6 57 0 3 5 114 0 4 5 114 0 5 5 114 0 6 6 61 0 7 5 114 0 8 6 65 0 9 5 114 0 10 5 114 0 11 6 69 0 12 5 114 0 13 6 73 0 15 5 114 0 16 5 114 0 17 6 81 0 20 5 114 0 21 6 105 0 27 5 114 0 28 5 114 0 32 5 114 0 34 5 114 0 35 5 114 0 38 5 114 0 45 5 114 0 80 5 114 0 83 5 114 0 87 5 114 0 90 5 114 0 99 5 114 0 105 5 114 0 108 5 114 0 110 5 114 0 115 5 114 0 121 5 114 0 123 6 129 0 130 5 114 0 146 5 114 0 150 5 114 0 151 5 114 0 152 5 114 0 171 5 114 0 177 5 114 0 179 5 114 0 186 5 114 0 188 5 114 0 190 5 114 0 201 5 114 0 207 6 145 0 209 5 114 0 210 6 149 0 211 5 114 0 212 5 114 0 214 5 114 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 117 2 23 13 117 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 117 2 30 13 117 2 31 4 13 2 32 13 117 2 39 13 117 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 117 2 73 13 117 2 74 13 117 2 75 13 117 2 76 13 117 2 77 13 117 2 78 13 117 2 79 13 117 2 80 13 117 2 81 13 117 2 82 13 117 2 83 13 117 2 84 13 117 2 85 13 117 2 86 13 117 2 87 13 117 2 88 13 117 2 89 13 117 2 90 13 117 2 91 13 117 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 117 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 117 2 135] 
#[1 6 57 0 3 5 118 0 4 5 118 0 5 5 118 0 6 6 61 0 7 5 118 0 8 6 65 0 9 5 118 0 10 5 118 0 11 6 69 0 12 5 118 0 13 6 73 0 15 5 118 0 16 5 118 0 17 6 81 0 20 5 118 0 21 6 105 0 27 5 118 0 28 5 118 0 32 5 118 0 34 5 118 0 35 5 118 0 38 5 118 0 45 5 118 0 80 5 118 0 83 5 118 0 87 5 118 0 90 5 118 0 99 5 118 0 105 5 118 0 108 5 118 0 110 5 118 0 115 5 118 0 121 5 118 0 123 6 129 0 130 5 118 0 146 5 118 0 150 5 118 0 151 5 118 0 152 5 118 0 171 5 118 0 177 5 118 0 179 5 118 0 186 5 118 0 188 5 118 0 190 5 118 0 201 5 118 0 207 6 145 0 209 5 118 0 210 6 149 0 211 5 118 0 212 5 118 0 214 5 118 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 121 2 23 13 121 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 121 2 30 13 121 2 31 4 13 2 32 13 121 2 39 13 121 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 121 2 73 13 121 2 74 13 121 2 75 13 121 2 76 13 121 2 77 13 121 2 78 13 121 2 79 13 121 2 80 13 121 2 81 13 121 2 82 13 121 2 83 13 121 2 84 13 121 2 85 13 121 2 86 13 121 2 87 13 121 2 88 13 121 2 89 13 121 2 90 13 121 2 91 13 121 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 121 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 121 2 135] 
#[1 6 57 0 3 5 122 0 4 5 122 0 5 5 122 0 6 6 61 0 7 5 122 0 8 6 65 0 9 5 122 0 10 5 122 0 11 6 69 0 12 5 122 0 13 6 73 0 15 5 122 0 16 5 122 0 17 6 81 0 20 5 122 0 21 6 105 0 27 5 122 0 28 5 122 0 32 5 122 0 34 5 122 0 35 5 122 0 38 5 122 0 45 5 122 0 80 5 122 0 83 5 122 0 87 5 122 0 90 5 122 0 99 5 122 0 105 5 122 0 108 5 122 0 110 5 122 0 115 5 122 0 121 5 122 0 123 6 129 0 130 5 122 0 146 5 122 0 150 5 122 0 151 5 122 0 152 5 122 0 171 5 122 0 177 5 122 0 179 5 122 0 186 5 122 0 188 5 122 0 190 5 122 0 201 5 122 0 207 6 145 0 209 5 122 0 210 6 149 0 211 5 122 0 212 5 122 0 214 5 122 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 125 2 23 13 125 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 125 2 30 13 125 2 31 4 13 2 32 13 125 2 39 13 125 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 125 2 73 13 125 2 74 13 125 2 75 13 125 2 76 13 125 2 77 13 125 2 78 13 125 2 79 13 125 2 80 13 125 2 81 13 125 2 82 13 125 2 83 13 125 2 84 13 125 2 85 13 125 2 86 13 125 2 87 13 125 2 88 13 125 2 89 13 125 2 90 13 125 2 91 13 125 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 125 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 125 2 135] 
#[1 5 126 0 3 5 126 0 4 5 126 0 5 5 126 0 6 6 61 0 7 5 126 0 8 5 126 0 9 5 126 0 10 5 126 0 11 5 126 0 12 5 126 0 13 6 73 0 15 5 126 0 16 5 126 0 17 5 126 0 19 5 126 0 20 5 126 0 21 5 126 0 22 5 126 0 23 5 126 0 24 5 126 0 25 5 126 0 26 5 126 0 27 5 126 0 28 5 126 0 32 5 126 0 34 5 126 0 35 5 126 0 38 5 126 0 45 5 126 0 80 5 126 0 83 5 126 0 87 5 126 0 90 5 126 0 99 5 126 0 105 5 126 0 108 5 126 0 110 5 126 0 115 5 126 0 116 5 126 0 118 5 126 0 121 5 126 0 123 5 126 0 125 5 126 0 130 5 126 0 146 5 126 0 150 5 126 0 151 5 126 0 152 5 126 0 171 5 126 0 177 5 126 0 179 5 126 0 186 5 126 0 188 5 126 0 190 5 126 0 201 5 126 0 207 6 145 0 209 5 126 0 210 6 149 0 211 5 126 0 212 5 126 0 214 5 126 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 129 2 23 13 129 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 129 2 30 13 129 2 31 4 13 2 32 13 129 2 39 13 129 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 129 2 73 13 129 2 74 13 129 2 75 13 129 2 76 13 129 2 77 13 129 2 78 13 129 2 79 13 129 2 80 13 129 2 81 13 129 2 82 13 129 2 83 13 129 2 84 13 129 2 85 13 129 2 86 13 129 2 87 13 129 2 88 13 129 2 89 13 129 2 90 13 129 2 91 13 129 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 129 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 129 2 135] 
#[1 6 57 0 3 5 130 0 4 5 130 0 5 5 130 0 6 6 61 0 7 5 130 0 8 6 65 0 9 5 130 0 10 5 130 0 11 6 69 0 12 5 130 0 13 6 73 0 15 5 130 0 16 5 130 0 17 6 77 0 19 6 81 0 20 5 130 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 5 130 0 28 5 130 0 32 6 109 0 34 6 113 0 35 5 130 0 38 5 130 0 45 5 130 0 80 5 130 0 83 5 130 0 87 5 130 0 90 5 130 0 99 5 130 0 105 5 130 0 108 5 130 0 110 5 130 0 115 6 117 0 116 6 121 0 118 5 130 0 121 5 130 0 123 6 125 0 125 6 129 0 130 5 130 0 146 5 130 0 150 5 130 0 151 5 130 0 152 5 130 0 171 5 130 0 177 5 130 0 179 5 130 0 186 5 130 0 188 5 130 0 190 5 130 0 201 5 130 0 207 6 145 0 209 5 130 0 210 6 149 0 211 5 130 0 212 5 130 0 214 5 130 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 133 2 23 13 133 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 133 2 30 13 133 2 31 4 13 2 32 13 133 2 39 13 133 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 133 2 73 13 133 2 74 13 133 2 75 13 133 2 76 13 133 2 77 13 133 2 78 13 133 2 79 13 133 2 80 13 133 2 81 13 133 2 82 13 133 2 83 13 133 2 84 13 133 2 85 13 133 2 86 13 133 2 87 13 133 2 88 13 133 2 89 13 133 2 90 13 133 2 91 13 133 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 133 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 133 2 135] 
#[1 6 57 0 3 5 134 0 4 5 134 0 5 5 134 0 6 6 61 0 7 5 134 0 8 6 65 0 9 5 134 0 10 5 134 0 11 6 69 0 12 5 134 0 13 6 73 0 15 5 134 0 16 5 134 0 17 6 77 0 19 6 81 0 20 5 134 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 5 134 0 28 5 134 0 32 6 109 0 34 6 113 0 35 5 134 0 38 5 134 0 45 5 134 0 80 5 134 0 83 5 134 0 87 5 134 0 90 5 134 0 99 5 134 0 105 5 134 0 108 5 134 0 110 5 134 0 115 6 117 0 116 6 121 0 118 5 134 0 121 5 134 0 123 6 125 0 125 6 129 0 130 5 134 0 146 5 134 0 150 5 134 0 151 5 134 0 152 5 134 0 171 5 134 0 177 5 134 0 179 5 134 0 186 5 134 0 188 5 134 0 190 5 134 0 201 5 134 0 207 6 145 0 209 5 134 0 210 6 149 0 211 5 134 0 212 5 134 0 214 5 134 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 137 2 23 13 137 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 137 2 30 13 137 2 31 4 13 2 32 13 137 2 39 13 137 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 137 2 73 13 137 2 74 13 137 2 75 13 137 2 76 13 137 2 77 13 137 2 78 13 137 2 79 13 137 2 80 13 137 2 81 13 137 2 82 13 137 2 83 13 137 2 84 13 137 2 85 13 137 2 86 13 137 2 87 13 137 2 88 13 137 2 89 13 137 2 90 13 137 2 91 13 137 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 137 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 137 2 135] 
#[1 6 57 0 3 5 138 0 4 5 138 0 5 5 138 0 6 6 61 0 7 5 138 0 8 6 65 0 9 5 138 0 10 5 138 0 11 6 69 0 12 5 138 0 13 6 73 0 15 5 138 0 16 5 138 0 17 6 77 0 19 6 81 0 20 5 138 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 5 138 0 28 5 138 0 32 6 109 0 34 6 113 0 35 5 138 0 38 5 138 0 45 5 138 0 80 5 138 0 83 5 138 0 87 5 138 0 90 5 138 0 99 5 138 0 105 5 138 0 108 5 138 0 110 5 138 0 115 6 117 0 116 6 121 0 118 5 138 0 121 5 138 0 123 6 125 0 125 6 129 0 130 5 138 0 146 6 133 0 150 6 137 0 151 5 138 0 152 5 138 0 171 5 138 0 177 5 138 0 179 5 138 0 186 5 138 0 188 5 138 0 190 5 138 0 201 5 138 0 207 6 145 0 209 5 138 0 210 6 149 0 211 5 138 0 212 5 138 0 214 5 138 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 141 2 23 13 141 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 141 2 30 13 141 2 31 4 13 2 32 13 141 2 39 13 141 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 141 2 73 13 141 2 74 13 141 2 75 13 141 2 76 13 141 2 77 13 141 2 78 13 141 2 79 13 141 2 80 13 141 2 81 13 141 2 82 13 141 2 83 13 141 2 84 13 141 2 85 13 141 2 86 13 141 2 87 13 141 2 88 13 141 2 89 13 141 2 90 13 141 2 91 13 141 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 141 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 141 2 135] 
#[1 5 142 0 3 5 142 0 4 5 142 0 5 5 142 0 6 6 61 0 7 5 142 0 8 5 142 0 9 5 142 0 10 5 142 0 11 5 142 0 12 5 142 0 13 6 73 0 15 5 142 0 16 5 142 0 17 5 142 0 19 5 142 0 20 5 142 0 21 5 142 0 22 5 142 0 23 5 142 0 24 5 142 0 25 5 142 0 26 5 142 0 27 5 142 0 28 5 142 0 32 5 142 0 34 5 142 0 35 5 142 0 38 5 142 0 45 5 142 0 80 5 142 0 83 5 142 0 87 5 142 0 90 5 142 0 99 5 142 0 105 5 142 0 108 5 142 0 110 5 142 0 115 5 142 0 116 5 142 0 118 5 142 0 121 5 142 0 123 5 142 0 125 5 142 0 130 5 142 0 146 5 142 0 150 5 142 0 151 5 142 0 152 5 142 0 171 5 142 0 177 5 142 0 179 5 142 0 186 5 142 0 188 5 142 0 190 5 142 0 201 5 142 0 207 5 142 0 209 5 142 0 210 6 149 0 211 5 142 0 212 5 142 0 214 5 142 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 145 2 23 13 145 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 145 2 30 13 145 2 31 4 13 2 32 13 145 2 39 13 145 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 145 2 73 13 145 2 74 13 145 2 75 13 145 2 76 13 145 2 77 13 145 2 78 13 145 2 79 13 145 2 80 13 145 2 81 13 145 2 82 13 145 2 83 13 145 2 84 13 145 2 85 13 145 2 86 13 145 2 87 13 145 2 88 13 145 2 89 13 145 2 90 13 145 2 91 13 145 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 145 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 145 2 135] 
#[1 5 146 0 3 5 146 0 4 5 146 0 5 5 146 0 6 5 146 0 7 5 146 0 8 5 146 0 9 5 146 0 10 5 146 0 11 5 146 0 12 5 146 0 13 5 146 0 15 5 146 0 16 5 146 0 17 5 146 0 19 5 146 0 20 5 146 0 21 5 146 0 22 5 146 0 23 5 146 0 24 5 146 0 25 5 146 0 26 5 146 0 27 5 146 0 28 5 146 0 32 5 146 0 34 5 146 0 35 5 146 0 38 5 146 0 45 5 146 0 80 5 146 0 83 5 146 0 87 5 146 0 90 5 146 0 99 5 146 0 105 5 146 0 108 5 146 0 110 5 146 0 115 5 146 0 116 5 146 0 118 5 146 0 121 5 146 0 123 5 146 0 125 5 146 0 130 5 146 0 146 5 146 0 150 5 146 0 151 5 146 0 152 5 146 0 171 5 146 0 177 5 146 0 179 5 146 0 186 5 146 0 188 5 146 0 190 5 146 0 201 5 146 0 207 5 146 0 209 5 146 0 210 6 149 0 211 5 146 0 212 5 146 0 214 5 146 0 215] 
#[0 13 149 0 228] 
#[1 5 150 0 1 5 150 0 3 5 150 0 4 1 31 0 5 5 150 0 6 5 150 0 7 5 150 0 8 5 150 0 9 5 150 0 10 5 150 0 11 5 150 0 12 5 150 0 13 5 150 0 14 5 150 0 15 5 150 0 16 5 150 0 17 5 150 0 19 5 150 0 20 5 150 0 21 5 150 0 22 5 150 0 23 5 150 0 24 5 150 0 25 5 150 0 26 5 150 0 27 5 150 0 28 5 150 0 32 5 150 0 34 5 150 0 35 5 150 0 38 5 150 0 45 5 150 0 80 5 150 0 83 5 150 0 87 5 150 0 90 5 150 0 99 5 150 0 105 5 150 0 108 5 150 0 110 5 150 0 115 5 150 0 116 5 150 0 118 5 150 0 121 5 150 0 123 5 150 0 125 5 150 0 130 5 150 0 146 5 150 0 150 5 150 0 151 5 150 0 152 5 150 0 171 5 150 0 177 5 150 0 179 5 150 0 186 5 150 0 188 5 150 0 190 5 150 0 201 5 150 0 207 5 150 0 209 5 150 0 210 5 150 0 211 5 150 0 212 5 150 0 214 5 150 0 215 13 153 0 235] 
#[0 5 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 253 0 18 13 157 0 240] 
#[0 5 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 5 162 0 6 6 61 0 7 6 65 0 9 5 162 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 5 162 0 215 13 161 2 49] 
#[1 13 165 0 6 3 153 0 215 13 165 0 236] 
#[1 5 166 0 6 2 241 0 11 5 166 0 215 13 169 0 234] 
#[0 5 170 0 6 0 215] 
#[1 6 57 0 3 13 173 0 6 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 13 173 0 236] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 13 177 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 177 1 86] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 13 181 1 193 13 185 1 195] 
#[1 3 1 0 1 2 45 0 5 13 189 0 6 3 9 0 9 3 13 0 12 3 17 0 14 0 73 0 19 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 4 174 0 46 4 174 0 47 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 4 174 0 149 4 174 0 157 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 1 35 0 229 3 193 0 235 13 189 0 236 3 201 0 237 3 245 0 241 11 161 0 252 0 89 0 253 0 93 0 254 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 193 1 126 11 169 1 129 11 173 1 130 6 9 2 23 6 9 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 6 9 2 30 6 9 2 31 4 13 2 32 6 9 2 39 6 9 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 6 9 2 73 6 9 2 74 6 9 2 75 6 9 2 76 6 9 2 77 6 9 2 78 6 9 2 79 6 9 2 80 6 9 2 81 6 9 2 82 6 9 2 83 6 9 2 84 6 9 2 85 6 9 2 86 6 9 2 87 6 9 2 88 6 9 2 89 6 9 2 90 6 9 2 91 6 9 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 6 9 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 6 9 2 135] 
#[1 6 57 0 3 5 178 0 4 5 178 0 5 5 178 0 6 6 61 0 7 5 178 0 8 6 65 0 9 5 178 0 10 5 178 0 11 6 69 0 12 5 178 0 13 6 73 0 15 5 178 0 16 5 178 0 17 6 77 0 19 6 81 0 20 5 178 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 5 178 0 28 5 178 0 32 6 109 0 34 6 113 0 35 5 178 0 38 5 178 0 45 5 178 0 80 5 178 0 83 5 178 0 87 5 178 0 90 5 178 0 99 5 178 0 105 5 178 0 108 5 178 0 110 5 178 0 115 6 117 0 116 6 121 0 118 5 178 0 121 5 178 0 123 6 125 0 125 6 129 0 130 5 178 0 146 6 133 0 150 6 137 0 151 5 178 0 152 5 178 0 171 5 178 0 177 5 178 0 179 5 178 0 186 5 178 0 188 5 178 0 190 5 178 0 201 6 141 0 207 6 145 0 209 5 178 0 210 6 149 0 211 5 178 0 212 5 178 0 214 5 178 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 197 2 23 13 197 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 197 2 30 13 197 2 31 4 13 2 32 13 197 2 39 13 197 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 197 2 73 13 197 2 74 13 197 2 75 13 197 2 76 13 197 2 77 13 197 2 78 13 197 2 79 13 197 2 80 13 197 2 81 13 197 2 82 13 197 2 83 13 197 2 84 13 197 2 85 13 197 2 86 13 197 2 87 13 197 2 88 13 197 2 89 13 197 2 90 13 197 2 91 13 197 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 197 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 197 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 201 2 23 13 201 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 201 2 30 13 201 2 31 4 13 2 32 13 201 2 39 13 201 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 201 2 73 13 201 2 74 13 201 2 75 13 201 2 76 13 201 2 77 13 201 2 78 13 201 2 79 13 201 2 80 13 201 2 81 13 201 2 82 13 201 2 83 13 201 2 84 13 201 2 85 13 201 2 86 13 201 2 87 13 201 2 88 13 201 2 89 13 201 2 90 13 201 2 91 13 201 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 201 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 201 2 135] 
#[0 5 182 0 229] 
#[0 13 217 0 84 0 97 0 202 2 6] 
#[0 5 186 0 229] 
#[1 13 233 0 198 13 233 0 202 13 229 0 215 13 233 1 237] 
#[0 5 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 237 2 17 13 241 2 23 13 241 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 241 2 30 13 241 2 31 4 13 2 32 13 241 2 39 13 241 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 241 2 73 13 241 2 74 13 241 2 75 13 241 2 76 13 241 2 77 13 241 2 78 13 241 2 79 13 241 2 80 13 241 2 81 13 241 2 82 13 241 2 83 13 241 2 84 13 241 2 85 13 241 2 86 13 241 2 87 13 241 2 88 13 241 2 89 13 241 2 90 13 241 2 91 13 241 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 241 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 241 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 245 2 23 13 245 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 245 2 30 13 245 2 31 4 13 2 32 13 245 2 39 13 245 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 245 2 73 13 245 2 74 13 245 2 75 13 245 2 76 13 245 2 77 13 245 2 78 13 245 2 79 13 245 2 80 13 245 2 81 13 245 2 82 13 245 2 83 13 245 2 84 13 245 2 85 13 245 2 86 13 245 2 87 13 245 2 88 13 245 2 89 13 245 2 90 13 245 2 91 13 245 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 245 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 245 2 135] 
#[0 14 25 0 84 0 97 0 100 0 161 0 171 0 184 0 191 0 202 2 4] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 14 29 0 86 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 14 33 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 37 1 239 14 41 2 23 14 41 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 41 2 30 14 41 2 31 4 13 2 32 14 41 2 39 14 41 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 41 2 73 14 41 2 74 14 41 2 75 14 41 2 76 14 41 2 77 14 41 2 78 14 41 2 79 14 41 2 80 14 41 2 81 14 41 2 82 14 41 2 83 14 41 2 84 14 41 2 85 14 41 2 86 14 41 2 87 14 41 2 88 14 41 2 89 14 41 2 90 14 41 2 91 14 41 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 41 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 41 2 135] 
#[0 14 49 0 221 0 229 1 197] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 14 53 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 57 2 23 14 57 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 57 2 30 14 57 2 31 4 13 2 32 14 57 2 39 14 57 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 57 2 73 14 57 2 74 14 57 2 75 14 57 2 76 14 57 2 77 14 57 2 78 14 57 2 79 14 57 2 80 14 57 2 81 14 57 2 82 14 57 2 83 14 57 2 84 14 57 2 85 14 57 2 86 14 57 2 87 14 57 2 88 14 57 2 89 14 57 2 90 14 57 2 91 14 57 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 57 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 57 2 135] 
#[1 14 61 0 2 2 45 0 5 14 65 0 235] 
#[0 14 69 0 92] 
#[0 14 73 0 228] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 14 77 0 159 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 81 2 12 14 85 2 15 14 89 2 23 14 89 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 89 2 30 14 89 2 31 4 13 2 32 14 89 2 39 14 89 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 89 2 73 14 89 2 74 14 89 2 75 14 89 2 76 14 89 2 77 14 89 2 78 14 89 2 79 14 89 2 80 14 89 2 81 14 89 2 82 14 89 2 83 14 89 2 84 14 89 2 85 14 89 2 86 14 89 2 87 14 89 2 88 14 89 2 89 14 89 2 90 14 89 2 91 14 89 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 89 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 89 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 93 2 23 14 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 93 2 30 14 93 2 31 4 13 2 32 14 93 2 39 14 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 93 2 73 14 93 2 74 14 93 2 75 14 93 2 76 14 93 2 77 14 93 2 78 14 93 2 79 14 93 2 80 14 93 2 81 14 93 2 82 14 93 2 83 14 93 2 84 14 93 2 85 14 93 2 86 14 93 2 87 14 93 2 88 14 93 2 89 14 93 2 90 14 93 2 91 14 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 93 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 93 2 135] 
#[1 5 194 0 3 5 194 0 4 5 194 0 5 5 194 0 6 5 194 0 7 5 194 0 8 5 194 0 9 5 194 0 10 5 194 0 11 5 194 0 12 5 194 0 13 5 194 0 15 5 194 0 16 5 194 0 17 5 194 0 19 5 194 0 20 5 194 0 21 5 194 0 22 5 194 0 23 5 194 0 24 5 194 0 25 5 194 0 26 5 194 0 27 5 194 0 28 5 194 0 32 5 194 0 34 5 194 0 35 5 194 0 38 5 194 0 45 5 194 0 80 5 194 0 83 5 194 0 87 5 194 0 90 5 194 0 99 5 194 0 105 5 194 0 108 5 194 0 110 5 194 0 115 5 194 0 116 5 194 0 118 5 194 0 121 5 194 0 123 5 194 0 125 5 194 0 130 14 105 0 139 5 194 0 146 5 194 0 150 5 194 0 151 5 194 0 152 5 194 0 171 5 194 0 177 5 194 0 179 5 194 0 186 5 194 0 188 5 194 0 190 5 194 0 201 5 194 0 207 5 194 0 209 5 194 0 210 5 194 0 211 5 194 0 212 5 194 0 214 5 194 0 215 14 105 0 221 14 105 0 229 14 105 1 197 14 105 2 0] 
#[1 3 1 0 1 5 198 0 3 5 198 0 4 1 39 0 5 5 198 0 6 5 198 0 7 5 198 0 8 3 9 0 9 5 198 0 10 5 198 0 11 3 13 0 12 5 198 0 13 3 17 0 14 5 198 0 15 5 198 0 16 5 198 0 17 5 198 0 19 5 198 0 20 5 198 0 21 5 198 0 22 5 198 0 23 5 198 0 24 5 198 0 25 5 198 0 26 5 198 0 27 5 198 0 28 3 21 0 31 1 43 0 32 5 198 0 34 5 198 0 35 5 198 0 38 1 206 0 40 3 29 0 42 1 57 0 44 5 198 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 5 198 0 80 3 101 0 82 5 198 0 83 1 57 0 85 5 198 0 87 5 198 0 90 1 47 0 99 1 206 0 100 3 109 0 102 3 113 0 103 5 198 0 105 3 117 0 107 5 198 0 108 5 198 0 110 1 57 0 113 5 198 0 115 5 198 0 116 5 198 0 118 1 206 0 120 5 198 0 121 5 198 0 123 5 198 0 125 1 57 0 126 3 121 0 128 5 198 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 5 198 0 146 5 198 0 150 5 198 0 151 5 198 0 152 1 57 0 170 5 198 0 171 1 57 0 175 1 57 0 176 5 198 0 177 5 198 0 179 1 57 0 182 1 206 0 184 5 198 0 186 5 198 0 188 5 198 0 190 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 5 198 0 201 5 198 0 207 5 198 0 209 5 198 0 210 5 198 0 211 5 198 0 212 3 149 0 213 5 198 0 214 5 198 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 109 2 23 14 109 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 109 2 30 14 109 2 31 4 13 2 32 14 109 2 39 14 109 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 109 2 73 14 109 2 74 14 109 2 75 14 109 2 76 14 109 2 77 14 109 2 78 14 109 2 79 14 109 2 80 14 109 2 81 14 109 2 82 14 109 2 83 14 109 2 84 14 109 2 85 14 109 2 86 14 109 2 87 14 109 2 88 14 109 2 89 14 109 2 90 14 109 2 91 14 109 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 109 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 109 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 14 113 0 67 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 117 2 23 14 117 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 117 2 30 14 117 2 31 4 13 2 32 14 117 2 39 14 117 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 117 2 73 14 117 2 74 14 117 2 75 14 117 2 76 14 117 2 77 14 117 2 78 14 117 2 79 14 117 2 80 14 117 2 81 14 117 2 82 14 117 2 83 14 117 2 84 14 117 2 85 14 117 2 86 14 117 2 87 14 117 2 88 14 117 2 89 14 117 2 90 14 117 2 91 14 117 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 117 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 117 2 135] 
#[0 5 202 0 229] 
#[0 5 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 121 2 23 14 121 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 121 2 30 14 121 2 31 4 13 2 32 14 121 2 39 14 121 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 121 2 73 14 121 2 74 14 121 2 75 14 121 2 76 14 121 2 77 14 121 2 78 14 121 2 79 14 121 2 80 14 121 2 81 14 121 2 82 14 121 2 83 14 121 2 84 14 121 2 85 14 121 2 86 14 121 2 87 14 121 2 88 14 121 2 89 14 121 2 90 14 121 2 91 14 121 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 121 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 121 2 135] 
#[1 3 1 0 1 5 210 0 3 5 210 0 4 1 51 0 5 5 210 0 6 5 210 0 7 5 210 0 8 3 9 0 9 5 210 0 10 5 210 0 11 3 13 0 12 5 210 0 13 3 17 0 14 5 210 0 15 5 210 0 16 5 210 0 17 5 210 0 19 5 210 0 20 5 210 0 21 5 210 0 22 5 210 0 23 5 210 0 24 5 210 0 25 5 210 0 26 5 210 0 27 5 210 0 28 3 21 0 31 1 55 0 32 5 210 0 34 5 210 0 35 5 210 0 38 1 206 0 40 3 29 0 42 1 57 0 44 5 210 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 5 210 0 80 3 101 0 82 5 210 0 83 1 57 0 85 5 210 0 87 5 210 0 90 1 59 0 99 1 206 0 100 3 109 0 102 3 113 0 103 5 210 0 105 3 117 0 107 5 210 0 108 5 210 0 110 1 57 0 113 5 210 0 115 5 210 0 116 5 210 0 118 1 206 0 120 5 210 0 121 5 210 0 123 5 210 0 125 1 57 0 126 3 121 0 128 5 210 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 5 210 0 146 5 210 0 150 5 210 0 151 5 210 0 152 1 57 0 170 5 210 0 171 1 57 0 175 1 57 0 176 5 210 0 177 5 210 0 179 1 57 0 182 1 206 0 184 5 210 0 186 5 210 0 188 5 210 0 190 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 5 210 0 201 5 210 0 207 5 210 0 209 5 210 0 210 5 210 0 211 5 210 0 212 3 149 0 213 5 210 0 214 5 210 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 125 2 23 14 125 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 125 2 30 14 125 2 31 4 13 2 32 14 125 2 39 14 125 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 125 2 73 14 125 2 74 14 125 2 75 14 125 2 76 14 125 2 77 14 125 2 78 14 125 2 79 14 125 2 80 14 125 2 81 14 125 2 82 14 125 2 83 14 125 2 84 14 125 2 85 14 125 2 86 14 125 2 87 14 125 2 88 14 125 2 89 14 125 2 90 14 125 2 91 14 125 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 125 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 125 2 135] 
#[0 14 129 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 14 133 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 137 1 158 14 141 1 161 14 145 1 162 14 149 1 165 14 153 2 21 14 157 2 23 14 157 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 157 2 30 14 157 2 31 4 13 2 32 14 157 2 39 14 157 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 157 2 73 14 157 2 74 14 157 2 75 14 157 2 76 14 157 2 77 14 157 2 78 14 157 2 79 14 157 2 80 14 157 2 81 14 157 2 82 14 157 2 83 14 157 2 84 14 157 2 85 14 157 2 86 14 157 2 87 14 157 2 88 14 157 2 89 14 157 2 90 14 157 2 91 14 157 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 157 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 157 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 161 2 23 14 161 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 161 2 30 14 161 2 31 4 13 2 32 14 161 2 39 14 161 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 161 2 73 14 161 2 74 14 161 2 75 14 161 2 76 14 161 2 77 14 161 2 78 14 161 2 79 14 161 2 80 14 161 2 81 14 161 2 82 14 161 2 83 14 161 2 84 14 161 2 85 14 161 2 86 14 161 2 87 14 161 2 88 14 161 2 89 14 161 2 90 14 161 2 91 14 161 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 161 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 161 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 165 2 23 14 165 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 165 2 30 14 165 2 31 4 13 2 32 14 165 2 39 14 165 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 165 2 73 14 165 2 74 14 165 2 75 14 165 2 76 14 165 2 77 14 165 2 78 14 165 2 79 14 165 2 80 14 165 2 81 14 165 2 82 14 165 2 83 14 165 2 84 14 165 2 85 14 165 2 86 14 165 2 87 14 165 2 88 14 165 2 89 14 165 2 90 14 165 2 91 14 165 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 165 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 165 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 169 2 23 14 169 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 169 2 30 14 169 2 31 4 13 2 32 14 169 2 39 14 169 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 169 2 73 14 169 2 74 14 169 2 75 14 169 2 76 14 169 2 77 14 169 2 78 14 169 2 79 14 169 2 80 14 169 2 81 14 169 2 82 14 169 2 83 14 169 2 84 14 169 2 85 14 169 2 86 14 169 2 87 14 169 2 88 14 169 2 89 14 169 2 90 14 169 2 91 14 169 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 169 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 169 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 14 173 1 193 13 185 1 195] 
#[0 5 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 154 0 1 2 154 0 3 2 154 0 4 1 63 0 5 2 154 0 6 2 154 0 7 2 154 0 8 2 154 0 9 2 154 0 10 2 154 0 11 2 154 0 12 2 154 0 13 0 43 0 14 2 154 0 15 2 154 0 16 1 67 0 17 2 154 0 19 2 154 0 20 2 154 0 21 2 154 0 22 2 154 0 23 2 154 0 24 2 154 0 25 2 154 0 26 2 154 0 27 2 154 0 28 0 230 0 29 2 154 0 32 2 154 0 34 2 154 0 35 2 154 0 38 2 154 0 45 2 154 0 80 2 154 0 83 2 154 0 87 2 154 0 90 2 154 0 99 2 154 0 105 2 154 0 108 2 154 0 110 2 154 0 115 2 154 0 116 2 154 0 118 2 154 0 121 2 154 0 123 2 154 0 125 2 154 0 130 2 154 0 146 2 154 0 150 2 154 0 151 2 154 0 152 2 154 0 171 2 154 0 177 2 154 0 179 2 154 0 186 2 154 0 188 2 154 0 190 2 154 0 201 2 154 0 207 2 154 0 209 2 154 0 210 2 154 0 211 2 154 0 212 2 154 0 214 2 154 0 215 6 5 0 235 2 53 1 46 2 57 1 47] 
#[1 3 1 0 1 2 45 0 5 14 177 0 6 3 9 0 9 3 13 0 12 3 17 0 14 0 73 0 19 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 4 174 0 46 4 174 0 47 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 4 174 0 149 4 174 0 157 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 1 35 0 229 3 193 0 235 14 177 0 236 3 201 0 237 3 245 0 241 11 161 0 252 0 89 0 253 0 93 0 254 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 14 181 1 126 11 169 1 129 11 173 1 130 6 9 2 23 6 9 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 6 9 2 30 6 9 2 31 4 13 2 32 6 9 2 39 6 9 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 6 9 2 73 6 9 2 74 6 9 2 75 6 9 2 76 6 9 2 77 6 9 2 78 6 9 2 79 6 9 2 80 6 9 2 81 6 9 2 82 6 9 2 83 6 9 2 84 6 9 2 85 6 9 2 86 6 9 2 87 6 9 2 88 6 9 2 89 6 9 2 90 6 9 2 91 6 9 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 6 9 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 6 9 2 135] 
#[0 5 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 226 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 185 0 17] 
#[0 5 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 14 189 0 229 14 193 1 158 14 141 1 161 14 145 1 162 14 149 1 165] 
#[0 5 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 246 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 22 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 38 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 42 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 62 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 74 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 78 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 90 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 110 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 118 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 126 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 130 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 134 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 146 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 1 71 0 4 6 150 0 5 6 150 0 6 6 61 0 7 1 75 0 8 6 65 0 9 1 79 0 10 6 150 0 11 6 69 0 12 1 83 0 13 6 73 0 15 1 87 0 16 6 150 0 17 6 77 0 19 6 81 0 20 1 91 0 21 6 85 0 22 6 89 0 23 14 221 0 24 6 97 0 25 6 101 0 26 6 105 0 27 1 95 0 28 6 150 0 32 6 109 0 34 6 113 0 35 6 150 0 38 6 150 0 45 6 150 0 80 6 150 0 83 6 150 0 87 6 150 0 90 6 150 0 99 6 150 0 105 6 150 0 108 6 150 0 110 6 150 0 115 6 117 0 116 6 121 0 118 6 150 0 121 6 150 0 123 6 125 0 125 6 129 0 130 6 150 0 146 6 133 0 150 6 137 0 151 6 150 0 152 6 150 0 171 6 150 0 177 6 150 0 179 6 150 0 186 6 150 0 188 6 150 0 190 6 150 0 201 6 141 0 207 6 145 0 209 1 99 0 210 6 149 0 211 1 103 0 212 6 150 0 214 6 150 0 215 14 237 0 239 14 241 1 212] 
#[0 6 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 14 245 0 45 14 249 0 121 14 253 0 215 15 1 0 229 15 5 2 108 15 9 2 111] 
#[1 15 13 0 215 5 181 0 229 15 17 2 107] 
#[1 15 21 0 215 15 1 0 229 15 25 2 108 15 9 2 111] 
#[0 15 29 0 45] 
#[1 15 33 0 215 15 1 0 229 15 37 2 108 15 9 2 111] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 15 41 0 202 3 149 0 213 15 45 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 15 49 2 23 15 49 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 15 49 2 30 15 49 2 31 4 13 2 32 15 49 2 39 15 49 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 15 49 2 73 15 49 2 74 15 49 2 75 15 49 2 76 15 49 2 77 15 49 2 78 15 49 2 79 15 49 2 80 15 49 2 81 15 49 2 82 15 49 2 83 15 49 2 84 15 49 2 85 15 49 2 86 15 49 2 87 15 49 2 88 15 49 2 89 15 49 2 90 15 49 2 91 15 49 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 15 49 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 15 49 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 15 53 0 202 3 149 0 213 15 57 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 15 61 2 23 15 61 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 15 61 2 30 15 61 2 31 4 13 2 32 15 61 2 39 15 61 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 15 61 2 73 15 61 2 74 15 61 2 75 15 61 2 76 15 61 2 77 15 61 2 78 15 61 2 79 15 61 2 80 15 61 2 81 15 61 2 82 15 61 2 83 15 61 2 84 15 61 2 85 15 61 2 86 15 61 2 87 15 61 2 88 15 61 2 89 15 61 2 90 15 61 2 91 15 61 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 15 61 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 15 61 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 15 65 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 15 69 2 23 15 69 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 15 69 2 30 15 69 2 31 4 13 2 32 15 69 2 39 15 69 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 15 69 2 73 15 69 2 74 15 69 2 75 15 69 2 76 15 69 2 77 15 69 2 78 15 69 2 79 15 69 2 80 15 69 2 81 15 69 2 82 15 69 2 83 15 69 2 84 15 69 2 85 15 69 2 86 15 69 2 87 15 69 2 88 15 69 2 89 15 69 2 90 15 69 2 91 15 69 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 15 69 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 15 69 2 135] 
#[1 3 25 0 32 10 225 0 83 3 105 0 99 10 161 0 105 10 165 0 121 10 169 0 123 10 173 0 152 10 177 0 171 10 181 0 177 10 185 0 186 10 189 0 201 15 73 2 102 10 205 2 103 10 209 2 112 10 213 2 113 10 217 2 118 10 221 2 119 10 225 2 120 10 229 2 121 10 233 2 122 10 237 2 123 10 241 2 129 10 245 2 131 10 249 2 133] 
#[0 6 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 198 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 214 0 14 0 17 0 215] 
#[1 15 77 0 17 15 81 0 215] 
#[1 15 85 0 17 15 89 0 215] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 15 93 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 15 97 1 68] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 15 101 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 15 105 1 68] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 15 109 1 68 15 113 1 70] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 7 37 0 112 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 15 117 1 68 15 121 1 70] 
#[1 0 73 0 19 15 125 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 15 129 0 17 2 101 0 29 15 133 0 215] 
#[1 0 73 0 19 15 137 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 15 141 1 80 11 241 1 81] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 15 145 1 80 11 241 1 81] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 15 149 1 79] 
#[1 3 246 0 19 3 246 0 40 3 246 0 70 3 246 0 78 3 246 0 79 3 246 0 81 3 246 0 88 3 246 0 89 3 246 0 93 3 246 0 98 3 246 0 100 3 246 0 112 3 246 0 114 3 246 0 120 3 246 0 132 3 246 0 137 3 246 0 141 3 246 0 142 3 246 0 154 3 246 0 155 3 246 0 156 3 246 0 158 3 246 0 160 3 246 0 161 3 246 0 162 3 246 0 163 3 246 0 166 3 246 0 173 3 246 0 174 3 246 0 183 3 246 0 184 3 246 0 203 3 246 0 205 3 246 0 206 15 153 1 79] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 15 157 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 12 5 0 252 0 89 0 253 0 93 0 254 12 17 1 40 12 17 1 63 12 13 1 64 12 17 1 67 12 17 1 72 12 17 1 77 12 17 1 78 12 17 1 93 12 17 1 100 12 17 1 102 12 17 1 107 12 17 1 108 12 17 1 111 12 17 1 112 12 17 1 117 12 17 1 118 12 17 1 120 12 17 1 138 12 17 1 139 12 17 1 140 12 17 1 145 12 17 1 151 12 17 1 156 12 81 1 157 12 17 1 171 12 17 1 173 12 17 1 175 12 17 1 176 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 15 161 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 12 5 0 252 0 89 0 253 0 93 0 254 12 17 1 40 12 17 1 63 12 13 1 64 12 17 1 67 12 17 1 72 12 17 1 77 12 17 1 78 12 17 1 93 12 17 1 100 12 17 1 102 12 17 1 107 12 17 1 108 12 17 1 111 12 17 1 112 12 17 1 117 12 17 1 118 12 17 1 120 12 17 1 138 12 17 1 139 12 17 1 140 12 17 1 145 12 17 1 151 12 17 1 156 12 81 1 157 12 17 1 171 12 17 1 173 12 17 1 175 12 17 1 176 12 101 2 136] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 15 165 1 73] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 15 169 1 73] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 15 173 1 68] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 15 177 1 68] 
#[1 15 181 0 17 2 101 0 29 15 185 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 15 189 1 42 15 189 1 43 15 189 1 44 15 189 1 51 15 189 1 53 15 193 1 56 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[0 6 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 15 197 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 15 245 1 69] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 15 249 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 15 253 1 69] 
#[0 6 222 0 229] 
#[0 6 226 0 229] 
#[1 6 230 0 6 6 230 0 11 16 1 0 37 6 230 0 215 16 5 0 247] 
#[1 6 234 0 6 6 234 0 11 6 234 0 215 16 9 0 244] 
#[0 16 13 0 229] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 16 17 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 16 21 1 68] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 16 25 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 16 29 1 68] 
#[0 6 238 0 44 0 48 0 69 0 75 0 76 0 85 0 103 0 113 0 126 0 143 0 170 0 175 0 176 0 182 0 194 0 195 0 196 0 229] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 16 33 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 16 33 1 86] 
#[1 6 242 0 17 16 37 0 37 6 242 0 106 6 242 0 108 6 242 0 215] 
#[1 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 16 41 1 130] 
#[1 16 45 0 6 3 153 0 215 16 45 0 236] 
#[1 6 246 0 6 6 246 0 11 6 246 0 215 16 49 1 128] 
#[1 16 73 0 46 16 73 0 47 16 73 0 149 16 73 0 157 16 69 0 229 16 73 1 131 16 77 1 132] 
#[1 0 73 0 19 4 170 0 44 4 170 0 48 4 170 0 69 4 170 0 75 4 170 0 76 4 170 0 85 4 170 0 103 4 170 0 113 4 170 0 126 4 170 0 143 4 170 0 170 4 170 0 175 4 170 0 176 4 170 0 182 4 170 0 194 4 170 0 195 4 170 0 196 4 170 0 229 11 149 0 252 0 89 0 253 0 93 0 254 16 81 1 106] 
#[1 16 85 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 16 85 0 236 11 161 0 252 0 89 0 253 0 93 0 254 16 89 1 126 11 169 1 129 11 173 1 130] 
#[0 6 250 0 17 0 106 0 108 0 215] 
#[1 16 93 0 6 3 153 0 215 16 93 0 236] 
#[1 16 97 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 16 97 0 236 11 161 0 252 0 89 0 253 0 93 0 254 16 101 1 126 11 169 1 129 11 173 1 130] 
#[0 6 254 0 19 0 88 0 229] 
#[0 7 2 0 19 0 88 0 229] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 16 105 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[1 16 109 0 17 2 81 0 24 16 113 0 215 16 117 0 239] 
#[0 16 121 0 89] 
#[0 7 6 0 19 0 88 0 229] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 16 125 1 65 7 101 1 66] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 16 129 1 65 7 101 1 66] 
#[0 16 133 0 89] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 16 137 1 42 16 137 1 43 16 137 1 44 16 137 1 51 16 137 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 16 141 1 82] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 16 145 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[0 7 22 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 16 201 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 16 205 1 80 11 241 1 81] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 16 209 1 80 11 241 1 81] 
#[0 16 213 0 131] 
#[1 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 16 217 1 64 16 221 1 157 12 101 2 136] 
#[0 7 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 5 0 40 1 153 0 70 16 225 0 72 16 229 0 74 16 233 0 77 2 5 0 78 1 161 0 79 2 5 0 81 1 169 0 89 16 237 0 93 2 5 0 98 2 165 0 100 1 177 0 114 2 5 0 120 2 5 0 132 16 241 0 133 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 16 245 0 161 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 1 245 0 183 16 249 0 184 2 5 0 203 2 5 0 205 2 5 0 206 16 253 1 104 17 1 1 105 17 5 1 114 17 9 1 172 17 13 1 185 2 5 2 136] 
#[0 7 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 21 0 40 17 21 0 78 17 21 0 81 17 21 0 98 17 21 0 120 17 21 0 132 17 21 0 137 17 21 0 141 17 21 0 142 17 21 0 154 17 21 0 155 17 21 0 156 17 21 0 158 17 21 0 160 17 21 0 162 17 21 0 163 17 21 0 166 17 21 0 173 17 21 0 174 17 21 0 203 17 21 0 205 17 21 0 206 14 189 0 229 17 17 1 158 14 141 1 161 14 145 1 162 14 149 1 165 17 21 2 136] 
#[0 7 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 110 0 40 0 78 0 81 0 98 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 203 0 205 0 206 0 229] 
#[0 17 25 0 131] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 17 29 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 17 69 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 17 73 1 73] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 17 77 1 73] 
#[1 7 114 0 1 7 114 0 3 7 114 0 4 7 114 0 5 7 114 0 6 7 114 0 7 7 114 0 8 7 114 0 9 7 114 0 10 7 114 0 11 7 114 0 12 7 114 0 13 1 119 0 14 7 114 0 15 7 114 0 16 7 114 0 17 7 114 0 19 7 114 0 20 7 114 0 21 7 114 0 22 7 114 0 23 7 114 0 24 7 114 0 25 7 114 0 26 7 114 0 27 7 114 0 28 7 114 0 29 7 114 0 32 7 114 0 34 7 114 0 35 7 114 0 38 7 114 0 45 7 114 0 80 7 114 0 83 7 114 0 87 7 114 0 90 7 114 0 99 7 114 0 105 7 114 0 106 7 114 0 108 7 114 0 110 7 114 0 115 7 114 0 116 7 114 0 118 7 114 0 121 7 114 0 123 7 114 0 125 7 114 0 130 7 114 0 146 7 114 0 150 7 114 0 151 7 114 0 152 7 114 0 171 7 114 0 177 7 114 0 179 7 114 0 186 7 114 0 188 7 114 0 190 7 114 0 200 7 114 0 201 7 114 0 204 7 114 0 207 7 114 0 209 7 114 0 210 7 114 0 211 7 114 0 212 7 114 0 214 7 114 0 215 2 221 1 45] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 17 81 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 81 1 86] 
#[0 7 118 0 6 0 11 0 215] 
#[0 7 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 7 126 0 11 0 25 0 215] 
#[0 17 85 0 144] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 17 89 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86] 
#[1 3 25 0 32 10 225 0 83 3 105 0 99 10 161 0 105 17 93 0 115 10 165 0 121 10 169 0 123 10 173 0 152 10 177 0 171 10 181 0 177 10 185 0 186 10 189 0 201 17 97 0 215 12 177 2 102 10 205 2 103 10 209 2 112 10 213 2 113 10 217 2 118 10 221 2 119 10 225 2 120 10 229 2 121 10 233 2 122 10 237 2 123 10 241 2 129 10 245 2 131 10 249 2 133] 
#[0 17 101 0 110] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 105 2 23 17 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 17 105 2 30 17 105 2 31 4 13 2 32 17 105 2 39 17 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 17 105 2 73 17 105 2 74 17 105 2 75 17 105 2 76 17 105 2 77 17 105 2 78 17 105 2 79 17 105 2 80 17 105 2 81 17 105 2 82 17 105 2 83 17 105 2 84 17 105 2 85 17 105 2 86 17 105 2 87 17 105 2 88 17 105 2 89 17 105 2 90 17 105 2 91 17 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 17 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 17 105 2 135] 
#[1 6 57 0 3 7 130 0 4 7 130 0 5 7 130 0 6 6 61 0 7 7 130 0 8 6 65 0 9 7 130 0 10 7 130 0 11 6 69 0 12 7 130 0 13 6 73 0 15 7 130 0 16 7 130 0 17 6 77 0 19 6 81 0 20 7 130 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 7 130 0 28 7 130 0 32 6 109 0 34 6 113 0 35 7 130 0 38 7 130 0 45 7 130 0 80 7 130 0 83 7 130 0 87 7 130 0 90 7 130 0 99 7 130 0 105 7 130 0 108 7 130 0 110 7 130 0 115 6 117 0 116 6 121 0 118 7 130 0 121 7 130 0 123 6 125 0 125 6 129 0 130 7 130 0 146 6 133 0 150 6 137 0 151 7 130 0 152 7 130 0 171 7 130 0 177 7 130 0 179 7 130 0 186 7 130 0 188 7 130 0 190 7 130 0 201 6 141 0 207 6 145 0 209 7 130 0 210 6 149 0 211 7 130 0 212 7 130 0 214 7 130 0 215] 
#[1 17 109 0 215 15 1 0 229 17 113 2 108 15 9 2 111] 
#[0 17 117 0 115] 
#[0 7 134 0 32 0 83 0 99 0 105 0 115 0 121 0 123 0 152 0 171 0 177 0 186 0 201 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 17 121 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 121 1 86] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 17 125 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 125 1 86] 
#[1 5 181 0 229 17 129 2 107] 
#[0 7 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 17 133 0 215 17 137 0 228] 
#[0 17 141 0 144] 
#[1 7 142 0 6 17 145 0 14 7 142 0 215 17 149 2 35] 
#[1 4 238 0 6 4 238 0 14 4 238 0 215 17 153 2 36] 
#[0 7 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 157 2 23 17 157 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 17 157 2 30 17 157 2 31 4 13 2 32 17 157 2 39 17 157 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 17 157 2 73 17 157 2 74 17 157 2 75 17 157 2 76 17 157 2 77 17 157 2 78 17 157 2 79 17 157 2 80 17 157 2 81 17 157 2 82 17 157 2 83 17 157 2 84 17 157 2 85 17 157 2 86 17 157 2 87 17 157 2 88 17 157 2 89 17 157 2 90 17 157 2 91 17 157 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 17 157 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 17 157 2 135] 
#[1 17 161 0 215 17 165 0 228] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 17 169 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 173 2 23 17 173 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 17 173 2 30 17 173 2 31 4 13 2 32 17 173 2 39 17 173 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 17 173 2 73 17 173 2 74 17 173 2 75 17 173 2 76 17 173 2 77 17 173 2 78 17 173 2 79 17 173 2 80 17 173 2 81 17 173 2 82 17 173 2 83 17 173 2 84 17 173 2 85 17 173 2 86 17 173 2 87 17 173 2 88 17 173 2 89 17 173 2 90 17 173 2 91 17 173 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 17 173 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 17 173 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 7 150 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 7 150 0 214 7 150 0 215] 
#[1 17 177 0 214 6 17 0 215 17 177 0 238] 
#[1 7 154 0 11 7 154 0 214 7 154 0 215 17 181 2 59] 
#[0 7 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 130 0 1 2 130 0 3 2 130 0 5 2 130 0 6 2 130 0 7 2 130 0 9 2 130 0 11 2 130 0 12 2 130 0 14 2 130 0 15 2 130 0 19 2 130 0 20 2 130 0 22 2 130 0 23 2 130 0 24 2 130 0 25 2 130 0 26 2 130 0 27 2 130 0 34 2 130 0 35 2 130 0 116 2 130 0 118 2 130 0 125 2 130 0 130 2 130 0 150 2 130 0 151 17 185 0 190 2 130 0 207 2 130 0 209 2 130 0 211 2 130 0 215] 
#[1 7 162 0 1 7 162 0 3 7 162 0 4 1 123 0 5 7 162 0 6 7 162 0 7 7 162 0 8 7 162 0 9 7 162 0 10 7 162 0 11 7 162 0 12 7 162 0 13 7 162 0 14 7 162 0 15 7 162 0 16 7 162 0 17 7 162 0 19 7 162 0 20 7 162 0 21 7 162 0 22 7 162 0 23 7 162 0 24 7 162 0 25 7 162 0 26 7 162 0 27 7 162 0 28 7 162 0 32 7 162 0 34 7 162 0 35 7 162 0 38 7 162 0 45 7 162 0 80 7 162 0 83 7 162 0 87 7 162 0 90 1 127 0 99 7 162 0 105 7 162 0 108 7 162 0 110 7 162 0 115 7 162 0 116 7 162 0 118 7 162 0 121 7 162 0 123 7 162 0 125 7 162 0 130 7 162 0 146 7 162 0 150 7 162 0 151 7 162 0 152 7 162 0 171 7 162 0 177 7 162 0 179 7 162 0 186 7 162 0 188 7 162 0 190 7 162 0 201 5 221 0 204 7 162 0 207 7 162 0 209 7 162 0 210 7 162 0 211 7 162 0 212 3 206 0 213 7 162 0 214 7 162 0 215 17 189 2 55 17 189 2 56 17 189 2 61] 
#[1 17 193 0 6 3 153 0 215 17 193 0 236] 
#[1 7 166 0 6 7 166 0 11 7 166 0 215 17 197 1 169] 
#[1 6 57 0 3 1 131 0 6 6 61 0 7 6 65 0 9 1 131 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 1 131 0 215 13 161 2 49] 
#[1 17 201 0 6 3 153 0 215 17 201 0 236] 
#[0 7 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 17 205 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 205 1 86] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 17 209 1 41 13 29 1 42 13 29 1 43 13 29 1 44 13 29 1 51 13 29 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 209 1 86 13 113 2 23 13 113 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 113 2 30 13 113 2 31 4 13 2 32 13 113 2 39 13 113 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 113 2 73 13 113 2 74 13 113 2 75 13 113 2 76 13 113 2 77 13 113 2 78 13 113 2 79 13 113 2 80 13 113 2 81 13 113 2 82 13 113 2 83 13 113 2 84 13 113 2 85 13 113 2 86 13 113 2 87 13 113 2 88 13 113 2 89 13 113 2 90 13 113 2 91 13 113 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 113 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 113 2 135] 
#[0 7 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 26 0 3 1 26 0 4 0 11 0 5 1 26 0 6 1 26 0 7 1 26 0 8 1 26 0 9 1 26 0 10 1 26 0 11 1 26 0 12 1 26 0 13 2 182 0 14 1 26 0 15 1 26 0 16 1 26 0 17 1 26 0 19 1 26 0 20 1 26 0 21 1 26 0 22 1 26 0 23 1 26 0 24 1 26 0 25 1 26 0 26 1 26 0 27 1 26 0 28 2 101 0 29 1 26 0 32 1 26 0 34 1 26 0 35 1 26 0 38 1 26 0 45 1 26 0 80 1 26 0 83 1 26 0 87 1 26 0 90 1 26 0 99 1 26 0 105 1 26 0 108 1 26 0 110 1 26 0 115 1 26 0 116 1 26 0 118 1 26 0 121 1 26 0 123 1 26 0 125 1 26 0 130 1 26 0 146 1 26 0 150 1 26 0 151 1 26 0 152 1 26 0 171 1 26 0 177 1 26 0 179 1 26 0 186 1 26 0 188 1 26 0 190 1 26 0 201 1 26 0 207 1 26 0 209 1 26 0 210 1 26 0 211 1 26 0 212 1 26 0 214 1 26 0 215 2 105 0 235 2 109 1 87 2 113 1 88 2 117 1 89] 
#[1 17 213 0 6 3 153 0 215 17 213 0 236] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 6 25 2 23 6 25 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 6 25 2 30 6 25 2 31 4 13 2 32 6 25 2 39 6 25 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 6 29 2 62 17 217 2 66 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 6 25 2 73 6 25 2 74 6 25 2 75 6 25 2 76 6 25 2 77 6 25 2 78 6 25 2 79 6 25 2 80 6 25 2 81 6 25 2 82 6 25 2 83 6 25 2 84 6 25 2 85 6 25 2 86 6 25 2 87 6 25 2 88 6 25 2 89 6 25 2 90 6 25 2 91 6 25 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 6 25 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 6 25 2 135] 
#[0 7 182 0 11 0 214 0 215] 
#[0 7 186 0 6 0 11 0 215] 
#[0 7 190 0 6 0 11 0 215] 
#[1 7 194 0 3 7 194 0 4 7 194 0 5 7 194 0 6 6 61 0 7 7 194 0 8 6 65 0 9 7 194 0 10 7 194 0 11 6 69 0 12 7 194 0 13 6 73 0 15 7 194 0 16 7 194 0 17 7 194 0 19 7 194 0 20 7 194 0 21 7 194 0 22 7 194 0 23 7 194 0 24 7 194 0 25 7 194 0 26 7 194 0 27 7 194 0 28 7 194 0 32 7 194 0 34 7 194 0 35 7 194 0 38 7 194 0 45 7 194 0 80 7 194 0 83 7 194 0 87 7 194 0 90 7 194 0 99 7 194 0 105 7 194 0 108 7 194 0 110 7 194 0 115 7 194 0 116 7 194 0 118 7 194 0 121 7 194 0 123 7 194 0 125 6 129 0 130 7 194 0 146 7 194 0 150 7 194 0 151 7 194 0 152 7 194 0 171 7 194 0 177 7 194 0 179 7 194 0 186 7 194 0 188 7 194 0 190 7 194 0 201 7 194 0 207 6 145 0 209 7 194 0 210 6 149 0 211 7 194 0 212 7 194 0 214 7 194 0 215] 
#[1 7 198 0 3 7 198 0 4 7 198 0 5 7 198 0 6 7 198 0 7 7 198 0 8 7 198 0 9 7 198 0 10 7 198 0 11 7 198 0 12 7 198 0 13 7 198 0 15 7 198 0 16 7 198 0 17 7 198 0 19 7 198 0 20 7 198 0 21 7 198 0 22 7 198 0 23 7 198 0 24 7 198 0 25 7 198 0 26 7 198 0 27 7 198 0 28 7 198 0 32 7 198 0 34 7 198 0 35 7 198 0 38 7 198 0 45 7 198 0 80 7 198 0 83 7 198 0 87 7 198 0 90 7 198 0 99 7 198 0 105 7 198 0 108 7 198 0 110 7 198 0 115 7 198 0 116 7 198 0 118 7 198 0 121 7 198 0 123 7 198 0 125 7 198 0 130 7 198 0 146 7 198 0 150 7 198 0 151 7 198 0 152 7 198 0 171 7 198 0 177 7 198 0 179 7 198 0 186 7 198 0 188 7 198 0 190 7 198 0 201 7 198 0 207 7 198 0 209 7 198 0 210 6 149 0 211 7 198 0 212 7 198 0 214 7 198 0 215] 
#[1 7 202 0 3 7 202 0 4 7 202 0 5 7 202 0 6 6 61 0 7 7 202 0 8 7 202 0 9 7 202 0 10 7 202 0 11 7 202 0 12 7 202 0 13 6 73 0 15 7 202 0 16 7 202 0 17 7 202 0 19 7 202 0 20 7 202 0 21 7 202 0 22 7 202 0 23 7 202 0 24 7 202 0 25 7 202 0 26 7 202 0 27 7 202 0 28 7 202 0 32 7 202 0 34 7 202 0 35 7 202 0 38 7 202 0 45 7 202 0 80 7 202 0 83 7 202 0 87 7 202 0 90 7 202 0 99 7 202 0 105 7 202 0 108 7 202 0 110 7 202 0 115 7 202 0 116 7 202 0 118 7 202 0 121 7 202 0 123 7 202 0 125 6 129 0 130 7 202 0 146 7 202 0 150 7 202 0 151 7 202 0 152 7 202 0 171 7 202 0 177 7 202 0 179 7 202 0 186 7 202 0 188 7 202 0 190 7 202 0 201 7 202 0 207 6 145 0 209 7 202 0 210 6 149 0 211 7 202 0 212 7 202 0 214 7 202 0 215] 
#[1 7 206 0 3 7 206 0 4 7 206 0 5 7 206 0 6 6 61 0 7 7 206 0 8 7 206 0 9 7 206 0 10 7 206 0 11 7 206 0 12 7 206 0 13 6 73 0 15 7 206 0 16 7 206 0 17 7 206 0 19 7 206 0 20 7 206 0 21 7 206 0 22 7 206 0 23 7 206 0 24 7 206 0 25 7 206 0 26 7 206 0 27 7 206 0 28 7 206 0 32 7 206 0 34 7 206 0 35 7 206 0 38 7 206 0 45 7 206 0 80 7 206 0 83 7 206 0 87 7 206 0 90 7 206 0 99 7 206 0 105 7 206 0 108 7 206 0 110 7 206 0 115 7 206 0 116 7 206 0 118 7 206 0 121 7 206 0 123 7 206 0 125 6 129 0 130 7 206 0 146 7 206 0 150 7 206 0 151 7 206 0 152 7 206 0 171 7 206 0 177 7 206 0 179 7 206 0 186 7 206 0 188 7 206 0 190 7 206 0 201 7 206 0 207 6 145 0 209 7 206 0 210 6 149 0 211 7 206 0 212 7 206 0 214 7 206 0 215] 
#[1 7 210 0 3 7 210 0 4 7 210 0 5 7 210 0 6 7 210 0 7 7 210 0 8 7 210 0 9 7 210 0 10 7 210 0 11 7 210 0 12 7 210 0 13 7 210 0 15 7 210 0 16 7 210 0 17 7 210 0 19 7 210 0 20 7 210 0 21 7 210 0 22 7 210 0 23 7 210 0 24 7 210 0 25 7 210 0 26 7 210 0 27 7 210 0 28 7 210 0 32 7 210 0 34 7 210 0 35 7 210 0 38 7 210 0 45 7 210 0 80 7 210 0 83 7 210 0 87 7 210 0 90 7 210 0 99 7 210 0 105 7 210 0 108 7 210 0 110 7 210 0 115 7 210 0 116 7 210 0 118 7 210 0 121 7 210 0 123 7 210 0 125 7 210 0 130 7 210 0 146 7 210 0 150 7 210 0 151 7 210 0 152 7 210 0 171 7 210 0 177 7 210 0 179 7 210 0 186 7 210 0 188 7 210 0 190 7 210 0 201 7 210 0 207 7 210 0 209 7 210 0 210 6 149 0 211 7 210 0 212 7 210 0 214 7 210 0 215] 
#[1 6 57 0 3 7 214 0 4 7 214 0 5 7 214 0 6 6 61 0 7 7 214 0 8 6 65 0 9 7 214 0 10 7 214 0 11 6 69 0 12 7 214 0 13 6 73 0 15 7 214 0 16 7 214 0 17 6 81 0 20 7 214 0 21 6 105 0 27 7 214 0 28 7 214 0 32 7 214 0 34 7 214 0 35 7 214 0 38 7 214 0 45 7 214 0 80 7 214 0 83 7 214 0 87 7 214 0 90 7 214 0 99 7 214 0 105 7 214 0 108 7 214 0 110 7 214 0 115 7 214 0 121 7 214 0 123 6 129 0 130 7 214 0 146 7 214 0 150 7 214 0 151 7 214 0 152 7 214 0 171 7 214 0 177 7 214 0 179 7 214 0 186 7 214 0 188 7 214 0 190 7 214 0 201 7 214 0 207 6 145 0 209 7 214 0 210 6 149 0 211 7 214 0 212 7 214 0 214 7 214 0 215] 
#[1 6 57 0 3 7 218 0 4 7 218 0 5 7 218 0 6 6 61 0 7 7 218 0 8 6 65 0 9 7 218 0 10 7 218 0 11 6 69 0 12 7 218 0 13 6 73 0 15 7 218 0 16 7 218 0 17 7 218 0 19 7 218 0 20 7 218 0 21 7 218 0 22 7 218 0 23 7 218 0 24 7 218 0 25 7 218 0 26 7 218 0 27 7 218 0 28 7 218 0 32 7 218 0 34 7 218 0 35 7 218 0 38 7 218 0 45 7 218 0 80 7 218 0 83 7 218 0 87 7 218 0 90 7 218 0 99 7 218 0 105 7 218 0 108 7 218 0 110 7 218 0 115 7 218 0 116 7 218 0 118 7 218 0 121 7 218 0 123 7 218 0 125 6 129 0 130 7 218 0 146 7 218 0 150 7 218 0 151 7 218 0 152 7 218 0 171 7 218 0 177 7 218 0 179 7 218 0 186 7 218 0 188 7 218 0 190 7 218 0 201 7 218 0 207 6 145 0 209 7 218 0 210 6 149 0 211 7 218 0 212 7 218 0 214 7 218 0 215] 
#[1 6 57 0 3 7 222 0 4 7 222 0 5 7 222 0 6 6 61 0 7 7 222 0 8 6 65 0 9 7 222 0 10 7 222 0 11 6 69 0 12 7 222 0 13 6 73 0 15 7 222 0 16 7 222 0 17 6 81 0 20 7 222 0 21 6 105 0 27 7 222 0 28 7 222 0 32 7 222 0 34 7 222 0 35 7 222 0 38 7 222 0 45 7 222 0 80 7 222 0 83 7 222 0 87 7 222 0 90 7 222 0 99 7 222 0 105 7 222 0 108 7 222 0 110 7 222 0 115 7 222 0 121 7 222 0 123 6 129 0 130 7 222 0 146 7 222 0 150 7 222 0 151 7 222 0 152 7 222 0 171 7 222 0 177 7 222 0 179 7 222 0 186 7 222 0 188 7 222 0 190 7 222 0 201 7 222 0 207 6 145 0 209 7 222 0 210 6 149 0 211 7 222 0 212 7 222 0 214 7 222 0 215] 
#[1 6 57 0 3 7 226 0 4 7 226 0 5 7 226 0 6 6 61 0 7 7 226 0 8 6 65 0 9 7 226 0 10 7 226 0 11 6 69 0 12 7 226 0 13 6 73 0 15 7 226 0 16 7 226 0 17 6 81 0 20 7 226 0 21 6 105 0 27 7 226 0 28 7 226 0 32 7 226 0 34 7 226 0 35 7 226 0 38 7 226 0 45 7 226 0 80 7 226 0 83 7 226 0 87 7 226 0 90 7 226 0 99 7 226 0 105 7 226 0 108 7 226 0 110 7 226 0 115 7 226 0 121 7 226 0 123 6 129 0 130 7 226 0 146 7 226 0 150 7 226 0 151 7 226 0 152 7 226 0 171 7 226 0 177 7 226 0 179 7 226 0 186 7 226 0 188 7 226 0 190 7 226 0 201 7 226 0 207 6 145 0 209 7 226 0 210 6 149 0 211 7 226 0 212 7 226 0 214 7 226 0 215] 
#[1 6 57 0 3 7 230 0 4 7 230 0 5 7 230 0 6 6 61 0 7 7 230 0 8 6 65 0 9 7 230 0 10 7 230 0 11 6 69 0 12 7 230 0 13 6 73 0 15 7 230 0 16 7 230 0 17 6 81 0 20 7 230 0 21 6 105 0 27 7 230 0 28 7 230 0 32 7 230 0 34 7 230 0 35 7 230 0 38 7 230 0 45 7 230 0 80 7 230 0 83 7 230 0 87 7 230 0 90 7 230 0 99 7 230 0 105 7 230 0 108 7 230 0 110 7 230 0 115 7 230 0 121 7 230 0 123 6 129 0 130 7 230 0 146 7 230 0 150 7 230 0 151 7 230 0 152 7 230 0 171 7 230 0 177 7 230 0 179 7 230 0 186 7 230 0 188 7 230 0 190 7 230 0 201 7 230 0 207 6 145 0 209 7 230 0 210 6 149 0 211 7 230 0 212 7 230 0 214 7 230 0 215] 
#[1 6 57 0 3 7 234 0 4 7 234 0 5 7 234 0 6 6 61 0 7 7 234 0 8 6 65 0 9 7 234 0 10 7 234 0 11 6 69 0 12 7 234 0 13 6 73 0 15 7 234 0 16 7 234 0 17 6 81 0 20 7 234 0 21 6 105 0 27 7 234 0 28 7 234 0 32 7 234 0 34 7 234 0 35 7 234 0 38 7 234 0 45 7 234 0 80 7 234 0 83 7 234 0 87 7 234 0 90 7 234 0 99 7 234 0 105 7 234 0 108 7 234 0 110 7 234 0 115 7 234 0 121 7 234 0 123 6 129 0 130 7 234 0 146 7 234 0 150 7 234 0 151 7 234 0 152 7 234 0 171 7 234 0 177 7 234 0 179 7 234 0 186 7 234 0 188 7 234 0 190 7 234 0 201 7 234 0 207 6 145 0 209 7 234 0 210 6 149 0 211 7 234 0 212 7 234 0 214 7 234 0 215] 
#[1 6 57 0 3 7 238 0 4 7 238 0 5 7 238 0 6 6 61 0 7 7 238 0 8 6 65 0 9 7 238 0 10 7 238 0 11 6 69 0 12 7 238 0 13 6 73 0 15 7 238 0 16 7 238 0 17 6 81 0 20 7 238 0 21 6 105 0 27 7 238 0 28 7 238 0 32 7 238 0 34 7 238 0 35 7 238 0 38 7 238 0 45 7 238 0 80 7 238 0 83 7 238 0 87 7 238 0 90 7 238 0 99 7 238 0 105 7 238 0 108 7 238 0 110 7 238 0 115 7 238 0 121 7 238 0 123 6 129 0 130 7 238 0 146 7 238 0 150 7 238 0 151 7 238 0 152 7 238 0 171 7 238 0 177 7 238 0 179 7 238 0 186 7 238 0 188 7 238 0 190 7 238 0 201 7 238 0 207 6 145 0 209 7 238 0 210 6 149 0 211 7 238 0 212 7 238 0 214 7 238 0 215] 
#[1 6 57 0 3 7 242 0 4 7 242 0 5 7 242 0 6 6 61 0 7 7 242 0 8 6 65 0 9 7 242 0 10 7 242 0 11 6 69 0 12 7 242 0 13 6 73 0 15 7 242 0 16 7 242 0 17 7 242 0 19 7 242 0 20 7 242 0 21 7 242 0 22 7 242 0 23 7 242 0 24 7 242 0 25 7 242 0 26 7 242 0 27 7 242 0 28 7 242 0 32 7 242 0 34 7 242 0 35 7 242 0 38 7 242 0 45 7 242 0 80 7 242 0 83 7 242 0 87 7 242 0 90 7 242 0 99 7 242 0 105 7 242 0 108 7 242 0 110 7 242 0 115 7 242 0 116 7 242 0 118 7 242 0 121 7 242 0 123 7 242 0 125 6 129 0 130 7 242 0 146 7 242 0 150 7 242 0 151 7 242 0 152 7 242 0 171 7 242 0 177 7 242 0 179 7 242 0 186 7 242 0 188 7 242 0 190 7 242 0 201 7 242 0 207 6 145 0 209 7 242 0 210 6 149 0 211 7 242 0 212 7 242 0 214 7 242 0 215] 
#[1 6 57 0 3 7 246 0 4 7 246 0 5 7 246 0 6 6 61 0 7 7 246 0 8 6 65 0 9 7 246 0 10 7 246 0 11 6 69 0 12 7 246 0 13 6 73 0 15 7 246 0 16 7 246 0 17 6 77 0 19 6 81 0 20 7 246 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 7 246 0 28 7 246 0 32 7 246 0 34 7 246 0 35 7 246 0 38 7 246 0 45 7 246 0 80 7 246 0 83 7 246 0 87 7 246 0 90 7 246 0 99 7 246 0 105 7 246 0 108 7 246 0 110 7 246 0 115 6 117 0 116 6 121 0 118 7 246 0 121 7 246 0 123 6 125 0 125 6 129 0 130 7 246 0 146 7 246 0 150 7 246 0 151 7 246 0 152 7 246 0 171 7 246 0 177 7 246 0 179 7 246 0 186 7 246 0 188 7 246 0 190 7 246 0 201 7 246 0 207 6 145 0 209 7 246 0 210 6 149 0 211 7 246 0 212 7 246 0 214 7 246 0 215] 
#[1 6 57 0 3 7 250 0 4 7 250 0 5 7 250 0 6 6 61 0 7 7 250 0 8 6 65 0 9 7 250 0 10 7 250 0 11 6 69 0 12 7 250 0 13 6 73 0 15 7 250 0 16 7 250 0 17 6 77 0 19 6 81 0 20 7 250 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 7 250 0 28 7 250 0 32 7 250 0 34 7 250 0 35 7 250 0 38 7 250 0 45 7 250 0 80 7 250 0 83 7 250 0 87 7 250 0 90 7 250 0 99 7 250 0 105 7 250 0 108 7 250 0 110 7 250 0 115 6 117 0 116 6 121 0 118 7 250 0 121 7 250 0 123 6 125 0 125 6 129 0 130 7 250 0 146 7 250 0 150 7 250 0 151 7 250 0 152 7 250 0 171 7 250 0 177 7 250 0 179 7 250 0 186 7 250 0 188 7 250 0 190 7 250 0 201 7 250 0 207 6 145 0 209 7 250 0 210 6 149 0 211 7 250 0 212 7 250 0 214 7 250 0 215] 
#[1 6 57 0 3 7 254 0 4 7 254 0 5 7 254 0 6 6 61 0 7 7 254 0 8 6 65 0 9 7 254 0 10 7 254 0 11 6 69 0 12 7 254 0 13 6 73 0 15 7 254 0 16 7 254 0 17 6 81 0 20 7 254 0 21 6 105 0 27 7 254 0 28 7 254 0 32 7 254 0 34 7 254 0 35 7 254 0 38 7 254 0 45 7 254 0 80 7 254 0 83 7 254 0 87 7 254 0 90 7 254 0 99 7 254 0 105 7 254 0 108 7 254 0 110 7 254 0 115 7 254 0 121 7 254 0 123 6 129 0 130 7 254 0 146 7 254 0 150 7 254 0 151 7 254 0 152 7 254 0 171 7 254 0 177 7 254 0 179 7 254 0 186 7 254 0 188 7 254 0 190 7 254 0 201 7 254 0 207 6 145 0 209 7 254 0 210 6 149 0 211 7 254 0 212 7 254 0 214 7 254 0 215] 
#[1 6 57 0 3 8 2 0 4 8 2 0 5 8 2 0 6 6 61 0 7 8 2 0 8 6 65 0 9 8 2 0 10 8 2 0 11 6 69 0 12 8 2 0 13 6 73 0 15 8 2 0 16 8 2 0 17 6 81 0 20 8 2 0 21 6 105 0 27 8 2 0 28 8 2 0 32 8 2 0 34 8 2 0 35 8 2 0 38 8 2 0 45 8 2 0 80 8 2 0 83 8 2 0 87 8 2 0 90 8 2 0 99 8 2 0 105 8 2 0 108 8 2 0 110 8 2 0 115 8 2 0 121 8 2 0 123 6 129 0 130 8 2 0 146 8 2 0 150 8 2 0 151 8 2 0 152 8 2 0 171 8 2 0 177 8 2 0 179 8 2 0 186 8 2 0 188 8 2 0 190 8 2 0 201 8 2 0 207 6 145 0 209 8 2 0 210 6 149 0 211 8 2 0 212 8 2 0 214 8 2 0 215] 
#[1 6 57 0 3 8 6 0 4 8 6 0 5 8 6 0 6 6 61 0 7 8 6 0 8 6 65 0 9 8 6 0 10 8 6 0 11 6 69 0 12 8 6 0 13 6 73 0 15 8 6 0 16 8 6 0 17 6 81 0 20 8 6 0 21 6 105 0 27 8 6 0 28 8 6 0 32 8 6 0 34 8 6 0 35 8 6 0 38 8 6 0 45 8 6 0 80 8 6 0 83 8 6 0 87 8 6 0 90 8 6 0 99 8 6 0 105 8 6 0 108 8 6 0 110 8 6 0 115 8 6 0 121 8 6 0 123 6 129 0 130 8 6 0 146 8 6 0 150 8 6 0 151 8 6 0 152 8 6 0 171 8 6 0 177 8 6 0 179 8 6 0 186 8 6 0 188 8 6 0 190 8 6 0 201 8 6 0 207 6 145 0 209 8 6 0 210 6 149 0 211 8 6 0 212 8 6 0 214 8 6 0 215] 
#[1 8 10 0 3 8 10 0 4 8 10 0 5 8 10 0 6 6 61 0 7 8 10 0 8 8 10 0 9 8 10 0 10 8 10 0 11 8 10 0 12 8 10 0 13 6 73 0 15 8 10 0 16 8 10 0 17 8 10 0 19 8 10 0 20 8 10 0 21 8 10 0 22 8 10 0 23 8 10 0 24 8 10 0 25 8 10 0 26 8 10 0 27 8 10 0 28 8 10 0 32 8 10 0 34 8 10 0 35 8 10 0 38 8 10 0 45 8 10 0 80 8 10 0 83 8 10 0 87 8 10 0 90 8 10 0 99 8 10 0 105 8 10 0 108 8 10 0 110 8 10 0 115 8 10 0 116 8 10 0 118 8 10 0 121 8 10 0 123 8 10 0 125 8 10 0 130 8 10 0 146 8 10 0 150 8 10 0 151 8 10 0 152 8 10 0 171 8 10 0 177 8 10 0 179 8 10 0 186 8 10 0 188 8 10 0 190 8 10 0 201 8 10 0 207 6 145 0 209 8 10 0 210 6 149 0 211 8 10 0 212 8 10 0 214 8 10 0 215] 
#[1 6 57 0 3 8 14 0 4 8 14 0 5 8 14 0 6 6 61 0 7 8 14 0 8 6 65 0 9 8 14 0 10 8 14 0 11 6 69 0 12 8 14 0 13 6 73 0 15 8 14 0 16 8 14 0 17 6 77 0 19 6 81 0 20 8 14 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 14 0 28 8 14 0 32 6 109 0 34 6 113 0 35 8 14 0 38 8 14 0 45 8 14 0 80 8 14 0 83 8 14 0 87 8 14 0 90 8 14 0 99 8 14 0 105 8 14 0 108 8 14 0 110 8 14 0 115 6 117 0 116 6 121 0 118 8 14 0 121 8 14 0 123 6 125 0 125 6 129 0 130 8 14 0 146 8 14 0 150 8 14 0 151 8 14 0 152 8 14 0 171 8 14 0 177 8 14 0 179 8 14 0 186 8 14 0 188 8 14 0 190 8 14 0 201 8 14 0 207 6 145 0 209 8 14 0 210 6 149 0 211 8 14 0 212 8 14 0 214 8 14 0 215] 
#[1 6 57 0 3 8 18 0 4 8 18 0 5 8 18 0 6 6 61 0 7 8 18 0 8 6 65 0 9 8 18 0 10 8 18 0 11 6 69 0 12 8 18 0 13 6 73 0 15 8 18 0 16 8 18 0 17 6 77 0 19 6 81 0 20 8 18 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 18 0 28 8 18 0 32 6 109 0 34 6 113 0 35 8 18 0 38 8 18 0 45 8 18 0 80 8 18 0 83 8 18 0 87 8 18 0 90 8 18 0 99 8 18 0 105 8 18 0 108 8 18 0 110 8 18 0 115 6 117 0 116 6 121 0 118 8 18 0 121 8 18 0 123 6 125 0 125 6 129 0 130 8 18 0 146 8 18 0 150 8 18 0 151 8 18 0 152 8 18 0 171 8 18 0 177 8 18 0 179 8 18 0 186 8 18 0 188 8 18 0 190 8 18 0 201 8 18 0 207 6 145 0 209 8 18 0 210 6 149 0 211 8 18 0 212 8 18 0 214 8 18 0 215] 
#[1 6 57 0 3 8 22 0 4 8 22 0 5 8 22 0 6 6 61 0 7 8 22 0 8 6 65 0 9 8 22 0 10 8 22 0 11 6 69 0 12 8 22 0 13 6 73 0 15 8 22 0 16 8 22 0 17 6 77 0 19 6 81 0 20 8 22 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 22 0 28 8 22 0 32 6 109 0 34 6 113 0 35 8 22 0 38 8 22 0 45 8 22 0 80 8 22 0 83 8 22 0 87 8 22 0 90 8 22 0 99 8 22 0 105 8 22 0 108 8 22 0 110 8 22 0 115 6 117 0 116 6 121 0 118 8 22 0 121 8 22 0 123 6 125 0 125 6 129 0 130 8 22 0 146 6 133 0 150 6 137 0 151 8 22 0 152 8 22 0 171 8 22 0 177 8 22 0 179 8 22 0 186 8 22 0 188 8 22 0 190 8 22 0 201 8 22 0 207 6 145 0 209 8 22 0 210 6 149 0 211 8 22 0 212 8 22 0 214 8 22 0 215] 
#[1 8 26 0 3 8 26 0 4 8 26 0 5 8 26 0 6 6 61 0 7 8 26 0 8 8 26 0 9 8 26 0 10 8 26 0 11 8 26 0 12 8 26 0 13 6 73 0 15 8 26 0 16 8 26 0 17 8 26 0 19 8 26 0 20 8 26 0 21 8 26 0 22 8 26 0 23 8 26 0 24 8 26 0 25 8 26 0 26 8 26 0 27 8 26 0 28 8 26 0 32 8 26 0 34 8 26 0 35 8 26 0 38 8 26 0 45 8 26 0 80 8 26 0 83 8 26 0 87 8 26 0 90 8 26 0 99 8 26 0 105 8 26 0 108 8 26 0 110 8 26 0 115 8 26 0 116 8 26 0 118 8 26 0 121 8 26 0 123 8 26 0 125 8 26 0 130 8 26 0 146 8 26 0 150 8 26 0 151 8 26 0 152 8 26 0 171 8 26 0 177 8 26 0 179 8 26 0 186 8 26 0 188 8 26 0 190 8 26 0 201 8 26 0 207 8 26 0 209 8 26 0 210 6 149 0 211 8 26 0 212 8 26 0 214 8 26 0 215] 
#[1 8 30 0 3 8 30 0 4 8 30 0 5 8 30 0 6 8 30 0 7 8 30 0 8 8 30 0 9 8 30 0 10 8 30 0 11 8 30 0 12 8 30 0 13 8 30 0 15 8 30 0 16 8 30 0 17 8 30 0 19 8 30 0 20 8 30 0 21 8 30 0 22 8 30 0 23 8 30 0 24 8 30 0 25 8 30 0 26 8 30 0 27 8 30 0 28 8 30 0 32 8 30 0 34 8 30 0 35 8 30 0 38 8 30 0 45 8 30 0 80 8 30 0 83 8 30 0 87 8 30 0 90 8 30 0 99 8 30 0 105 8 30 0 108 8 30 0 110 8 30 0 115 8 30 0 116 8 30 0 118 8 30 0 121 8 30 0 123 8 30 0 125 8 30 0 130 8 30 0 146 8 30 0 150 8 30 0 151 8 30 0 152 8 30 0 171 8 30 0 177 8 30 0 179 8 30 0 186 8 30 0 188 8 30 0 190 8 30 0 201 8 30 0 207 8 30 0 209 8 30 0 210 6 149 0 211 8 30 0 212 8 30 0 214 8 30 0 215] 
#[1 8 34 0 1 8 34 0 3 8 34 0 4 1 135 0 5 8 34 0 6 8 34 0 7 8 34 0 8 8 34 0 9 8 34 0 10 8 34 0 11 8 34 0 12 8 34 0 13 8 34 0 14 8 34 0 15 8 34 0 16 8 34 0 17 8 34 0 19 8 34 0 20 8 34 0 21 8 34 0 22 8 34 0 23 8 34 0 24 8 34 0 25 8 34 0 26 8 34 0 27 8 34 0 28 8 34 0 32 8 34 0 34 8 34 0 35 8 34 0 38 8 34 0 45 8 34 0 80 8 34 0 83 8 34 0 87 8 34 0 90 8 34 0 99 8 34 0 105 8 34 0 108 8 34 0 110 8 34 0 115 8 34 0 116 8 34 0 118 8 34 0 121 8 34 0 123 8 34 0 125 8 34 0 130 8 34 0 146 8 34 0 150 8 34 0 151 8 34 0 152 8 34 0 171 8 34 0 177 8 34 0 179 8 34 0 186 8 34 0 188 8 34 0 190 8 34 0 201 8 34 0 207 8 34 0 209 8 34 0 210 8 34 0 211 8 34 0 212 8 34 0 214 8 34 0 215 17 221 0 235] 
#[0 17 225 0 144] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 17 229 2 23 17 229 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 17 229 2 30 17 229 2 31 4 13 2 32 17 229 2 39 17 229 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 17 229 2 73 17 229 2 74 17 229 2 75 17 229 2 76 17 229 2 77 17 229 2 78 17 229 2 79 17 229 2 80 17 229 2 81 17 229 2 82 17 229 2 83 17 229 2 84 17 229 2 85 17 229 2 86 17 229 2 87 17 229 2 88 17 229 2 89 17 229 2 90 17 229 2 91 17 229 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 17 229 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 17 229 2 135] 
#[1 8 38 0 6 1 139 0 11 8 38 0 215 17 233 0 234 17 237 2 48] 
#[0 8 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 37 0 228 17 241 2 50] 
#[0 8 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 245 0 215] 
#[0 17 249 0 88] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 17 253 0 17 9 81 0 30 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 8 50 0 67 8 50 0 68 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 9 233 0 81 3 101 0 82 9 101 0 84 1 57 0 85 8 50 0 87 1 143 0 88 9 109 0 91 9 113 0 92 9 117 0 94 8 50 0 96 9 121 0 97 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 9 129 0 107 1 57 0 113 1 206 0 120 1 57 0 126 8 50 0 127 3 121 0 128 9 133 0 129 3 125 0 134 3 129 0 135 3 133 0 138 8 50 0 139 3 137 0 140 0 253 0 143 9 137 0 146 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 9 161 0 171 1 57 0 175 1 57 0 176 9 233 0 178 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 9 177 0 189 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 9 189 0 202 9 193 0 204 9 197 0 208 3 149 0 213 18 1 0 215 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 8 50 0 226 3 181 0 227 9 209 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 5 1 192 18 9 1 194 18 5 1 196 9 225 1 197 18 13 1 198 18 17 1 199 18 21 1 200 18 5 1 201 9 233 1 202 18 5 1 203 18 5 1 204 18 5 1 205 18 5 1 206 18 5 1 207 18 5 1 208 18 5 1 209 18 5 1 210 18 5 1 211 18 5 1 213 18 5 1 214 18 5 1 215 18 5 1 216 18 5 1 217 18 5 1 221 18 5 1 223 18 5 1 232 18 5 1 233 18 5 1 234 18 5 1 235 18 5 1 236 18 5 1 238 18 5 1 243 18 5 1 244 18 5 1 245 18 5 1 246 18 5 1 250 18 5 1 251 18 5 1 252 18 5 1 253 18 5 1 255 18 5 2 1 18 5 2 2 18 5 2 3 18 5 2 5 18 5 2 7 18 5 2 8 18 5 2 9 18 5 2 10 18 5 2 11 18 5 2 16 18 5 2 20 18 5 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 18 25 0 37 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 18 29 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 33 2 23 18 33 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 33 2 30 18 33 2 31 4 13 2 32 18 33 2 39 18 33 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 33 2 73 18 33 2 74 18 33 2 75 18 33 2 76 18 33 2 77 18 33 2 78 18 33 2 79 18 33 2 80 18 33 2 81 18 33 2 82 18 33 2 83 18 33 2 84 18 33 2 85 18 33 2 86 18 33 2 87 18 33 2 88 18 33 2 89 18 33 2 90 18 33 2 91 18 33 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 33 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 33 2 135] 
#[1 18 37 0 6 3 153 0 215 18 37 0 236] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 41 0 234] 
#[1 6 57 0 3 8 54 0 4 8 54 0 5 8 54 0 6 6 61 0 7 8 54 0 8 6 65 0 9 8 54 0 10 8 54 0 11 6 69 0 12 8 54 0 13 6 73 0 15 8 54 0 16 8 54 0 17 6 77 0 19 6 81 0 20 8 54 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 54 0 28 8 54 0 32 6 109 0 34 6 113 0 35 8 54 0 38 8 54 0 45 8 54 0 80 8 54 0 83 8 54 0 87 8 54 0 90 8 54 0 99 8 54 0 105 8 54 0 108 8 54 0 110 8 54 0 115 6 117 0 116 6 121 0 118 8 54 0 121 8 54 0 123 6 125 0 125 6 129 0 130 8 54 0 146 6 133 0 150 6 137 0 151 8 54 0 152 8 54 0 171 8 54 0 177 8 54 0 179 8 54 0 186 8 54 0 188 8 54 0 190 8 54 0 201 6 141 0 207 6 145 0 209 8 54 0 210 6 149 0 211 8 54 0 212 8 54 0 214 8 54 0 215] 
#[0 8 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 62 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 74 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 78 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 127 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 18 45 1 193 13 185 1 195] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 49 2 23 18 49 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 49 2 30 18 49 2 31 4 13 2 32 18 49 2 39 18 49 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 49 2 73 18 49 2 74 18 49 2 75 18 49 2 76 18 49 2 77 18 49 2 78 18 49 2 79 18 49 2 80 18 49 2 81 18 49 2 82 18 49 2 83 18 49 2 84 18 49 2 85 18 49 2 86 18 49 2 87 18 49 2 88 18 49 2 89 18 49 2 90 18 49 2 91 18 49 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 49 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 49 2 135] 
#[0 8 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 8 86 0 4 8 86 0 5 8 86 0 6 6 61 0 7 8 86 0 8 6 65 0 9 8 86 0 10 8 86 0 11 6 69 0 12 8 86 0 13 6 73 0 15 8 86 0 16 8 86 0 17 6 77 0 19 6 81 0 20 8 86 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 86 0 28 8 86 0 32 6 109 0 34 6 113 0 35 8 86 0 38 8 86 0 45 8 86 0 80 8 86 0 83 8 86 0 87 8 86 0 90 8 86 0 99 8 86 0 105 8 86 0 108 8 86 0 110 8 86 0 115 6 117 0 116 6 121 0 118 8 86 0 121 8 86 0 123 6 125 0 125 6 129 0 130 8 86 0 146 6 133 0 150 6 137 0 151 8 86 0 152 8 86 0 171 8 86 0 177 8 86 0 179 8 86 0 186 8 86 0 188 8 86 0 190 8 86 0 201 6 141 0 207 6 145 0 209 8 86 0 210 6 149 0 211 8 86 0 212 8 86 0 214 8 86 0 215 18 53 2 19] 
#[1 6 57 0 3 8 90 0 4 8 90 0 5 8 90 0 6 6 61 0 7 8 90 0 8 6 65 0 9 8 90 0 10 8 90 0 11 6 69 0 12 8 90 0 13 6 73 0 15 8 90 0 16 8 90 0 17 6 77 0 19 6 81 0 20 8 90 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 90 0 28 8 90 0 32 6 109 0 34 6 113 0 35 8 90 0 38 8 90 0 45 8 90 0 80 8 90 0 83 8 90 0 87 8 90 0 90 8 90 0 99 8 90 0 105 8 90 0 108 8 90 0 110 8 90 0 115 6 117 0 116 6 121 0 118 8 90 0 121 8 90 0 123 6 125 0 125 6 129 0 130 8 90 0 146 6 133 0 150 6 137 0 151 8 90 0 152 8 90 0 171 8 90 0 177 8 90 0 179 8 90 0 186 8 90 0 188 8 90 0 190 8 90 0 201 6 141 0 207 6 145 0 209 8 90 0 210 6 149 0 211 8 90 0 212 8 90 0 214 8 90 0 215] 
#[0 8 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 110 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 118 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 126 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 14 33 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 57 1 239 14 41 2 23 14 41 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 41 2 30 14 41 2 31 4 13 2 32 14 41 2 39 14 41 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 41 2 73 14 41 2 74 14 41 2 75 14 41 2 76 14 41 2 77 14 41 2 78 14 41 2 79 14 41 2 80 14 41 2 81 14 41 2 82 14 41 2 83 14 41 2 84 14 41 2 85 14 41 2 86 14 41 2 87 14 41 2 88 14 41 2 89 14 41 2 90 14 41 2 91 14 41 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 41 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 41 2 135] 
#[1 2 154 0 1 2 154 0 3 1 63 0 5 2 154 0 7 2 154 0 9 2 154 0 12 0 43 0 14 2 154 0 15 2 154 0 19 2 154 0 20 2 154 0 22 2 154 0 23 1 147 0 24 2 154 0 25 2 154 0 26 2 154 0 27 1 151 0 29 2 154 0 34 2 154 0 35 8 134 0 37 1 147 0 110 2 154 0 116 2 154 0 118 2 154 0 125 2 154 0 130 2 154 0 150 2 154 0 151 2 154 0 207 2 154 0 209 2 154 0 211 18 65 0 235 2 53 1 46 2 57 1 47 18 69 1 52 18 73 1 54 8 9 1 87 2 113 1 88 2 117 1 89 18 77 1 92 8 17 1 166] 
#[1 2 81 0 24 18 81 0 239] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 8 138 0 110 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211] 
#[0 5 218 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 85 2 23 18 85 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 85 2 30 18 85 2 31 4 13 2 32 18 85 2 39 18 85 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 85 2 73 18 85 2 74 18 85 2 75 18 85 2 76 18 85 2 77 18 85 2 78 18 85 2 79 18 85 2 80 18 85 2 81 18 85 2 82 18 85 2 83 18 85 2 84 18 85 2 85 18 85 2 86 18 85 2 87 18 85 2 88 18 85 2 89 18 85 2 90 18 85 2 91 18 85 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 85 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 85 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 18 89 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 18 93 0 188 6 141 0 207 6 145 0 209 6 149 0 211 18 97 0 215] 
#[1 2 45 0 5 18 101 0 235] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 105 2 23 18 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 105 2 30 18 105 2 31 4 13 2 32 18 105 2 39 18 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 105 2 73 18 105 2 74 18 105 2 75 18 105 2 76 18 105 2 77 18 105 2 78 18 105 2 79 18 105 2 80 18 105 2 81 18 105 2 82 18 105 2 83 18 105 2 84 18 105 2 85 18 105 2 86 18 105 2 87 18 105 2 88 18 105 2 89 18 105 2 90 18 105 2 91 18 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 105 2 135] 
#[1 18 109 0 104 18 113 0 168 18 117 1 254 18 117 2 2] 
#[1 8 146 0 3 8 146 0 4 1 155 0 5 8 146 0 6 8 146 0 7 8 146 0 8 8 146 0 9 8 146 0 10 8 146 0 11 8 146 0 12 8 146 0 13 8 146 0 15 8 146 0 16 8 146 0 17 8 146 0 19 8 146 0 20 8 146 0 21 8 146 0 22 8 146 0 23 8 146 0 24 8 146 0 25 8 146 0 26 8 146 0 27 8 146 0 28 8 146 0 32 8 146 0 34 8 146 0 35 8 146 0 38 8 146 0 45 8 146 0 80 8 146 0 83 8 146 0 87 8 146 0 90 8 146 0 99 8 146 0 105 8 146 0 108 8 146 0 110 8 146 0 115 8 146 0 116 8 146 0 118 8 146 0 121 8 146 0 123 8 146 0 125 8 146 0 130 8 146 0 146 8 146 0 150 8 146 0 151 8 146 0 152 8 146 0 171 8 146 0 177 8 146 0 179 8 146 0 186 8 146 0 188 8 146 0 190 8 146 0 201 8 146 0 207 8 146 0 209 8 146 0 210 8 146 0 211 8 146 0 212 8 146 0 214 8 146 0 215 18 125 0 235] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 129 2 12 14 85 2 15 14 89 2 23 14 89 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 89 2 30 14 89 2 31 4 13 2 32 14 89 2 39 14 89 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 89 2 73 14 89 2 74 14 89 2 75 14 89 2 76 14 89 2 77 14 89 2 78 14 89 2 79 14 89 2 80 14 89 2 81 14 89 2 82 14 89 2 83 14 89 2 84 14 89 2 85 14 89 2 86 14 89 2 87 14 89 2 88 14 89 2 89 14 89 2 90 14 89 2 91 14 89 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 89 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 89 2 135] 
#[0 8 150 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 154 0 3 8 154 0 4 8 154 0 5 8 154 0 6 8 154 0 7 8 154 0 8 8 154 0 9 8 154 0 10 8 154 0 11 8 154 0 12 8 154 0 13 8 154 0 15 8 154 0 16 8 154 0 17 8 154 0 19 8 154 0 20 8 154 0 21 8 154 0 22 8 154 0 23 8 154 0 24 8 154 0 25 8 154 0 26 8 154 0 27 8 154 0 28 8 154 0 32 8 154 0 34 8 154 0 35 8 154 0 38 8 154 0 45 8 154 0 80 8 154 0 83 8 154 0 87 8 154 0 90 8 154 0 99 8 154 0 105 8 154 0 108 8 154 0 110 8 154 0 115 8 154 0 116 8 154 0 118 8 154 0 121 8 154 0 123 8 154 0 125 8 154 0 130 8 154 0 146 8 154 0 150 8 154 0 151 8 154 0 152 8 154 0 171 8 154 0 177 8 154 0 179 8 154 0 186 8 154 0 188 8 154 0 190 8 154 0 201 8 154 0 207 8 154 0 209 8 154 0 210 8 154 0 211 8 154 0 212 8 154 0 214 8 154 0 215 18 133 2 14] 
#[1 6 57 0 3 2 45 0 5 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 137 0 235 18 141 1 166] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 145 0 234] 
#[0 8 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 8 170 0 4 8 170 0 5 8 170 0 6 6 61 0 7 8 170 0 8 6 65 0 9 8 170 0 10 8 170 0 11 6 69 0 12 8 170 0 13 6 73 0 15 8 170 0 16 8 170 0 17 6 77 0 19 6 81 0 20 8 170 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 170 0 28 8 170 0 32 6 109 0 34 6 113 0 35 8 170 0 38 8 170 0 45 8 170 0 80 8 170 0 83 8 170 0 87 8 170 0 90 8 170 0 99 8 170 0 105 8 170 0 108 8 170 0 110 8 170 0 115 6 117 0 116 6 121 0 118 8 170 0 121 8 170 0 123 6 125 0 125 6 129 0 130 8 170 0 146 6 133 0 150 6 137 0 151 8 170 0 152 8 170 0 171 8 170 0 177 8 170 0 179 8 170 0 186 8 170 0 188 8 170 0 190 8 170 0 201 6 141 0 207 6 145 0 209 8 170 0 210 6 149 0 211 8 170 0 212 8 170 0 214 8 170 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 149 2 23 18 149 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 149 2 30 18 149 2 31 4 13 2 32 18 149 2 39 18 149 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 149 2 73 18 149 2 74 18 149 2 75 18 149 2 76 18 149 2 77 18 149 2 78 18 149 2 79 18 149 2 80 18 149 2 81 18 149 2 82 18 149 2 83 18 149 2 84 18 149 2 85 18 149 2 86 18 149 2 87 18 149 2 88 18 149 2 89 18 149 2 90 18 149 2 91 18 149 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 149 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 149 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 153 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 157 0 215] 
#[1 6 57 0 3 8 174 0 4 8 174 0 5 8 174 0 6 6 61 0 7 8 174 0 8 6 65 0 9 8 174 0 10 8 174 0 11 6 69 0 12 8 174 0 13 6 73 0 15 8 174 0 16 8 174 0 17 6 77 0 19 6 81 0 20 8 174 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 174 0 28 8 174 0 32 6 109 0 34 6 113 0 35 8 174 0 38 8 174 0 45 8 174 0 80 8 174 0 83 8 174 0 87 8 174 0 90 8 174 0 99 8 174 0 105 8 174 0 108 8 174 0 110 8 174 0 115 6 117 0 116 6 121 0 118 8 174 0 121 8 174 0 123 6 125 0 125 6 129 0 130 8 174 0 146 6 133 0 150 6 137 0 151 8 174 0 152 8 174 0 171 8 174 0 177 8 174 0 179 8 174 0 186 8 174 0 188 8 174 0 190 8 174 0 201 6 141 0 207 6 145 0 209 8 174 0 210 6 149 0 211 8 174 0 212 8 174 0 214 8 174 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 18 161 1 193 13 185 1 195] 
#[1 2 154 0 1 2 154 0 3 1 63 0 5 2 154 0 7 2 154 0 9 8 134 0 11 2 154 0 12 0 43 0 14 2 154 0 15 2 154 0 19 2 154 0 20 2 154 0 22 2 154 0 23 1 159 0 24 2 154 0 25 2 154 0 26 2 154 0 27 1 151 0 29 2 154 0 34 2 154 0 35 8 134 0 37 2 154 0 116 2 154 0 118 2 154 0 125 2 154 0 130 2 154 0 150 2 154 0 151 2 154 0 207 2 154 0 209 2 154 0 211 1 159 0 215 18 65 0 235 2 53 1 46 2 57 1 47 18 165 1 52 18 73 1 54 8 9 1 87 2 113 1 88 2 117 1 89 18 77 1 92 8 17 1 166] 
#[0 8 178 0 215] 
#[1 8 182 0 3 8 182 0 4 8 182 0 5 8 182 0 6 8 182 0 7 8 182 0 8 8 182 0 9 8 182 0 10 8 182 0 11 8 182 0 12 8 182 0 13 8 182 0 15 8 182 0 16 8 182 0 17 8 182 0 19 8 182 0 20 8 182 0 21 8 182 0 22 8 182 0 23 8 182 0 24 8 182 0 25 8 182 0 26 8 182 0 27 8 182 0 28 8 182 0 32 8 182 0 34 8 182 0 35 8 182 0 38 8 182 0 45 8 182 0 80 8 182 0 83 8 182 0 87 8 182 0 90 8 182 0 99 8 182 0 105 8 182 0 108 8 182 0 110 8 182 0 115 8 182 0 116 8 182 0 118 8 182 0 121 8 182 0 123 8 182 0 125 8 182 0 130 8 182 0 146 8 182 0 150 8 182 0 151 8 182 0 152 8 182 0 171 8 182 0 177 8 182 0 179 8 182 0 186 8 182 0 188 8 182 0 190 8 182 0 201 8 182 0 207 8 182 0 209 8 182 0 210 8 182 0 211 8 182 0 212 8 182 0 214 8 182 0 215 18 169 1 160] 
#[1 8 186 0 3 8 186 0 4 8 186 0 5 8 186 0 6 8 186 0 7 8 186 0 8 8 186 0 9 8 186 0 10 8 186 0 11 8 186 0 12 8 186 0 13 8 186 0 15 8 186 0 16 8 186 0 17 8 186 0 19 8 186 0 20 8 186 0 21 8 186 0 22 8 186 0 23 2 81 0 24 8 186 0 25 8 186 0 26 8 186 0 27 8 186 0 28 8 186 0 32 8 186 0 34 8 186 0 35 18 173 0 37 8 186 0 38 8 186 0 45 8 186 0 80 8 186 0 83 8 186 0 87 8 186 0 90 8 186 0 99 8 186 0 105 8 186 0 108 8 186 0 110 8 186 0 115 8 186 0 116 8 186 0 118 8 186 0 121 8 186 0 123 8 186 0 125 8 186 0 130 8 186 0 146 8 186 0 150 8 186 0 151 8 186 0 152 8 186 0 171 8 186 0 177 8 186 0 179 8 186 0 186 8 186 0 188 8 186 0 190 8 186 0 201 8 186 0 207 8 186 0 209 8 186 0 210 8 186 0 211 8 186 0 212 8 186 0 214 8 186 0 215 18 177 0 239] 
#[1 8 190 0 3 8 190 0 4 8 190 0 5 8 190 0 6 8 190 0 7 8 190 0 8 8 190 0 9 8 190 0 10 8 190 0 11 8 190 0 12 8 190 0 13 8 190 0 15 8 190 0 16 8 190 0 17 8 190 0 19 8 190 0 20 8 190 0 21 8 190 0 22 8 190 0 23 8 190 0 24 8 190 0 25 8 190 0 26 8 190 0 27 8 190 0 28 8 190 0 32 8 190 0 34 8 190 0 35 8 190 0 37 8 190 0 38 8 190 0 45 8 190 0 80 8 190 0 83 8 190 0 87 8 190 0 90 8 190 0 99 8 190 0 105 8 190 0 108 8 190 0 110 8 190 0 115 8 190 0 116 8 190 0 118 8 190 0 121 8 190 0 123 8 190 0 125 8 190 0 130 8 190 0 146 8 190 0 150 8 190 0 151 8 190 0 152 8 190 0 171 8 190 0 177 8 190 0 179 8 190 0 186 8 190 0 188 8 190 0 190 8 190 0 201 8 190 0 207 8 190 0 209 8 190 0 210 8 190 0 211 8 190 0 212 8 190 0 214 8 190 0 215 18 181 1 164] 
#[0 18 185 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 8 194 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 189 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 193 0 215] 
#[1 6 57 0 3 8 198 0 4 8 198 0 5 8 198 0 6 6 61 0 7 8 198 0 8 6 65 0 9 8 198 0 10 8 198 0 11 6 69 0 12 8 198 0 13 6 73 0 15 8 198 0 16 8 198 0 17 6 77 0 19 6 81 0 20 8 198 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 8 198 0 28 8 198 0 32 6 109 0 34 6 113 0 35 8 198 0 38 8 198 0 45 8 198 0 80 8 198 0 83 8 198 0 87 8 198 0 90 8 198 0 99 8 198 0 105 8 198 0 108 8 198 0 110 8 198 0 115 6 117 0 116 6 121 0 118 8 198 0 121 8 198 0 123 6 125 0 125 6 129 0 130 8 198 0 146 6 133 0 150 6 137 0 151 8 198 0 152 8 198 0 171 8 198 0 177 8 198 0 179 8 198 0 186 8 198 0 188 8 198 0 190 8 198 0 201 6 141 0 207 6 145 0 209 8 198 0 210 6 149 0 211 8 198 0 212 8 198 0 214 8 198 0 215] 
#[0 18 197 0 88] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 9 81 0 30 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 9 233 0 81 3 101 0 82 9 101 0 84 1 57 0 85 9 105 0 88 9 109 0 91 9 113 0 92 9 117 0 94 9 121 0 97 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 9 129 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 9 133 0 129 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 9 137 0 146 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 9 161 0 171 1 57 0 175 1 57 0 176 9 233 0 178 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 9 177 0 189 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 9 189 0 202 9 193 0 204 9 197 0 208 3 149 0 213 18 201 0 215 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 209 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 205 1 192 18 205 1 196 9 225 1 197 18 205 1 201 9 233 1 202 18 205 1 203 18 205 1 204 18 205 1 205 18 205 1 206 18 205 1 207 18 205 1 208 18 205 1 209 18 205 1 210 18 205 1 211 18 205 1 213 18 205 1 214 18 205 1 215 18 205 1 216 18 205 1 217 18 205 1 221 18 205 1 223 18 205 1 232 18 205 1 233 18 205 1 234 18 205 1 235 18 205 1 236 18 205 1 238 18 205 1 243 18 205 1 244 18 205 1 245 18 205 1 246 18 205 1 250 18 205 1 251 18 205 1 252 18 205 1 253 18 205 1 255 18 205 2 1 18 205 2 2 18 205 2 3 18 205 2 5 18 205 2 7 18 205 2 8 18 205 2 9 18 205 2 10 18 205 2 11 18 205 2 16 18 205 2 20 18 205 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[1 18 209 0 6 3 153 0 215 18 209 0 236] 
#[0 8 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 134 0 3 8 134 0 4 1 163 0 5 8 134 0 6 8 134 0 7 8 134 0 8 8 134 0 9 8 134 0 10 8 134 0 11 8 134 0 12 8 134 0 13 8 134 0 15 8 134 0 16 8 134 0 17 8 134 0 19 8 134 0 20 8 134 0 21 8 134 0 22 8 134 0 23 8 134 0 24 8 134 0 25 8 134 0 26 8 134 0 27 8 134 0 28 18 73 0 29 8 134 0 32 8 134 0 34 8 134 0 35 8 134 0 37 8 134 0 38 8 134 0 45 8 134 0 80 8 134 0 83 8 134 0 87 8 134 0 90 8 134 0 99 8 134 0 105 8 134 0 108 8 134 0 110 8 134 0 115 8 134 0 116 8 134 0 118 8 134 0 121 8 134 0 123 8 134 0 125 8 134 0 130 8 134 0 146 8 134 0 150 8 134 0 151 8 134 0 152 8 134 0 171 8 134 0 177 8 134 0 179 8 134 0 186 8 134 0 188 8 134 0 190 8 134 0 201 8 134 0 207 8 134 0 209 8 134 0 210 8 134 0 211 8 134 0 212 8 134 0 214 8 134 0 215 18 213 0 235 18 165 1 52 18 73 1 54 8 9 1 87 2 113 1 88 2 117 1 89 18 77 1 92 8 17 1 166] 
#[0 8 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 210 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 214 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 218 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 222 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 226 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 230 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 1 167 0 1 1 171 0 5 3 9 0 9 3 13 0 12 1 175 0 14 1 179 0 31 1 183 0 32 1 187 0 40 3 29 0 42 1 191 0 44 1 195 0 48 1 199 0 49 1 203 0 50 1 207 0 51 1 211 0 52 1 215 0 53 1 219 0 54 1 223 0 55 1 227 0 56 1 231 0 57 1 235 0 58 1 239 0 59 1 243 0 60 1 247 0 61 1 251 0 62 1 255 0 63 2 3 0 64 2 7 0 65 2 11 0 69 2 15 0 75 2 19 0 76 2 23 0 82 2 27 0 85 2 31 0 99 1 187 0 100 2 35 0 102 2 39 0 103 2 43 0 107 2 47 0 113 1 187 0 120 2 51 0 126 2 55 0 128 2 59 0 134 2 63 0 135 2 67 0 138 1 210 0 140 2 71 0 143 2 75 0 170 2 79 0 175 2 83 0 176 2 87 0 182 1 187 0 184 2 91 0 192 2 95 0 193 2 99 0 194 2 103 0 195 2 107 0 196 2 111 0 213 18 217 0 215 2 115 0 219 2 119 0 220 2 123 0 222 2 127 0 223 2 131 0 224 2 135 0 225 2 139 0 227 2 143 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 8 165 2 23 8 165 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 8 165 2 30 8 165 2 31 4 13 2 32 8 165 2 39 8 165 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 8 165 2 73 8 165 2 74 8 165 2 75 8 165 2 76 8 165 2 77 8 165 2 78 8 165 2 79 8 165 2 80 8 165 2 81 8 165 2 82 8 165 2 83 8 165 2 84 8 165 2 85 8 165 2 86 8 165 2 87 8 165 2 88 8 165 2 89 8 165 2 90 8 165 2 91 8 165 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 8 165 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 8 165 2 135] 
#[0 8 234 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 238 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 242 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 221 2 23 18 221 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 221 2 30 18 221 2 31 4 13 2 32 18 221 2 39 18 221 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 221 2 73 18 221 2 74 18 221 2 75 18 221 2 76 18 221 2 77 18 221 2 78 18 221 2 79 18 221 2 80 18 221 2 81 18 221 2 82 18 221 2 83 18 221 2 84 18 221 2 85 18 221 2 86 18 221 2 87 18 221 2 88 18 221 2 89 18 221 2 90 18 221 2 91 18 221 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 221 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 221 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 18 225 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 229 2 23 18 229 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 18 229 2 30 18 229 2 31 4 13 2 32 18 229 2 39 18 229 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 18 229 2 73 18 229 2 74 18 229 2 75 18 229 2 76 18 229 2 77 18 229 2 78 18 229 2 79 18 229 2 80 18 229 2 81 18 229 2 82 18 229 2 83 18 229 2 84 18 229 2 85 18 229 2 86 18 229 2 87 18 229 2 88 18 229 2 89 18 229 2 90 18 229 2 91 18 229 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 18 229 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 18 229 2 135] 
#[1 18 233 0 215 15 1 0 229 18 237 2 108 15 9 2 111] 
#[1 18 241 0 215 5 181 0 229 18 245 2 107] 
#[1 18 249 0 45 15 1 0 229 18 253 2 108 15 9 2 111] 
#[1 2 81 0 24 19 1 0 37 19 5 0 239] 
#[1 19 9 0 45 19 13 0 215] 
#[1 8 246 0 3 8 246 0 4 8 246 0 5 8 246 0 6 8 246 0 7 8 246 0 8 8 246 0 9 8 246 0 10 8 246 0 11 8 246 0 12 8 246 0 13 8 246 0 15 8 246 0 16 8 246 0 17 8 246 0 19 8 246 0 20 8 246 0 21 8 246 0 22 8 246 0 23 8 246 0 24 8 246 0 25 8 246 0 26 8 246 0 27 8 246 0 28 8 246 0 32 8 246 0 34 8 246 0 35 8 246 0 38 8 246 0 45 8 246 0 80 8 246 0 83 8 246 0 87 8 246 0 90 8 246 0 99 8 246 0 105 8 246 0 108 8 246 0 110 8 246 0 115 8 246 0 116 8 246 0 118 8 246 0 121 8 246 0 123 8 246 0 125 8 246 0 130 8 246 0 146 8 246 0 150 8 246 0 151 8 246 0 152 8 246 0 171 8 246 0 177 8 246 0 179 8 246 0 186 8 246 0 188 8 246 0 190 8 246 0 201 8 246 0 207 8 246 0 209 8 246 0 210 8 246 0 211 8 246 0 212 8 246 0 214 8 246 0 215 19 17 2 110] 
#[1 5 181 0 229 19 21 2 107] 
#[1 19 25 0 105 10 165 0 121 19 29 0 146 19 33 0 215 19 37 2 103 10 213 2 113 10 249 2 133] 
#[1 15 1 0 229 19 41 2 108 15 9 2 111] 
#[0 8 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 19 45 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 49 2 23 19 49 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 49 2 30 19 49 2 31 4 13 2 32 19 49 2 39 19 49 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 49 2 73 19 49 2 74 19 49 2 75 19 49 2 76 19 49 2 77 19 49 2 78 19 49 2 79 19 49 2 80 19 49 2 81 19 49 2 82 19 49 2 83 19 49 2 84 19 49 2 85 19 49 2 86 19 49 2 87 19 49 2 88 19 49 2 89 19 49 2 90 19 49 2 91 19 49 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 49 2 98 4 181 2 101 4 185 2 112 19 53 2 124 19 57 2 127 4 189 2 131 4 193 2 134 19 49 2 135] 
#[1 15 1 0 229 19 61 2 108 15 9 2 111] 
#[0 8 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 19 65 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 69 2 23 19 69 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 69 2 30 19 69 2 31 4 13 2 32 19 69 2 39 19 69 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 69 2 73 19 69 2 74 19 69 2 75 19 69 2 76 19 69 2 77 19 69 2 78 19 69 2 79 19 69 2 80 19 69 2 81 19 69 2 82 19 69 2 83 19 69 2 84 19 69 2 85 19 69 2 86 19 69 2 87 19 69 2 88 19 69 2 89 19 69 2 90 19 69 2 91 19 69 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 69 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 19 69 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 73 2 23 19 73 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 73 2 30 19 73 2 31 4 13 2 32 19 73 2 39 19 73 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 73 2 73 19 73 2 74 19 73 2 75 19 73 2 76 19 73 2 77 19 73 2 78 19 73 2 79 19 73 2 80 19 73 2 81 19 73 2 82 19 73 2 83 19 73 2 84 19 73 2 85 19 73 2 86 19 73 2 87 19 73 2 88 19 73 2 89 19 73 2 90 19 73 2 91 19 73 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 73 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 19 73 2 135] 
#[1 6 57 0 3 9 2 0 4 9 2 0 5 9 2 0 6 6 61 0 7 9 2 0 8 6 65 0 9 9 2 0 10 9 2 0 11 6 69 0 12 9 2 0 13 6 73 0 15 9 2 0 16 9 2 0 17 6 77 0 19 6 81 0 20 9 2 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 9 2 0 28 9 2 0 32 6 109 0 34 6 113 0 35 9 2 0 38 9 2 0 45 9 2 0 80 9 2 0 83 9 2 0 87 9 2 0 90 9 2 0 99 9 2 0 105 9 2 0 108 9 2 0 110 9 2 0 115 6 117 0 116 6 121 0 118 9 2 0 121 9 2 0 123 6 125 0 125 6 129 0 130 9 2 0 146 6 133 0 150 6 137 0 151 9 2 0 152 9 2 0 171 9 2 0 177 9 2 0 179 9 2 0 186 9 2 0 188 9 2 0 190 9 2 0 201 6 141 0 207 6 145 0 209 9 2 0 210 6 149 0 211 9 2 0 212 9 2 0 214 9 2 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 19 77 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 81 2 23 19 81 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 81 2 30 19 81 2 31 4 13 2 32 19 81 2 39 19 81 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 81 2 73 19 81 2 74 19 81 2 75 19 81 2 76 19 81 2 77 19 81 2 78 19 81 2 79 19 81 2 80 19 81 2 81 19 81 2 82 19 81 2 83 19 81 2 84 19 81 2 85 19 81 2 86 19 81 2 87 19 81 2 88 19 81 2 89 19 81 2 90 19 81 2 91 19 81 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 81 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 19 81 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 85 2 23 19 85 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 85 2 30 19 85 2 31 4 13 2 32 19 85 2 39 19 85 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 85 2 73 19 85 2 74 19 85 2 75 19 85 2 76 19 85 2 77 19 85 2 78 19 85 2 79 19 85 2 80 19 85 2 81 19 85 2 82 19 85 2 83 19 85 2 84 19 85 2 85 19 85 2 86 19 85 2 87 19 85 2 88 19 85 2 89 19 85 2 90 19 85 2 91 19 85 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 85 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 19 85 2 135] 
#[1 6 57 0 3 9 6 0 4 9 6 0 5 9 6 0 6 6 61 0 7 9 6 0 8 6 65 0 9 9 6 0 10 9 6 0 11 6 69 0 12 9 6 0 13 6 73 0 15 9 6 0 16 9 6 0 17 6 77 0 19 6 81 0 20 9 6 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 9 6 0 28 9 6 0 32 6 109 0 34 6 113 0 35 9 6 0 38 9 6 0 45 9 6 0 80 9 6 0 83 9 6 0 87 9 6 0 90 9 6 0 99 9 6 0 105 9 6 0 108 9 6 0 110 9 6 0 115 6 117 0 116 6 121 0 118 9 6 0 121 9 6 0 123 6 125 0 125 6 129 0 130 9 6 0 146 6 133 0 150 6 137 0 151 9 6 0 152 9 6 0 171 9 6 0 177 9 6 0 179 9 6 0 186 9 6 0 188 9 6 0 190 9 6 0 201 6 141 0 207 6 145 0 209 9 6 0 210 6 149 0 211 9 6 0 212 9 6 0 214 9 6 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 89 2 23 19 89 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 89 2 30 19 89 2 31 4 13 2 32 19 89 2 39 19 89 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 89 2 73 19 89 2 74 19 89 2 75 19 89 2 76 19 89 2 77 19 89 2 78 19 89 2 79 19 89 2 80 19 89 2 81 19 89 2 82 19 89 2 83 19 89 2 84 19 89 2 85 19 89 2 86 19 89 2 87 19 89 2 88 19 89 2 89 19 89 2 90 19 89 2 91 19 89 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 89 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 19 89 2 135] 
#[1 6 57 0 3 9 10 0 4 9 10 0 5 9 10 0 6 6 61 0 7 9 10 0 8 6 65 0 9 9 10 0 10 9 10 0 11 6 69 0 12 9 10 0 13 6 73 0 15 9 10 0 16 9 10 0 17 6 77 0 19 6 81 0 20 9 10 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 9 10 0 28 9 10 0 32 6 109 0 34 6 113 0 35 9 10 0 38 9 10 0 45 9 10 0 80 9 10 0 83 9 10 0 87 9 10 0 90 9 10 0 99 9 10 0 105 9 10 0 108 9 10 0 110 9 10 0 115 6 117 0 116 6 121 0 118 9 10 0 121 9 10 0 123 6 125 0 125 6 129 0 130 9 10 0 146 6 133 0 150 6 137 0 151 9 10 0 152 9 10 0 171 9 10 0 177 9 10 0 179 9 10 0 186 9 10 0 188 9 10 0 190 9 10 0 201 6 141 0 207 6 145 0 209 9 10 0 210 6 149 0 211 9 10 0 212 9 10 0 214 9 10 0 215] 
#[0 9 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 9 18 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 9 22 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 9 26 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 9 30 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 19 93 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 19 97 1 69] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 19 101 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 19 105 1 69] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 19 109 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 19 113 1 68] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 19 117 1 69] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 108 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 137 3 226 0 141 3 226 0 142 3 226 0 147 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 203 3 226 0 205 3 226 0 206 19 121 1 68] 
#[0 19 125 0 89] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 19 129 1 65 7 101 1 66] 
#[1 0 73 0 19 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 19 133 1 65 7 101 1 66] 
#[0 19 137 0 89] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 19 141 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 19 145 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 19 149 1 80 11 241 1 81] 
#[1 4 190 0 19 4 190 0 40 4 190 0 70 4 190 0 78 4 190 0 79 4 190 0 81 4 190 0 88 4 190 0 89 4 190 0 93 4 190 0 98 4 190 0 100 11 233 0 112 4 190 0 114 4 190 0 120 4 190 0 132 4 190 0 137 4 190 0 141 4 190 0 142 4 190 0 154 4 190 0 155 4 190 0 156 4 190 0 158 4 190 0 160 4 190 0 161 4 190 0 162 4 190 0 163 4 190 0 166 4 190 0 173 4 190 0 174 4 190 0 183 4 190 0 184 4 190 0 203 4 190 0 205 4 190 0 206 19 153 1 80 11 241 1 81] 
#[0 19 157 0 131] 
#[0 19 161 0 131] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 19 165 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 19 169 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 19 173 1 73] 
#[1 4 194 0 19 4 194 0 40 4 194 0 70 4 194 0 72 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 79 4 194 0 81 4 194 0 88 4 194 0 89 4 194 0 93 4 194 0 98 4 194 0 100 11 89 0 108 4 194 0 114 4 194 0 120 4 194 0 132 4 194 0 133 4 194 0 137 4 194 0 141 4 194 0 142 4 194 0 147 4 194 0 154 4 194 0 155 4 194 0 156 4 194 0 158 4 194 0 160 4 194 0 161 4 194 0 162 4 194 0 163 4 194 0 166 4 194 0 173 4 194 0 174 4 194 0 183 4 194 0 184 4 194 0 203 4 194 0 205 4 194 0 206 11 93 1 55 19 177 1 73] 
#[0 9 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 9 42 0 11 9 42 0 17 2 101 0 29 9 42 0 215 19 181 1 58] 
#[1 19 185 0 17 19 189 0 215] 
#[0 19 193 0 70] 
#[1 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 19 197 1 64 16 221 1 157 12 101 2 136] 
#[0 9 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 5 0 40 1 153 0 70 16 225 0 72 16 229 0 74 16 233 0 77 2 5 0 78 1 161 0 79 2 5 0 81 1 169 0 89 16 237 0 93 2 5 0 98 2 165 0 100 1 177 0 114 2 5 0 120 2 5 0 132 16 241 0 133 2 5 0 137 2 5 0 141 2 5 0 142 19 201 0 147 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 16 245 0 161 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 1 245 0 183 16 249 0 184 2 5 0 203 2 5 0 205 2 5 0 206 16 253 1 104 17 1 1 105 17 5 1 114 17 9 1 172 17 13 1 185 2 5 2 136] 
#[0 9 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 19 205 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[0 19 209 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 19 213 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 19 217 0 70 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 19 221 0 138 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 19 225 0 183 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 1 29 0 229 19 229 0 237 19 233 0 251 19 237 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 237 1 86] 
#[0 9 82 0 6 0 11 0 215] 
#[1 19 245 0 6 2 241 0 11 3 153 0 215 19 241 0 234 19 245 0 236 19 249 0 243] 
#[1 9 86 0 6 9 86 0 11 16 1 0 37 9 86 0 215 19 253 0 247] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 20 1 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 20 5 1 69] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 20 9 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 20 13 1 69] 
#[0 9 90 0 17 0 106 0 108 0 215] 
#[1 0 73 0 19 4 170 0 44 4 170 0 48 4 170 0 69 4 170 0 75 4 170 0 76 4 170 0 85 4 170 0 103 4 170 0 113 4 170 0 126 4 170 0 143 4 170 0 170 4 170 0 175 4 170 0 176 4 170 0 182 4 170 0 194 4 170 0 195 4 170 0 196 4 170 0 229 11 149 0 252 0 89 0 253 0 93 0 254 20 17 1 106] 
#[1 16 73 0 46 16 73 0 47 16 73 0 149 16 73 0 157 16 69 0 229 16 73 1 131 20 21 1 132] 
#[1 9 94 0 17 20 25 0 37 9 94 0 106 9 94 0 108 9 94 0 215] 
#[1 9 98 0 6 2 241 0 11 9 98 0 215 20 29 0 234 20 33 1 127] 
#[0 9 102 0 46 0 47 0 149 0 157 0 229] 
#[0 9 106 0 46 0 47 0 149 0 157 0 229] 
#[0 9 110 0 46 0 47 0 149 0 157 0 229] 
#[0 9 114 0 46 0 47 0 149 0 157 0 229] 
#[1 2 45 0 5 8 134 0 6 8 134 0 11 8 134 0 24 18 73 0 29 8 134 0 37 8 134 0 215 18 213 0 235 20 37 1 52 18 73 1 54 8 9 1 87 2 113 1 88 2 117 1 89 18 77 1 92 8 17 1 166] 
#[0 9 118 0 46 0 47 0 149 0 157 0 229] 
#[1 9 122 0 6 9 122 0 11 2 81 0 24 20 41 0 37 9 122 0 215 20 45 0 239] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 20 49 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 20 49 1 86] 
#[1 9 126 0 17 20 53 0 37 9 126 0 106 9 126 0 108 9 126 0 215] 
#[1 20 57 0 6 3 153 0 215 20 57 0 236] 
#[0 9 130 0 17 0 106 0 108 0 215] 
#[0 9 134 0 17 0 106 0 108 0 215] 
#[1 20 61 0 6 3 153 0 215 20 61 0 236] 
#[1 20 65 0 17 20 69 0 215] 
#[0 9 138 0 19 0 88 0 229] 
#[0 9 142 0 19 0 88 0 229] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 20 73 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[1 20 77 0 17 20 81 0 215] 
#[1 0 73 0 19 20 85 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 0 73 0 19 20 89 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 20 93 0 17 20 97 0 215] 
#[1 9 146 0 11 9 146 0 17 2 101 0 29 9 146 0 215 20 101 1 84] 
#[1 20 105 0 17 20 109 0 215] 
#[0 20 113 0 114] 
#[1 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 20 117 1 64 20 121 1 110 20 125 1 142 20 129 1 184] 
#[0 9 150 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 5 0 40 1 153 0 70 2 5 0 78 1 161 0 79 2 5 0 81 1 169 0 89 2 5 0 98 1 177 0 114 2 5 0 120 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 1 245 0 183 2 5 0 203 2 5 0 205 2 5 0 206 2 5 2 136] 
#[0 9 154 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 158 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 162 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 166 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 165 0 100 20 149 0 154 20 149 0 173 2 169 0 184 20 141 1 104 20 145 1 105 20 149 1 115] 
#[0 9 170 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 174 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 20 153 0 93 20 161 0 173 20 161 1 144] 
#[0 9 178 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 20 193 0 78 20 193 0 154 20 173 0 161 20 193 0 166 20 193 0 173 20 193 0 206 20 189 1 172 20 193 1 186] 
#[0 20 197 0 114] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 20 201 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 20 205 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 20 209 0 17 20 213 0 215] 
#[1 2 5 0 40 2 137 0 70 20 217 0 72 20 221 0 74 20 225 0 77 2 5 0 78 2 141 0 79 2 5 0 81 2 145 0 89 20 229 0 93 2 5 0 98 2 165 0 100 2 149 0 114 2 5 0 120 2 5 0 132 16 241 0 133 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 20 233 0 161 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 157 0 183 20 237 0 184 2 5 0 203 2 5 0 205 2 5 0 206 20 241 1 104 20 245 1 105 20 249 1 114 20 253 1 172 21 1 1 185 2 5 2 136] 
#[1 17 21 0 40 17 21 0 78 17 21 0 81 17 21 0 98 17 21 0 120 17 21 0 132 17 21 0 137 17 21 0 141 17 21 0 142 17 21 0 154 17 21 0 155 17 21 0 156 17 21 0 158 17 21 0 160 17 21 0 162 17 21 0 163 17 21 0 166 17 21 0 173 17 21 0 174 17 21 0 203 17 21 0 205 17 21 0 206 14 189 0 229 21 5 1 158 14 141 1 161 14 145 1 162 14 149 1 165 17 21 2 136] 
#[1 21 9 0 229 21 13 1 152 21 17 1 155] 
#[0 21 21 0 93] 
#[1 21 45 0 36 21 45 0 41 21 33 0 100 21 37 0 184 21 45 0 197 21 45 1 123] 
#[0 21 49 0 229] 
#[1 2 147 0 40 2 147 0 78 2 147 0 81 2 147 0 98 9 182 0 100 2 147 0 120 2 147 0 132 2 147 0 137 2 147 0 141 2 147 0 142 2 147 0 154 2 147 0 155 2 147 0 156 2 147 0 158 2 147 0 160 9 186 0 161 2 147 0 162 2 147 0 163 2 147 0 166 2 147 0 173 2 147 0 174 9 182 0 184 2 147 0 203 2 147 0 205 2 147 0 206] 
#[0 21 53 0 229] 
#[1 21 57 0 138 5 49 0 229] 
#[1 21 61 0 106 21 65 0 108 21 69 0 215 21 73 1 95 21 77 1 116 21 81 1 133] 
#[1 21 61 0 106 21 65 0 108 21 85 0 215 21 73 1 95 21 89 1 116 21 81 1 133] 
#[1 0 26 0 40 0 26 0 78 0 26 0 81 0 26 0 98 0 26 0 100 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 184 0 26 0 203 0 26 0 205 0 26 0 206 21 93 1 64] 
#[1 21 65 0 108 21 97 0 215 21 101 1 95] 
#[1 0 26 0 40 0 26 0 78 0 26 0 81 0 26 0 98 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 161 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 203 0 26 0 205 0 26 0 206 21 105 1 64] 
#[1 21 109 0 17 21 113 0 215] 
#[0 9 190 0 40 0 78 0 81 0 98 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 203 0 205 0 206 0 229] 
#[1 21 117 0 17 21 121 0 215] 
#[0 21 125 0 183] 
#[0 9 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 9 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 129 0 183] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 21 133 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 21 137 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[0 9 230 0 6 0 11 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 21 141 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86] 
#[1 21 145 0 6 3 153 0 215 21 145 0 236] 
#[1 21 149 0 215 15 1 0 229 21 153 2 108 15 9 2 111] 
#[0 21 157 0 115] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 21 161 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 21 165 2 23 21 165 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 21 165 2 30 21 165 2 31 4 13 2 32 21 165 2 39 21 165 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 21 165 2 73 21 165 2 74 21 165 2 75 21 165 2 76 21 165 2 77 21 165 2 78 21 165 2 79 21 165 2 80 21 165 2 81 21 165 2 82 21 165 2 83 21 165 2 84 21 165 2 85 21 165 2 86 21 165 2 87 21 165 2 88 21 165 2 89 21 165 2 90 21 165 2 91 21 165 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 21 165 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 21 165 2 135] 
#[1 6 57 0 3 9 234 0 4 9 234 0 5 9 234 0 6 6 61 0 7 9 234 0 8 6 65 0 9 9 234 0 10 9 234 0 11 6 69 0 12 9 234 0 13 6 73 0 15 9 234 0 16 9 234 0 17 6 77 0 19 6 81 0 20 9 234 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 9 234 0 28 9 234 0 32 6 109 0 34 6 113 0 35 9 234 0 38 9 234 0 45 9 234 0 80 9 234 0 83 9 234 0 87 9 234 0 90 9 234 0 99 9 234 0 105 9 234 0 108 9 234 0 110 9 234 0 115 6 117 0 116 6 121 0 118 9 234 0 121 9 234 0 123 6 125 0 125 6 129 0 130 9 234 0 146 6 133 0 150 6 137 0 151 9 234 0 152 9 234 0 171 9 234 0 177 9 234 0 179 9 234 0 186 9 234 0 188 9 234 0 190 9 234 0 201 6 141 0 207 6 145 0 209 9 234 0 210 6 149 0 211 9 234 0 212 9 234 0 214 9 234 0 215] 
#[1 15 1 0 229 21 169 2 108 15 9 2 111] 
#[0 9 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 21 173 0 215 15 1 0 229 21 177 2 108 15 9 2 111] 
#[1 21 181 0 6 3 153 0 215 21 181 0 236] 
#[1 21 185 0 6 3 153 0 215 21 185 0 236] 
#[0 9 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 189 0 228] 
#[1 0 7 0 5 1 27 0 6 1 27 0 14 0 230 0 29 1 27 0 215 12 201 0 235 5 109 1 46 5 113 1 47 21 193 2 36 21 197 2 37] 
#[1 21 201 0 6 2 241 0 11 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 3 153 0 215 1 29 0 229 4 217 0 234 21 201 0 236 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 5 121 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86 21 205 1 91 21 209 2 38] 
#[1 21 213 0 215 21 217 0 228] 
#[0 9 246 0 6 0 14 0 215] 
#[1 9 250 0 6 17 145 0 14 9 250 0 215 17 149 2 35] 
#[1 6 57 0 3 21 225 0 6 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 21 221 0 234 21 225 0 236] 
#[0 21 229 0 228] 
#[1 4 38 0 1 4 38 0 3 0 107 0 5 4 38 0 7 4 38 0 9 4 38 0 11 4 38 0 12 4 38 0 14 4 38 0 15 4 38 0 19 4 38 0 20 4 38 0 22 4 38 0 23 2 81 0 24 4 38 0 25 4 38 0 26 4 38 0 27 4 38 0 34 4 38 0 35 4 38 0 116 4 38 0 118 4 38 0 125 4 38 0 130 4 38 0 150 4 38 0 151 4 38 0 207 4 38 0 209 4 38 0 211 4 38 0 214 4 38 0 215 7 193 0 235 21 233 0 239] 
#[1 21 237 0 215 21 241 0 228] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 9 254 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 9 254 0 214 9 254 0 215] 
#[0 10 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 11 10 6 0 214 10 6 0 215 21 245 0 234 21 249 2 58] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 21 253 2 23 21 253 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 21 253 2 30 21 253 2 31 4 13 2 32 21 253 2 39 21 253 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 21 253 2 73 21 253 2 74 21 253 2 75 21 253 2 76 21 253 2 77 21 253 2 78 21 253 2 79 21 253 2 80 21 253 2 81 21 253 2 82 21 253 2 83 21 253 2 84 21 253 2 85 21 253 2 86 21 253 2 87 21 253 2 88 21 253 2 89 21 253 2 90 21 253 2 91 21 253 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 21 253 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 21 253 2 135] 
#[0 10 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 14 0 3 10 14 0 4 2 151 0 5 10 14 0 6 10 14 0 7 10 14 0 8 10 14 0 9 10 14 0 10 10 14 0 11 10 14 0 12 10 14 0 13 10 14 0 15 10 14 0 16 10 14 0 17 10 14 0 19 10 14 0 20 10 14 0 21 10 14 0 22 10 14 0 23 10 14 0 24 10 14 0 25 10 14 0 26 10 14 0 27 10 14 0 28 10 14 0 32 10 14 0 34 10 14 0 35 10 14 0 37 10 14 0 38 10 14 0 45 10 14 0 80 10 14 0 83 10 14 0 87 10 14 0 90 10 14 0 99 10 14 0 105 10 14 0 108 10 14 0 110 10 14 0 115 10 14 0 116 10 14 0 118 10 14 0 121 10 14 0 123 10 14 0 125 10 14 0 130 10 14 0 146 10 14 0 150 10 14 0 151 10 14 0 152 10 14 0 171 10 14 0 177 10 14 0 179 10 14 0 186 10 14 0 188 10 14 0 190 10 14 0 201 10 14 0 207 10 14 0 209 10 14 0 210 10 14 0 211 10 14 0 212 10 14 0 213 10 14 0 214 10 14 0 215 2 105 0 235 22 1 1 87 2 113 1 88 2 117 1 89] 
#[1 10 18 0 6 2 241 0 11 10 18 0 215 22 5 0 234 22 9 1 168] 
#[1 10 22 0 1 10 22 0 3 10 22 0 4 10 22 0 5 10 22 0 6 10 22 0 7 10 22 0 8 10 22 0 9 10 22 0 10 10 22 0 11 10 22 0 12 10 22 0 13 10 22 0 14 10 22 0 15 10 22 0 16 10 22 0 17 10 22 0 19 10 22 0 20 10 22 0 21 10 22 0 22 10 22 0 23 10 22 0 24 10 22 0 25 10 22 0 26 10 22 0 27 10 22 0 28 10 22 0 32 10 22 0 34 10 22 0 35 10 22 0 38 10 22 0 45 10 22 0 80 10 22 0 83 10 22 0 87 10 22 0 90 2 155 0 99 10 22 0 105 10 22 0 108 10 22 0 110 10 22 0 115 10 22 0 116 10 22 0 118 10 22 0 121 10 22 0 123 10 22 0 125 10 22 0 130 10 22 0 146 10 22 0 150 10 22 0 151 10 22 0 152 10 22 0 171 10 22 0 177 10 22 0 179 10 22 0 186 10 22 0 188 10 22 0 190 10 22 0 201 5 221 0 204 10 22 0 207 10 22 0 209 10 22 0 210 10 22 0 211 10 22 0 212 10 22 0 214 10 22 0 215 22 13 2 55 22 13 2 56 22 13 2 61] 
#[1 22 17 0 6 3 153 0 215 22 17 0 236] 
#[0 10 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 30 0 1 2 159 0 3 2 159 0 4 2 159 0 5 2 159 0 6 2 159 0 7 2 159 0 8 2 159 0 9 2 159 0 10 2 159 0 11 2 159 0 12 2 159 0 13 2 159 0 14 2 159 0 15 2 159 0 16 2 159 0 17 2 159 0 19 2 159 0 20 2 159 0 21 2 159 0 22 2 159 0 23 2 159 0 24 2 159 0 25 2 159 0 26 2 159 0 27 2 159 0 28 4 210 0 29 2 159 0 32 2 159 0 34 2 159 0 35 2 159 0 38 2 159 0 45 2 159 0 80 2 159 0 83 2 159 0 87 2 159 0 90 2 159 0 99 2 159 0 105 2 159 0 108 2 159 0 110 2 159 0 115 2 159 0 116 2 159 0 118 2 159 0 121 2 159 0 123 2 159 0 125 2 159 0 130 2 159 0 146 2 159 0 150 2 159 0 151 2 159 0 152 2 159 0 171 2 159 0 177 2 159 0 179 2 159 0 186 2 159 0 188 2 159 0 190 2 159 0 201 2 159 0 207 2 159 0 209 2 159 0 210 2 159 0 211 2 159 0 212 2 159 0 214 2 159 0 215] 
#[0 10 34 0 11 0 214 0 215] 
#[0 22 21 0 144] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 22 25 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86] 
#[1 6 57 0 3 10 38 0 6 6 61 0 7 6 65 0 9 10 38 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 10 38 0 215 22 29 2 52] 
#[1 3 1 0 1 2 45 0 5 10 42 0 6 3 9 0 9 10 42 0 11 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 10 42 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 33 2 23 22 33 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 33 2 30 22 33 2 31 4 13 2 32 22 33 2 39 22 33 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 33 2 73 22 33 2 74 22 33 2 75 22 33 2 76 22 33 2 77 22 33 2 78 22 33 2 79 22 33 2 80 22 33 2 81 22 33 2 82 22 33 2 83 22 33 2 84 22 33 2 85 22 33 2 86 22 33 2 87 22 33 2 88 22 33 2 89 22 33 2 90 22 33 2 91 22 33 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 33 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 33 2 135] 
#[0 10 46 0 6 0 11 0 215] 
#[0 10 50 0 6 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 37 1 193 13 185 1 195] 
#[0 22 41 0 100] 
#[1 3 1 0 1 10 54 0 3 10 54 0 4 2 163 0 5 10 54 0 6 10 54 0 7 10 54 0 8 3 9 0 9 10 54 0 10 10 54 0 11 3 13 0 12 10 54 0 13 3 17 0 14 10 54 0 15 10 54 0 16 10 54 0 17 10 54 0 19 10 54 0 20 10 54 0 21 10 54 0 22 10 54 0 23 10 54 0 24 10 54 0 25 10 54 0 26 10 54 0 27 10 54 0 28 9 81 0 30 3 21 0 31 2 167 0 32 10 54 0 34 10 54 0 35 10 54 0 38 1 206 0 40 3 29 0 42 1 57 0 44 10 54 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 10 54 0 80 9 233 0 81 3 101 0 82 10 54 0 83 9 101 0 84 1 57 0 85 10 54 0 87 9 105 0 88 10 54 0 90 9 109 0 91 9 113 0 92 9 117 0 94 9 121 0 97 2 171 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 10 54 0 105 9 129 0 107 10 54 0 108 10 54 0 110 1 57 0 113 10 54 0 115 10 54 0 116 10 54 0 118 1 206 0 120 10 54 0 121 10 54 0 123 10 54 0 125 1 57 0 126 3 121 0 128 9 133 0 129 10 54 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 2 175 0 146 10 54 0 150 10 54 0 151 10 54 0 152 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 2 179 0 171 1 57 0 175 1 57 0 176 10 54 0 177 9 233 0 178 10 54 0 179 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 10 54 0 186 10 54 0 188 9 177 0 189 10 54 0 190 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 10 54 0 201 9 189 0 202 9 193 0 204 10 54 0 207 9 197 0 208 10 54 0 209 10 54 0 210 10 54 0 211 10 54 0 212 3 149 0 213 10 54 0 214 10 54 0 215 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 209 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 45 1 192 22 45 1 196 9 225 1 197 22 45 1 201 9 233 1 202 22 45 1 203 22 45 1 204 22 45 1 205 22 45 1 206 22 45 1 207 22 45 1 208 22 45 1 209 22 45 1 210 22 45 1 211 22 45 1 213 22 45 1 214 22 45 1 215 22 45 1 216 22 45 1 217 22 45 1 221 22 45 1 223 22 45 1 232 22 45 1 233 22 45 1 234 22 45 1 235 22 45 1 236 22 45 1 238 22 45 1 243 22 45 1 244 22 45 1 245 22 45 1 246 22 45 1 250 22 45 1 251 22 45 1 252 22 45 1 253 22 45 1 255 22 45 2 1 22 45 2 2 22 45 2 3 22 45 2 5 22 45 2 7 22 45 2 8 22 45 2 9 22 45 2 10 22 45 2 11 22 45 2 16 22 45 2 20 22 45 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[0 10 58 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[1 10 62 0 3 10 62 0 4 10 62 0 5 10 62 0 6 10 62 0 7 10 62 0 8 10 62 0 9 10 62 0 10 10 62 0 11 10 62 0 12 10 62 0 13 10 62 0 15 10 62 0 16 2 183 0 17 10 62 0 19 10 62 0 20 10 62 0 21 10 62 0 22 10 62 0 23 10 62 0 24 10 62 0 25 10 62 0 26 10 62 0 27 10 62 0 28 10 62 0 32 10 62 0 34 10 62 0 35 10 62 0 38 10 62 0 45 10 62 0 80 10 62 0 83 10 62 0 87 10 62 0 90 10 62 0 99 10 62 0 105 10 62 0 108 10 62 0 110 10 62 0 115 10 62 0 116 10 62 0 118 10 62 0 121 10 62 0 123 10 62 0 125 10 62 0 130 10 62 0 146 10 62 0 150 10 62 0 151 10 62 0 152 10 62 0 171 10 62 0 177 10 62 0 179 10 62 0 186 10 62 0 188 10 62 0 190 10 62 0 201 10 62 0 207 10 62 0 209 10 62 0 210 10 62 0 211 10 62 0 212 10 62 0 214 10 62 0 215 18 17 1 199 22 49 1 200] 
#[0 10 66 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[0 22 53 0 215] 
#[0 10 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 74 0 3 10 74 0 4 10 74 0 5 10 74 0 6 10 74 0 7 10 74 0 8 10 74 0 9 10 74 0 10 10 74 0 11 10 74 0 12 10 74 0 13 10 74 0 15 10 74 0 16 2 187 0 17 10 74 0 19 10 74 0 20 10 74 0 21 10 74 0 22 10 74 0 23 10 74 0 24 10 74 0 25 10 74 0 26 10 74 0 27 10 74 0 28 10 74 0 32 10 74 0 34 10 74 0 35 10 74 0 38 10 74 0 45 10 74 0 80 10 74 0 83 10 74 0 87 10 74 0 90 10 74 0 99 10 74 0 105 10 74 0 108 10 74 0 110 10 74 0 115 10 74 0 116 10 74 0 118 10 74 0 121 10 74 0 123 10 74 0 125 10 74 0 130 10 74 0 146 10 74 0 150 10 74 0 151 10 74 0 152 10 74 0 171 10 74 0 177 10 74 0 179 10 74 0 186 10 74 0 188 10 74 0 190 10 74 0 201 10 74 0 207 10 74 0 209 10 74 0 210 10 74 0 211 10 74 0 212 10 74 0 214 10 74 0 215 22 57 1 199] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 22 61 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 61 1 86] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 65 1 193 13 185 1 195] 
#[1 6 57 0 3 10 78 0 4 10 78 0 5 10 78 0 6 6 61 0 7 10 78 0 8 6 65 0 9 10 78 0 10 10 78 0 11 6 69 0 12 10 78 0 13 6 73 0 15 10 78 0 16 10 78 0 17 6 77 0 19 6 81 0 20 10 78 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 78 0 28 10 78 0 32 6 109 0 34 6 113 0 35 10 78 0 38 10 78 0 45 10 78 0 80 10 78 0 83 10 78 0 87 10 78 0 90 10 78 0 99 10 78 0 105 10 78 0 108 10 78 0 110 10 78 0 115 6 117 0 116 6 121 0 118 10 78 0 121 10 78 0 123 6 125 0 125 6 129 0 130 10 78 0 146 6 133 0 150 6 137 0 151 10 78 0 152 10 78 0 171 10 78 0 177 10 78 0 179 10 78 0 186 10 78 0 188 10 78 0 190 10 78 0 201 6 141 0 207 6 145 0 209 10 78 0 210 6 149 0 211 10 78 0 212 10 78 0 214 10 78 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 22 69 0 37 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 22 73 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 77 2 23 22 77 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 77 2 30 22 77 2 31 4 13 2 32 22 77 2 39 22 77 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 77 2 73 22 77 2 74 22 77 2 75 22 77 2 76 22 77 2 77 22 77 2 78 22 77 2 79 22 77 2 80 22 77 2 81 22 77 2 82 22 77 2 83 22 77 2 84 22 77 2 85 22 77 2 86 22 77 2 87 22 77 2 88 22 77 2 89 22 77 2 90 22 77 2 91 22 77 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 77 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 77 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 81 2 23 22 81 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 81 2 30 22 81 2 31 4 13 2 32 22 81 2 39 22 81 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 81 2 73 22 81 2 74 22 81 2 75 22 81 2 76 22 81 2 77 22 81 2 78 22 81 2 79 22 81 2 80 22 81 2 81 22 81 2 82 22 81 2 83 22 81 2 84 22 81 2 85 22 81 2 86 22 81 2 87 22 81 2 88 22 81 2 89 22 81 2 90 22 81 2 91 22 81 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 81 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 81 2 135] 
#[0 22 85 0 127] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 22 89 0 215] 
#[1 10 82 0 3 10 82 0 4 10 82 0 5 10 82 0 6 10 82 0 7 10 82 0 8 10 82 0 9 10 82 0 10 2 191 0 11 10 82 0 12 10 82 0 13 10 82 0 15 10 82 0 16 10 82 0 17 10 82 0 19 10 82 0 20 10 82 0 21 10 82 0 22 10 82 0 23 10 82 0 24 10 82 0 25 10 82 0 26 10 82 0 27 10 82 0 28 10 82 0 32 10 82 0 34 10 82 0 35 10 82 0 38 10 82 0 45 10 82 0 80 10 82 0 83 10 82 0 87 10 82 0 90 10 82 0 99 10 82 0 105 10 82 0 108 10 82 0 110 10 82 0 115 10 82 0 116 10 82 0 118 10 82 0 121 10 82 0 123 10 82 0 125 10 82 0 130 10 82 0 146 10 82 0 150 10 82 0 151 10 82 0 152 10 82 0 171 10 82 0 177 10 82 0 179 10 82 0 186 10 82 0 188 10 82 0 190 10 82 0 201 10 82 0 207 10 82 0 209 10 82 0 210 10 82 0 211 10 82 0 212 10 82 0 214 10 82 0 215 22 93 0 234 22 97 2 18] 
#[0 22 101 0 110] 
#[0 10 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 4 221 0 6 3 9 0 9 2 241 0 11 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 8 49 0 144 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 12 245 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 4 217 0 234 3 193 0 235 4 221 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 4 225 1 90 4 229 1 91 12 253 1 167 13 1 1 170 22 105 2 23 22 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 105 2 30 22 105 2 31 4 13 2 32 22 105 2 39 22 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 105 2 73 22 105 2 74 22 105 2 75 22 105 2 76 22 105 2 77 22 105 2 78 22 105 2 79 22 105 2 80 22 105 2 81 22 105 2 82 22 105 2 83 22 105 2 84 22 105 2 85 22 105 2 86 22 105 2 87 22 105 2 88 22 105 2 89 22 105 2 90 22 105 2 91 22 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 105 2 135] 
#[0 22 109 0 37] 
#[1 10 90 0 3 10 90 0 4 2 195 0 5 10 90 0 6 10 90 0 7 10 90 0 8 10 90 0 9 10 90 0 10 10 90 0 11 10 90 0 12 10 90 0 13 10 90 0 15 10 90 0 16 10 90 0 17 10 90 0 19 10 90 0 20 10 90 0 21 10 90 0 22 10 90 0 23 10 90 0 24 10 90 0 25 10 90 0 26 10 90 0 27 10 90 0 28 10 90 0 32 10 90 0 34 10 90 0 35 10 90 0 37 10 90 0 38 10 90 0 45 10 90 0 80 10 90 0 83 10 90 0 87 10 90 0 90 10 90 0 99 10 90 0 105 10 90 0 108 10 90 0 110 10 90 0 115 10 90 0 116 10 90 0 118 10 90 0 121 10 90 0 123 10 90 0 125 10 90 0 130 10 90 0 146 10 90 0 150 10 90 0 151 10 90 0 152 10 90 0 171 10 90 0 177 10 90 0 179 10 90 0 186 10 90 0 188 10 90 0 190 10 90 0 201 10 90 0 207 10 90 0 209 10 90 0 210 10 90 0 211 10 90 0 212 10 90 0 214 10 90 0 215 18 213 0 235 8 9 1 87 2 113 1 88 2 117 1 89 22 113 1 92 8 17 1 166] 
#[0 10 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 117 2 23 22 117 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 117 2 30 22 117 2 31 4 13 2 32 22 117 2 39 22 117 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 117 2 73 22 117 2 74 22 117 2 75 22 117 2 76 22 117 2 77 22 117 2 78 22 117 2 79 22 117 2 80 22 117 2 81 22 117 2 82 22 117 2 83 22 117 2 84 22 117 2 85 22 117 2 86 22 117 2 87 22 117 2 88 22 117 2 89 22 117 2 90 22 117 2 91 22 117 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 117 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 117 2 135] 
#[1 6 57 0 3 8 53 0 6 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 12 217 0 234 8 53 0 236] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 22 121 1 193 13 185 1 195] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 22 125 0 17 9 81 0 30 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 9 233 0 81 3 101 0 82 9 101 0 84 1 57 0 85 9 105 0 88 9 109 0 91 9 113 0 92 9 117 0 94 9 121 0 97 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 9 129 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 9 133 0 129 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 9 137 0 146 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 9 161 0 171 1 57 0 175 1 57 0 176 9 233 0 178 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 9 177 0 189 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 9 189 0 202 9 193 0 204 9 197 0 208 3 149 0 213 22 129 0 215 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 209 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 5 1 192 18 5 1 196 9 225 1 197 22 133 1 198 18 17 1 199 18 21 1 200 18 5 1 201 9 233 1 202 18 5 1 203 18 5 1 204 18 5 1 205 18 5 1 206 18 5 1 207 18 5 1 208 18 5 1 209 18 5 1 210 18 5 1 211 18 5 1 213 18 5 1 214 18 5 1 215 18 5 1 216 18 5 1 217 18 5 1 221 18 5 1 223 18 5 1 232 18 5 1 233 18 5 1 234 18 5 1 235 18 5 1 236 18 5 1 238 18 5 1 243 18 5 1 244 18 5 1 245 18 5 1 246 18 5 1 250 18 5 1 251 18 5 1 252 18 5 1 253 18 5 1 255 18 5 2 1 18 5 2 2 18 5 2 3 18 5 2 5 18 5 2 7 18 5 2 8 18 5 2 9 18 5 2 10 18 5 2 11 18 5 2 16 18 5 2 20 18 5 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 22 137 1 193 13 185 1 195] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 141 2 23 22 141 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 141 2 30 22 141 2 31 4 13 2 32 22 141 2 39 22 141 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 141 2 73 22 141 2 74 22 141 2 75 22 141 2 76 22 141 2 77 22 141 2 78 22 141 2 79 22 141 2 80 22 141 2 81 22 141 2 82 22 141 2 83 22 141 2 84 22 141 2 85 22 141 2 86 22 141 2 87 22 141 2 88 22 141 2 89 22 141 2 90 22 141 2 91 22 141 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 141 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 141 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 22 145 0 234] 
#[1 22 149 0 12 22 153 0 220 14 49 0 221 14 49 0 229 14 49 1 197] 
#[0 22 157 0 139] 
#[0 10 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 10 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 22 161 0 6 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 37 0 228 3 189 0 229 3 193 0 235 22 161 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 45 2 23 9 45 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 45 2 30 9 45 2 31 4 13 2 32 9 45 2 39 9 45 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 22 165 2 46 9 53 2 47 9 57 2 50 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 45 2 73 9 45 2 74 9 45 2 75 9 45 2 76 9 45 2 77 9 45 2 78 9 45 2 79 9 45 2 80 9 45 2 81 9 45 2 82 9 45 2 83 9 45 2 84 9 45 2 85 9 45 2 86 9 45 2 87 9 45 2 88 9 45 2 89 9 45 2 90 9 45 2 91 9 45 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 45 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 45 2 135] 
#[0 10 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 110 0 3 10 110 0 4 10 110 0 5 10 110 0 6 10 110 0 7 10 110 0 8 10 110 0 9 10 110 0 10 2 199 0 11 10 110 0 12 10 110 0 13 10 110 0 15 10 110 0 16 10 110 0 17 10 110 0 19 10 110 0 20 10 110 0 21 10 110 0 22 10 110 0 23 10 110 0 24 10 110 0 25 10 110 0 26 10 110 0 27 10 110 0 28 10 110 0 32 10 110 0 34 10 110 0 35 10 110 0 38 10 110 0 45 10 110 0 80 10 110 0 83 10 110 0 87 10 110 0 90 10 110 0 99 10 110 0 105 10 110 0 108 10 110 0 110 10 110 0 115 10 110 0 116 10 110 0 118 10 110 0 121 10 110 0 123 10 110 0 125 10 110 0 130 10 110 0 146 10 110 0 150 10 110 0 151 10 110 0 152 10 110 0 171 10 110 0 177 10 110 0 179 10 110 0 186 10 110 0 188 10 110 0 190 10 110 0 201 10 110 0 207 10 110 0 209 10 110 0 210 10 110 0 211 10 110 0 212 10 110 0 214 10 110 0 215 22 169 0 234 22 173 2 13] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 12 245 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 12 253 1 167 13 1 1 170 22 105 2 23 22 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 105 2 30 22 105 2 31 4 13 2 32 22 105 2 39 22 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 105 2 73 22 105 2 74 22 105 2 75 22 105 2 76 22 105 2 77 22 105 2 78 22 105 2 79 22 105 2 80 22 105 2 81 22 105 2 82 22 105 2 83 22 105 2 84 22 105 2 85 22 105 2 86 22 105 2 87 22 105 2 88 22 105 2 89 22 105 2 90 22 105 2 91 22 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 105 2 135] 
#[0 10 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 177 2 23 22 177 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 177 2 30 22 177 2 31 4 13 2 32 22 177 2 39 22 177 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 177 2 73 22 177 2 74 22 177 2 75 22 177 2 76 22 177 2 77 22 177 2 78 22 177 2 79 22 177 2 80 22 177 2 81 22 177 2 82 22 177 2 83 22 177 2 84 22 177 2 85 22 177 2 86 22 177 2 87 22 177 2 88 22 177 2 89 22 177 2 90 22 177 2 91 22 177 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 177 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 177 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 22 181 0 215] 
#[1 10 118 0 67 10 118 0 88 22 185 1 224] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 189 1 193 13 185 1 195] 
#[1 10 122 0 68 10 122 0 88 10 122 0 96 22 193 1 247] 
#[0 10 126 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 130 0 3 10 130 0 4 10 130 0 5 10 130 0 6 10 130 0 7 10 130 0 8 10 130 0 9 10 130 0 10 2 203 0 11 10 130 0 12 10 130 0 13 10 130 0 15 10 130 0 16 10 130 0 17 10 130 0 19 10 130 0 20 10 130 0 21 10 130 0 22 10 130 0 23 10 130 0 24 10 130 0 25 10 130 0 26 10 130 0 27 10 130 0 28 10 130 0 32 10 130 0 34 10 130 0 35 10 130 0 38 10 130 0 45 10 130 0 80 10 130 0 83 10 130 0 87 10 130 0 90 10 130 0 99 10 130 0 105 10 130 0 108 10 130 0 110 10 130 0 115 10 130 0 116 10 130 0 118 10 130 0 121 10 130 0 123 10 130 0 125 10 130 0 130 10 130 0 146 10 130 0 150 10 130 0 151 10 130 0 152 10 130 0 171 10 130 0 177 10 130 0 179 10 130 0 186 10 130 0 188 10 130 0 190 10 130 0 201 10 130 0 207 10 130 0 209 10 130 0 210 10 130 0 211 10 130 0 212 10 130 0 214 10 130 0 215 22 197 0 234 22 201 1 159] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 22 205 0 138 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 22 209 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 209 1 86 22 213 2 54] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 217 2 23 22 217 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 217 2 30 22 217 2 31 4 13 2 32 22 217 2 39 22 217 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 217 2 73 22 217 2 74 22 217 2 75 22 217 2 76 22 217 2 77 22 217 2 78 22 217 2 79 22 217 2 80 22 217 2 81 22 217 2 82 22 217 2 83 22 217 2 84 22 217 2 85 22 217 2 86 22 217 2 87 22 217 2 88 22 217 2 89 22 217 2 90 22 217 2 91 22 217 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 217 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 217 2 135] 
#[1 10 134 0 3 10 134 0 4 10 134 0 5 10 134 0 6 10 134 0 7 10 134 0 8 10 134 0 9 10 134 0 10 2 207 0 11 10 134 0 12 10 134 0 13 10 134 0 15 10 134 0 16 10 134 0 17 10 134 0 19 10 134 0 20 10 134 0 21 10 134 0 22 10 134 0 23 10 134 0 24 10 134 0 25 10 134 0 26 10 134 0 27 10 134 0 28 10 134 0 32 10 134 0 34 10 134 0 35 10 134 0 37 10 134 0 38 10 134 0 45 10 134 0 80 10 134 0 83 10 134 0 87 10 134 0 90 10 134 0 99 10 134 0 105 10 134 0 108 10 134 0 110 10 134 0 115 10 134 0 116 10 134 0 118 10 134 0 121 10 134 0 123 10 134 0 125 10 134 0 130 10 134 0 146 10 134 0 150 10 134 0 151 10 134 0 152 10 134 0 171 10 134 0 177 10 134 0 179 10 134 0 186 10 134 0 188 10 134 0 190 10 134 0 201 10 134 0 207 10 134 0 209 10 134 0 210 10 134 0 211 10 134 0 212 10 134 0 214 10 134 0 215 22 221 0 234 22 225 1 163] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 229 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 233 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 237 1 193 13 185 1 195] 
#[0 22 241 0 184] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 22 245 1 193 13 185 1 195] 
#[0 10 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 9 81 0 30 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 9 233 0 81 3 101 0 82 9 101 0 84 1 57 0 85 9 105 0 88 9 109 0 91 9 113 0 92 9 117 0 94 9 121 0 97 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 9 129 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 9 133 0 129 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 9 137 0 146 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 9 161 0 171 1 57 0 175 1 57 0 176 9 233 0 178 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 9 177 0 189 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 9 189 0 202 9 193 0 204 9 197 0 208 3 149 0 213 22 249 0 215 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 209 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 253 1 192 22 253 1 196 9 225 1 197 22 253 1 201 9 233 1 202 22 253 1 203 22 253 1 204 22 253 1 205 22 253 1 206 22 253 1 207 22 253 1 208 22 253 1 209 22 253 1 210 22 253 1 211 22 253 1 213 22 253 1 214 22 253 1 215 22 253 1 216 22 253 1 217 22 253 1 221 22 253 1 223 22 253 1 232 22 253 1 233 22 253 1 234 22 253 1 235 22 253 1 236 22 253 1 238 22 253 1 243 22 253 1 244 22 253 1 245 22 253 1 246 22 253 1 250 22 253 1 251 22 253 1 252 22 253 1 253 22 253 1 255 22 253 2 1 22 253 2 2 22 253 2 3 22 253 2 5 22 253 2 7 22 253 2 8 22 253 2 9 22 253 2 10 22 253 2 11 22 253 2 16 22 253 2 20 22 253 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[1 3 1 0 1 2 45 0 5 4 221 0 6 3 9 0 9 2 241 0 11 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 12 245 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 4 217 0 234 3 193 0 235 4 221 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 4 225 1 90 4 229 1 91 12 253 1 167 13 1 1 170 22 105 2 23 22 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 105 2 30 22 105 2 31 4 13 2 32 22 105 2 39 22 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 105 2 73 22 105 2 74 22 105 2 75 22 105 2 76 22 105 2 77 22 105 2 78 22 105 2 79 22 105 2 80 22 105 2 81 22 105 2 82 22 105 2 83 22 105 2 84 22 105 2 85 22 105 2 86 22 105 2 87 22 105 2 88 22 105 2 89 22 105 2 90 22 105 2 91 22 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 105 2 135] 
#[1 2 211 0 1 2 215 0 5 3 9 0 9 3 13 0 12 2 219 0 14 2 223 0 31 2 227 0 32 2 231 0 40 3 29 0 42 2 235 0 44 2 239 0 48 2 243 0 49 2 247 0 50 2 251 0 51 2 255 0 52 3 3 0 53 3 7 0 54 3 11 0 55 3 15 0 56 3 19 0 57 3 23 0 58 3 27 0 59 3 31 0 60 3 35 0 61 3 39 0 62 3 43 0 63 3 47 0 64 3 51 0 65 3 55 0 69 3 59 0 75 3 63 0 76 3 67 0 82 3 71 0 85 3 75 0 99 2 231 0 100 3 79 0 102 3 83 0 103 3 87 0 107 3 91 0 113 2 231 0 120 3 95 0 126 3 99 0 128 3 103 0 134 3 107 0 135 3 111 0 138 3 190 0 140 3 115 0 143 3 119 0 170 3 123 0 175 3 127 0 176 3 131 0 182 2 231 0 184 3 135 0 192 3 139 0 193 3 143 0 194 3 147 0 195 3 151 0 196 3 155 0 213 3 159 0 219 3 163 0 220 3 167 0 222 3 171 0 223 3 175 0 224 3 179 0 225 3 183 0 227 3 187 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 13 89 2 23 13 89 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 13 89 2 30 13 89 2 31 4 13 2 32 13 89 2 39 13 89 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 13 89 2 73 13 89 2 74 13 89 2 75 13 89 2 76 13 89 2 77 13 89 2 78 13 89 2 79 13 89 2 80 13 89 2 81 13 89 2 82 13 89 2 83 13 89 2 84 13 89 2 85 13 89 2 86 13 89 2 87 13 89 2 88 13 89 2 89 13 89 2 90 13 89 2 91 13 89 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 13 89 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 13 89 2 135] 
#[1 6 57 0 3 10 142 0 4 10 142 0 5 10 142 0 6 6 61 0 7 10 142 0 8 6 65 0 9 10 142 0 10 10 142 0 11 6 69 0 12 10 142 0 13 6 73 0 15 10 142 0 16 10 142 0 17 6 77 0 19 6 81 0 20 10 142 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 142 0 28 10 142 0 32 6 109 0 34 6 113 0 35 10 142 0 38 10 142 0 45 10 142 0 80 10 142 0 83 10 142 0 87 10 142 0 90 10 142 0 99 10 142 0 105 10 142 0 108 10 142 0 110 10 142 0 115 6 117 0 116 6 121 0 118 10 142 0 121 10 142 0 123 6 125 0 125 6 129 0 130 10 142 0 146 6 133 0 150 6 137 0 151 10 142 0 152 10 142 0 171 10 142 0 177 10 142 0 179 10 142 0 186 10 142 0 188 10 142 0 190 10 142 0 201 6 141 0 207 6 145 0 209 10 142 0 210 6 149 0 211 10 142 0 212 10 142 0 214 10 142 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 1 2 23 23 1 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 1 2 30 23 1 2 31 4 13 2 32 23 1 2 39 23 1 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 1 2 73 23 1 2 74 23 1 2 75 23 1 2 76 23 1 2 77 23 1 2 78 23 1 2 79 23 1 2 80 23 1 2 81 23 1 2 82 23 1 2 83 23 1 2 84 23 1 2 85 23 1 2 86 23 1 2 87 23 1 2 88 23 1 2 89 23 1 2 90 23 1 2 91 23 1 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 1 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 23 1 2 135] 
#[1 6 57 0 3 10 146 0 4 10 146 0 5 10 146 0 6 6 61 0 7 10 146 0 8 6 65 0 9 10 146 0 10 10 146 0 11 6 69 0 12 10 146 0 13 6 73 0 15 10 146 0 16 10 146 0 17 6 77 0 19 6 81 0 20 10 146 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 146 0 28 10 146 0 32 6 109 0 34 6 113 0 35 10 146 0 38 10 146 0 45 10 146 0 80 10 146 0 83 10 146 0 87 10 146 0 90 10 146 0 99 10 146 0 105 10 146 0 108 10 146 0 110 10 146 0 115 6 117 0 116 6 121 0 118 10 146 0 121 10 146 0 123 6 125 0 125 6 129 0 130 10 146 0 146 6 133 0 150 6 137 0 151 10 146 0 152 10 146 0 171 10 146 0 177 10 146 0 179 10 146 0 186 10 146 0 188 10 146 0 190 10 146 0 201 6 141 0 207 6 145 0 209 10 146 0 210 6 149 0 211 10 146 0 212 10 146 0 214 10 146 0 215] 
#[1 15 1 0 229 23 5 2 108 15 9 2 111] 
#[1 10 150 0 115 23 13 0 215 23 13 2 130] 
#[1 5 181 0 229 23 17 2 107] 
#[1 19 25 0 105 10 165 0 121 23 21 0 146 23 25 0 215 23 29 2 103 10 213 2 113 10 249 2 133] 
#[1 23 33 0 215 15 1 0 229 23 37 2 108 15 9 2 111] 
#[1 23 41 0 45 23 45 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 23 49 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 49 1 86] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 53 2 23 23 53 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 53 2 30 23 53 2 31 4 13 2 32 23 53 2 39 23 53 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 53 2 73 23 53 2 74 23 53 2 75 23 53 2 76 23 53 2 77 23 53 2 78 23 53 2 79 23 53 2 80 23 53 2 81 23 53 2 82 23 53 2 83 23 53 2 84 23 53 2 85 23 53 2 86 23 53 2 87 23 53 2 88 23 53 2 89 23 53 2 90 23 53 2 91 23 53 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 53 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 23 53 2 135] 
#[1 23 57 0 215 15 1 0 229 23 61 2 108 15 9 2 111] 
#[0 23 65 0 45] 
#[1 10 154 0 3 10 154 0 4 10 154 0 5 10 154 0 6 10 154 0 7 10 154 0 8 10 154 0 9 10 154 0 10 3 191 0 11 10 154 0 12 10 154 0 13 10 154 0 15 10 154 0 16 10 154 0 17 10 154 0 19 10 154 0 20 10 154 0 21 10 154 0 22 10 154 0 23 10 154 0 24 10 154 0 25 10 154 0 26 10 154 0 27 10 154 0 28 10 154 0 32 10 154 0 34 10 154 0 35 10 154 0 38 10 154 0 45 10 154 0 80 10 154 0 83 10 154 0 87 10 154 0 90 10 154 0 99 10 154 0 105 10 154 0 108 10 154 0 110 10 154 0 115 10 154 0 116 10 154 0 118 10 154 0 121 10 154 0 123 10 154 0 125 10 154 0 130 10 154 0 146 10 154 0 150 10 154 0 151 10 154 0 152 10 154 0 171 10 154 0 177 10 154 0 179 10 154 0 186 10 154 0 188 10 154 0 190 10 154 0 201 10 154 0 207 10 154 0 209 10 154 0 210 10 154 0 211 10 154 0 212 10 154 0 214 10 154 0 215 23 69 0 234 23 73 2 109] 
#[1 19 25 0 105 10 165 0 121 23 77 0 146 23 81 0 215 23 85 2 103 10 213 2 113 10 249 2 133] 
#[0 14 249 0 121] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 23 89 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 23 97 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 23 105 0 146] 
#[1 23 109 0 146 23 113 0 215] 
#[0 10 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 49 2 23 19 49 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 49 2 30 19 49 2 31 4 13 2 32 19 49 2 39 19 49 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 49 2 73 19 49 2 74 19 49 2 75 19 49 2 76 19 49 2 77 19 49 2 78 19 49 2 79 19 49 2 80 19 49 2 81 19 49 2 82 19 49 2 83 19 49 2 84 19 49 2 85 19 49 2 86 19 49 2 87 19 49 2 88 19 49 2 89 19 49 2 90 19 49 2 91 19 49 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 49 2 98 4 181 2 101 4 185 2 112 23 117 2 124 19 57 2 127 4 189 2 131 4 193 2 134 19 49 2 135] 
#[1 6 57 0 3 10 162 0 4 10 162 0 5 10 162 0 6 6 61 0 7 10 162 0 8 6 65 0 9 10 162 0 10 10 162 0 11 6 69 0 12 10 162 0 13 6 73 0 15 10 162 0 16 10 162 0 17 6 77 0 19 6 81 0 20 10 162 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 162 0 28 10 162 0 32 6 109 0 34 6 113 0 35 3 195 0 38 10 162 0 45 3 199 0 80 10 162 0 83 10 162 0 87 10 162 0 90 10 162 0 99 10 162 0 105 10 162 0 108 10 162 0 110 10 162 0 115 6 117 0 116 6 121 0 118 10 162 0 121 10 162 0 123 6 125 0 125 6 129 0 130 10 162 0 146 6 133 0 150 6 137 0 151 10 162 0 152 10 162 0 171 10 162 0 177 10 162 0 179 10 162 0 186 10 162 0 188 10 162 0 190 10 162 0 201 6 141 0 207 6 145 0 209 10 162 0 210 6 149 0 211 10 162 0 212 10 162 0 214 10 162 0 215 23 129 2 128] 
#[0 10 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 170 0 3 10 170 0 4 10 170 0 5 10 170 0 6 10 170 0 7 10 170 0 8 10 170 0 9 10 170 0 10 10 170 0 11 10 170 0 12 10 170 0 13 10 170 0 15 10 170 0 16 10 170 0 17 10 170 0 19 10 170 0 20 10 170 0 21 10 170 0 22 10 170 0 23 10 170 0 24 10 170 0 25 10 170 0 26 10 170 0 27 10 170 0 28 10 170 0 32 10 170 0 34 10 170 0 35 10 170 0 38 10 170 0 45 10 170 0 80 10 170 0 83 10 170 0 87 10 170 0 90 10 170 0 99 10 170 0 105 10 170 0 108 10 170 0 110 10 170 0 115 10 170 0 116 10 170 0 118 10 170 0 121 10 170 0 123 10 170 0 125 10 170 0 130 10 170 0 146 10 170 0 150 10 170 0 151 10 170 0 152 10 170 0 171 10 170 0 177 10 170 0 179 10 170 0 186 10 170 0 188 10 170 0 190 10 170 0 201 10 170 0 207 10 170 0 209 10 170 0 210 10 170 0 211 10 170 0 212 10 170 0 214 10 170 0 215 23 133 2 126] 
#[0 10 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 137 2 23 23 137 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 137 2 30 23 137 2 31 4 13 2 32 23 137 2 39 23 137 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 137 2 73 23 137 2 74 23 137 2 75 23 137 2 76 23 137 2 77 23 137 2 78 23 137 2 79 23 137 2 80 23 137 2 81 23 137 2 82 23 137 2 83 23 137 2 84 23 137 2 85 23 137 2 86 23 137 2 87 23 137 2 88 23 137 2 89 23 137 2 90 23 137 2 91 23 137 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 137 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 23 137 2 135] 
#[1 6 57 0 3 10 178 0 4 10 178 0 5 10 178 0 6 6 61 0 7 10 178 0 8 6 65 0 9 10 178 0 10 10 178 0 11 6 69 0 12 10 178 0 13 6 73 0 15 10 178 0 16 10 178 0 17 6 77 0 19 6 81 0 20 10 178 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 178 0 28 10 178 0 32 6 109 0 34 6 113 0 35 10 178 0 38 10 178 0 45 10 178 0 80 10 178 0 83 10 178 0 87 10 178 0 90 10 178 0 99 10 178 0 105 10 178 0 108 10 178 0 110 10 178 0 115 6 117 0 116 6 121 0 118 10 178 0 121 10 178 0 123 6 125 0 125 6 129 0 130 10 178 0 146 6 133 0 150 6 137 0 151 10 178 0 152 10 178 0 171 10 178 0 177 10 178 0 179 10 178 0 186 10 178 0 188 10 178 0 190 10 178 0 201 6 141 0 207 6 145 0 209 10 178 0 210 6 149 0 211 10 178 0 212 10 178 0 214 10 178 0 215] 
#[1 6 57 0 3 10 182 0 4 10 182 0 5 10 182 0 6 6 61 0 7 10 182 0 8 6 65 0 9 10 182 0 10 10 182 0 11 6 69 0 12 10 182 0 13 6 73 0 15 10 182 0 16 10 182 0 17 6 77 0 19 6 81 0 20 10 182 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 182 0 28 10 182 0 32 6 109 0 34 6 113 0 35 10 182 0 38 10 182 0 45 10 182 0 80 10 182 0 83 10 182 0 87 10 182 0 90 10 182 0 99 10 182 0 105 10 182 0 108 10 182 0 110 10 182 0 115 6 117 0 116 6 121 0 118 10 182 0 121 10 182 0 123 6 125 0 125 6 129 0 130 10 182 0 146 6 133 0 150 6 137 0 151 10 182 0 152 10 182 0 171 10 182 0 177 10 182 0 179 10 182 0 186 10 182 0 188 10 182 0 190 10 182 0 201 6 141 0 207 6 145 0 209 10 182 0 210 6 149 0 211 10 182 0 212 10 182 0 214 10 182 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 141 2 23 23 141 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 141 2 30 23 141 2 31 4 13 2 32 23 141 2 39 23 141 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 141 2 73 23 141 2 74 23 141 2 75 23 141 2 76 23 141 2 77 23 141 2 78 23 141 2 79 23 141 2 80 23 141 2 81 23 141 2 82 23 141 2 83 23 141 2 84 23 141 2 85 23 141 2 86 23 141 2 87 23 141 2 88 23 141 2 89 23 141 2 90 23 141 2 91 23 141 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 141 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 23 141 2 135] 
#[1 6 57 0 3 10 186 0 4 10 186 0 5 10 186 0 6 6 61 0 7 10 186 0 8 6 65 0 9 10 186 0 10 10 186 0 11 6 69 0 12 10 186 0 13 6 73 0 15 10 186 0 16 10 186 0 17 6 77 0 19 6 81 0 20 10 186 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 186 0 28 10 186 0 32 6 109 0 34 6 113 0 35 10 186 0 38 10 186 0 45 10 186 0 80 10 186 0 83 10 186 0 87 10 186 0 90 10 186 0 99 10 186 0 105 10 186 0 108 10 186 0 110 10 186 0 115 6 117 0 116 6 121 0 118 10 186 0 121 10 186 0 123 6 125 0 125 6 129 0 130 10 186 0 146 6 133 0 150 6 137 0 151 10 186 0 152 10 186 0 171 10 186 0 177 10 186 0 179 10 186 0 186 10 186 0 188 10 186 0 190 10 186 0 201 6 141 0 207 6 145 0 209 10 186 0 210 6 149 0 211 10 186 0 212 10 186 0 214 10 186 0 215] 
#[1 6 57 0 3 10 190 0 4 10 190 0 5 10 190 0 6 6 61 0 7 10 190 0 8 6 65 0 9 10 190 0 10 10 190 0 11 6 69 0 12 10 190 0 13 6 73 0 15 10 190 0 16 10 190 0 17 6 77 0 19 6 81 0 20 10 190 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 190 0 28 10 190 0 32 6 109 0 34 6 113 0 35 10 190 0 38 10 190 0 45 10 190 0 80 10 190 0 83 10 190 0 87 10 190 0 90 10 190 0 99 10 190 0 105 10 190 0 108 10 190 0 110 10 190 0 115 6 117 0 116 6 121 0 118 10 190 0 121 10 190 0 123 6 125 0 125 6 129 0 130 10 190 0 146 6 133 0 150 6 137 0 151 10 190 0 152 10 190 0 171 10 190 0 177 10 190 0 179 10 190 0 186 10 190 0 188 10 190 0 190 10 190 0 201 6 141 0 207 6 145 0 209 10 190 0 210 6 149 0 211 10 190 0 212 10 190 0 214 10 190 0 215] 
#[1 6 57 0 3 10 194 0 4 10 194 0 5 10 194 0 6 6 61 0 7 10 194 0 8 6 65 0 9 10 194 0 10 10 194 0 11 6 69 0 12 10 194 0 13 6 73 0 15 10 194 0 16 10 194 0 17 6 77 0 19 6 81 0 20 10 194 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 10 194 0 28 10 194 0 32 6 109 0 34 6 113 0 35 10 194 0 38 10 194 0 45 10 194 0 80 10 194 0 83 10 194 0 87 10 194 0 90 10 194 0 99 10 194 0 105 10 194 0 108 10 194 0 110 10 194 0 115 6 117 0 116 6 121 0 118 10 194 0 121 10 194 0 123 6 125 0 125 6 129 0 130 10 194 0 146 6 133 0 150 6 137 0 151 10 194 0 152 10 194 0 171 10 194 0 177 10 194 0 179 10 194 0 186 10 194 0 188 10 194 0 190 10 194 0 201 6 141 0 207 6 145 0 209 10 194 0 210 6 149 0 211 10 194 0 212 10 194 0 214 10 194 0 215] 
#[0 23 145 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 23 149 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[0 23 153 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 23 157 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 23 161 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 23 165 1 69] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 23 169 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 11 89 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 11 93 1 55 23 173 1 69] 
#[1 23 177 0 17 23 181 0 215] 
#[1 0 73 0 19 23 185 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 0 73 0 19 23 189 0 88 7 89 0 229 7 93 0 252 0 89 0 253 0 93 0 254 11 217 1 66] 
#[1 23 193 0 17 23 197 0 215] 
#[0 23 201 0 114] 
#[0 23 205 0 114] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 23 209 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 0 73 0 19 0 26 0 40 0 26 0 70 1 107 0 78 0 26 0 79 0 26 0 81 23 213 0 88 0 26 0 89 7 14 0 93 0 26 0 98 7 18 0 100 0 26 0 114 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 1 111 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 7 10 0 161 0 26 0 162 0 26 0 163 1 107 0 166 1 115 0 173 0 26 0 174 0 26 0 183 7 18 0 184 0 26 0 203 0 26 0 205 1 107 0 206 16 149 0 252 0 89 0 253 0 93 0 254 16 161 1 40 16 161 1 63 16 157 1 64 16 161 1 67 16 161 1 72 16 161 1 78 16 161 1 85 16 161 1 93 16 161 1 101 16 161 1 103 16 161 1 109 16 177 1 110 16 161 1 113 16 161 1 141 16 189 1 142 16 161 1 183 16 197 1 184] 
#[1 23 217 0 17 23 221 0 215] 
#[1 23 225 0 17 23 229 0 215] 
#[0 23 233 0 183] 
#[0 23 237 0 183] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 23 241 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 23 245 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 17 37 1 40 17 37 1 63 15 209 1 64 17 37 1 67 17 37 1 72 17 37 1 74 17 37 1 78 17 37 1 93 17 37 1 100 17 37 1 102 17 37 1 107 17 37 1 108 17 37 1 111 17 37 1 112 17 37 1 117 17 37 1 118 17 37 1 120 17 37 1 138 17 37 1 139 17 37 1 140 17 37 1 145 17 37 1 151 17 37 1 156 12 81 1 157 17 37 1 171 17 37 1 173 17 37 1 175 17 37 1 176 17 37 1 190 12 101 2 136] 
#[1 2 241 0 11 10 198 0 17 10 198 0 215 23 249 0 234 23 253 1 57] 
#[0 10 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 24 1 0 17 24 5 0 215] 
#[1 2 5 0 40 2 137 0 70 20 217 0 72 20 221 0 74 20 225 0 77 2 5 0 78 2 141 0 79 2 5 0 81 2 145 0 89 20 229 0 93 2 5 0 98 2 165 0 100 2 149 0 114 2 5 0 120 2 5 0 132 16 241 0 133 2 5 0 137 2 5 0 141 2 5 0 142 24 9 0 147 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 20 233 0 161 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 157 0 183 20 237 0 184 2 5 0 203 2 5 0 205 2 5 0 206 20 241 1 104 20 245 1 105 20 249 1 114 20 253 1 172 21 1 1 185 2 5 2 136] 
#[0 24 109 0 3 0 7 0 9 0 12 0 15 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 34 0 62 0 117 0 119 0 125 0 130 0 140 0 150 0 207 0 209 0 211 1 191] 
#[0 24 113 0 70] 
#[1 24 117 0 17 24 121 0 215] 
#[0 24 125 0 70] 
#[0 10 210 0 6 0 11 0 214 0 215] 
#[0 10 214 0 6 0 11 0 214 0 215] 
#[0 10 218 0 6 0 11 0 214 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 19 217 0 70 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 19 221 0 138 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 19 225 0 183 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 24 129 0 248 24 133 0 251 19 237 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 237 1 86] 
#[0 10 222 0 6 0 11 0 215] 
#[0 10 226 0 6 0 11 0 214 0 215] 
#[1 11 129 0 110 11 129 0 153 11 121 0 229 24 137 0 245 11 129 0 246] 
#[0 10 230 0 5 0 17 0 37 0 106 0 108 0 215] 
#[0 10 234 0 6 0 11 0 215] 
#[0 10 238 0 6 0 11 0 215] 
#[0 24 141 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 24 145 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[0 24 149 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 24 153 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 24 157 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 24 157 1 86] 
#[1 10 242 0 6 10 242 0 11 2 81 0 24 24 161 0 37 10 242 0 215 24 165 0 239] 
#[1 0 73 0 19 4 170 0 44 4 170 0 48 4 170 0 69 4 170 0 75 4 170 0 76 4 170 0 85 4 170 0 103 4 170 0 113 4 170 0 126 4 170 0 143 4 170 0 170 4 170 0 175 4 170 0 176 4 170 0 182 4 170 0 194 4 170 0 195 4 170 0 196 4 170 0 229 11 149 0 252 0 89 0 253 0 93 0 254 24 169 1 106] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 24 173 1 129 11 173 1 130] 
#[0 10 246 0 6 0 11 0 215] 
#[0 10 250 0 6 0 11 0 24 0 37 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 24 177 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 24 177 1 86] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 24 181 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 10 254 0 17 0 106 0 108 0 215] 
#[1 0 73 0 19 4 170 0 44 4 170 0 48 4 170 0 69 4 170 0 75 4 170 0 76 4 170 0 85 4 170 0 103 4 170 0 113 4 170 0 126 4 170 0 143 4 170 0 170 4 170 0 175 4 170 0 176 4 170 0 182 4 170 0 194 4 170 0 195 4 170 0 196 4 170 0 229 11 149 0 252 0 89 0 253 0 93 0 254 24 185 1 106] 
#[1 11 2 0 17 24 189 0 37 11 2 0 106 11 2 0 108 11 2 0 215] 
#[0 11 6 0 17 0 106 0 108 0 215] 
#[0 11 10 0 19 0 88 0 229] 
#[0 11 14 0 19 0 88 0 229] 
#[1 24 193 0 17 24 197 0 215] 
#[0 11 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 11 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 24 201 0 89] 
#[0 24 205 0 89] 
#[0 11 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 11 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 2 241 0 11 11 34 0 17 11 34 0 215 24 209 0 234 24 213 1 83] 
#[0 11 38 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 11 42 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 24 217 0 17 24 221 0 215] 
#[1 2 5 0 40 2 137 0 70 2 5 0 78 2 141 0 79 2 5 0 81 2 145 0 89 2 5 0 98 2 149 0 114 2 5 0 120 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 157 0 183 2 5 0 203 2 5 0 205 2 5 0 206 2 5 2 136] 
#[1 2 165 0 100 20 149 0 154 20 149 0 173 2 169 0 184 24 225 1 104 24 229 1 105 20 149 1 115] 
#[1 24 233 0 93 20 161 0 173 20 161 1 144] 
#[1 20 193 0 78 20 193 0 154 20 173 0 161 20 193 0 166 20 193 0 173 20 193 0 206 24 237 1 172 20 193 1 186] 
#[0 11 46 0 100 0 154 0 173 0 184] 
#[0 11 50 0 100 0 154 0 173 0 184] 
#[1 24 241 0 17 24 245 0 215] 
#[1 24 249 0 17 24 253 0 215] 
#[0 11 54 0 100 0 154 0 173 0 184] 
#[0 25 1 0 229] 
#[0 11 58 0 93 0 173] 
#[0 11 62 0 93 0 173] 
#[0 11 66 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 70 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 25 5 0 229] 
#[0 11 74 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 78 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 82 0 78 0 154 0 161 0 166 0 173 0 206] 
#[1 25 9 0 17 25 13 0 215] 
#[0 11 86 0 78 0 154 0 161 0 166 0 173 0 206] 
#[1 25 17 0 17 25 21 0 215] 
#[0 25 25 0 114] 
#[0 25 29 0 114] 
#[0 11 90 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 11 94 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 21 9 0 229 25 33 1 152 21 17 1 155] 
#[0 25 37 0 93] 
#[1 25 49 0 36 25 49 0 41 25 41 0 100 25 45 0 184 25 49 0 197 25 49 1 123] 
#[0 25 53 0 229] 
#[0 25 57 0 229] 
#[1 25 61 0 138 5 49 0 229] 
#[1 21 61 0 106 21 65 0 108 25 65 0 215 21 73 1 95 25 69 1 116 21 81 1 133] 
#[1 21 61 0 106 21 65 0 108 25 73 0 215 21 73 1 95 25 77 1 116 21 81 1 133] 
#[1 0 26 0 40 0 26 0 78 0 26 0 81 0 26 0 98 0 26 0 100 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 184 0 26 0 203 0 26 0 205 0 26 0 206 25 81 1 64] 
#[1 21 65 0 108 25 85 0 215 25 89 1 95] 
#[1 0 26 0 40 0 26 0 78 0 26 0 81 0 26 0 98 0 26 0 120 0 26 0 132 0 26 0 137 0 26 0 141 0 26 0 142 0 26 0 154 0 26 0 155 0 26 0 156 0 26 0 158 0 26 0 160 0 26 0 161 0 26 0 162 0 26 0 163 0 26 0 166 0 26 0 173 0 26 0 174 0 26 0 203 0 26 0 205 0 26 0 206 25 93 1 64] 
#[1 25 97 0 17 25 101 0 215] 
#[1 2 81 0 24 25 105 0 37 25 109 0 239] 
#[1 25 113 0 17 25 117 0 215] 
#[1 11 98 0 11 11 98 0 17 11 98 0 215 25 121 1 154] 
#[0 25 125 0 229] 
#[0 11 102 0 100 0 184] 
#[0 11 106 0 100 0 184] 
#[0 25 129 0 229] 
#[0 25 133 0 229] 
#[0 11 110 0 100 0 184] 
#[1 25 137 0 100 25 141 0 184] 
#[1 2 45 0 5 11 114 0 17 25 145 0 37 11 114 0 108 11 114 0 215 25 149 0 235 25 153 1 143] 
#[1 2 45 0 5 2 81 0 24 25 157 0 37 3 203 0 108 3 203 0 215 25 161 0 235 25 165 0 239 25 169 1 177 25 173 1 178] 
#[1 2 45 0 5 25 177 0 215 25 181 0 235] 
#[1 25 185 0 128 25 189 0 134 25 193 0 135 25 197 0 229 25 201 1 134 25 205 1 137] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 25 209 1 42 25 209 1 43 25 209 1 44 25 209 1 51 25 209 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 25 213 1 96 25 217 1 99] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 25 221 1 193 13 185 1 195] 
#[0 11 126 0 17 0 215] 
#[0 25 225 0 215] 
#[0 11 130 0 17 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 25 229 1 193 13 185 1 195] 
#[0 25 233 0 215] 
#[1 2 5 0 40 2 5 0 78 2 5 0 81 2 5 0 98 2 165 0 100 2 5 0 120 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 169 0 184 2 5 0 203 2 5 0 205 2 5 0 206 25 237 1 104 25 241 1 105 2 5 2 136] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 26 1 1 174 26 5 1 187 26 5 1 188 26 5 1 189 26 17 2 136] 
#[0 26 21 0 215] 
#[1 2 5 0 40 2 5 0 78 2 5 0 81 2 5 0 98 2 5 0 120 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 20 173 0 161 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 5 0 203 2 5 0 205 2 5 0 206 26 25 1 172 2 5 2 136] 
#[0 11 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 11 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 11 142 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 11 146 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 26 29 0 17 26 33 0 215] 
#[1 26 37 0 17 26 41 0 215] 
#[0 26 45 0 183] 
#[0 26 49 0 183] 
#[1 26 53 0 6 3 153 0 215 26 53 0 236] 
#[0 11 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 26 57 2 108 15 9 2 111] 
#[0 11 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 26 61 0 215 15 1 0 229 26 65 2 108 15 9 2 111] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 69 2 23 26 69 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 26 69 2 30 26 69 2 31 4 13 2 32 26 69 2 39 26 69 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 26 69 2 73 26 69 2 74 26 69 2 75 26 69 2 76 26 69 2 77 26 69 2 78 26 69 2 79 26 69 2 80 26 69 2 81 26 69 2 82 26 69 2 83 26 69 2 84 26 69 2 85 26 69 2 86 26 69 2 87 26 69 2 88 26 69 2 89 26 69 2 90 26 69 2 91 26 69 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 26 69 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 26 69 2 135] 
#[1 6 57 0 3 11 158 0 4 11 158 0 5 11 158 0 6 6 61 0 7 11 158 0 8 6 65 0 9 11 158 0 10 11 158 0 11 6 69 0 12 11 158 0 13 6 73 0 15 11 158 0 16 11 158 0 17 6 77 0 19 6 81 0 20 11 158 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 11 158 0 28 11 158 0 32 6 109 0 34 6 113 0 35 11 158 0 38 11 158 0 45 11 158 0 80 11 158 0 83 11 158 0 87 11 158 0 90 11 158 0 99 11 158 0 105 11 158 0 108 11 158 0 110 11 158 0 115 6 117 0 116 6 121 0 118 11 158 0 121 11 158 0 123 6 125 0 125 6 129 0 130 11 158 0 146 6 133 0 150 6 137 0 151 11 158 0 152 11 158 0 171 11 158 0 177 11 158 0 179 11 158 0 186 11 158 0 188 11 158 0 190 11 158 0 201 6 141 0 207 6 145 0 209 11 158 0 210 6 149 0 211 11 158 0 212 11 158 0 214 11 158 0 215] 
#[0 11 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 26 73 2 108 15 9 2 111] 
#[0 11 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 11 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 11 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 7 0 5 1 27 0 6 1 27 0 14 0 230 0 29 1 27 0 215 12 201 0 235 7 153 1 46 7 157 1 47 26 77 2 36 26 81 2 37] 
#[1 11 178 0 6 17 145 0 14 11 178 0 215 17 149 2 35] 
#[1 4 238 0 6 4 238 0 14 4 238 0 215 26 85 2 36] 
#[0 11 182 0 6 0 14 0 215] 
#[1 11 186 0 6 2 241 0 11 11 186 0 215 6 201 0 234] 
#[1 26 89 0 6 3 153 0 215 26 89 0 236] 
#[0 26 93 0 228] 
#[1 2 45 0 5 11 190 0 6 11 190 0 14 11 190 0 215 26 97 0 235 26 101 2 37] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 105 2 23 26 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 26 105 2 30 26 105 2 31 4 13 2 32 26 105 2 39 26 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 26 105 2 73 26 105 2 74 26 105 2 75 26 105 2 76 26 105 2 77 26 105 2 78 26 105 2 79 26 105 2 80 26 105 2 81 26 105 2 82 26 105 2 83 26 105 2 84 26 105 2 85 26 105 2 86 26 105 2 87 26 105 2 88 26 105 2 89 26 105 2 90 26 105 2 91 26 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 26 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 26 105 2 135] 
#[0 11 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 226 0 1 4 226 0 3 1 19 0 5 4 226 0 7 4 226 0 9 4 226 0 11 4 226 0 12 4 226 0 14 4 226 0 15 4 226 0 19 4 226 0 20 4 226 0 22 4 226 0 23 2 81 0 24 4 226 0 25 4 226 0 26 4 226 0 27 4 226 0 34 4 226 0 35 4 226 0 116 4 226 0 118 4 226 0 125 4 226 0 130 4 226 0 150 4 226 0 151 4 226 0 207 4 226 0 209 4 226 0 211 4 226 0 214 4 226 0 215 12 145 0 235 26 109 0 239] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 113 2 23 26 113 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 26 113 2 30 26 113 2 31 4 13 2 32 26 113 2 39 26 113 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 26 113 2 73 26 113 2 74 26 113 2 75 26 113 2 76 26 113 2 77 26 113 2 78 26 113 2 79 26 113 2 80 26 113 2 81 26 113 2 82 26 113 2 83 26 113 2 84 26 113 2 85 26 113 2 86 26 113 2 87 26 113 2 88 26 113 2 89 26 113 2 90 26 113 2 91 26 113 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 26 113 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 26 113 2 135] 
#[0 26 117 0 228] 
#[1 4 38 0 1 4 38 0 3 0 107 0 5 4 38 0 7 4 38 0 9 4 38 0 11 4 38 0 12 4 38 0 14 4 38 0 15 4 38 0 19 4 38 0 20 4 38 0 22 4 38 0 23 2 81 0 24 4 38 0 25 4 38 0 26 4 38 0 27 4 38 0 34 4 38 0 35 4 38 0 116 4 38 0 118 4 38 0 125 4 38 0 130 4 38 0 150 4 38 0 151 4 38 0 207 4 38 0 209 4 38 0 211 4 38 0 214 4 38 0 215 7 193 0 235 26 121 0 239] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 12 221 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 12 225 0 122 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 12 229 2 23 12 229 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 12 229 2 30 12 229 2 31 4 13 2 32 12 229 2 39 12 229 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 26 125 2 60 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 12 229 2 73 12 229 2 74 12 229 2 75 12 229 2 76 12 229 2 77 12 229 2 78 12 229 2 79 12 229 2 80 12 229 2 81 12 229 2 82 12 229 2 83 12 229 2 84 12 229 2 85 12 229 2 86 12 229 2 87 12 229 2 88 12 229 2 89 12 229 2 90 12 229 2 91 12 229 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 12 229 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 12 229 2 135] 
#[0 11 198 0 11 0 214 0 215] 
#[1 6 57 0 3 11 202 0 6 6 61 0 7 6 65 0 9 11 202 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 11 202 0 215] 
#[0 11 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 12 245 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 129 1 170 22 105 2 23 22 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 22 105 2 30 22 105 2 31 4 13 2 32 22 105 2 39 22 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 22 105 2 73 22 105 2 74 22 105 2 75 22 105 2 76 22 105 2 77 22 105 2 78 22 105 2 79 22 105 2 80 22 105 2 81 22 105 2 82 22 105 2 83 22 105 2 84 22 105 2 85 22 105 2 86 22 105 2 87 22 105 2 88 22 105 2 89 22 105 2 90 22 105 2 91 22 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 22 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 22 105 2 135] 
#[0 11 210 0 6 0 11 0 215] 
#[0 11 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 11 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 5 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 26 133 1 48 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 5 117 1 86] 
#[1 26 137 0 6 3 153 0 215 26 137 0 236] 
#[1 11 222 0 6 2 241 0 11 11 222 0 215 26 141 0 234 26 145 2 51] 
#[1 6 57 0 3 11 226 0 6 6 61 0 7 6 65 0 9 11 226 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 11 226 0 215] 
#[0 26 149 0 88] 
#[0 11 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 11 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 238 0 3 11 238 0 4 11 238 0 5 11 238 0 6 11 238 0 7 11 238 0 8 11 238 0 9 11 238 0 10 11 238 0 11 11 238 0 12 11 238 0 13 11 238 0 15 11 238 0 16 3 207 0 17 11 238 0 19 11 238 0 20 11 238 0 21 11 238 0 22 11 238 0 23 11 238 0 24 11 238 0 25 11 238 0 26 11 238 0 27 11 238 0 28 11 238 0 32 11 238 0 34 11 238 0 35 11 238 0 38 11 238 0 45 11 238 0 80 11 238 0 83 11 238 0 87 11 238 0 90 11 238 0 99 11 238 0 105 11 238 0 108 11 238 0 110 11 238 0 115 11 238 0 116 11 238 0 118 11 238 0 121 11 238 0 123 11 238 0 125 11 238 0 130 11 238 0 146 11 238 0 150 11 238 0 151 11 238 0 152 11 238 0 171 11 238 0 177 11 238 0 179 11 238 0 186 11 238 0 188 11 238 0 190 11 238 0 201 11 238 0 207 11 238 0 209 11 238 0 210 11 238 0 211 11 238 0 212 11 238 0 214 11 238 0 215 22 57 1 199] 
#[0 11 242 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[0 11 246 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 26 153 0 215] 
#[0 26 157 0 88] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 26 161 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 161 1 86] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 26 165 1 193 13 185 1 195] 
#[1 6 57 0 3 11 250 0 4 11 250 0 5 11 250 0 6 6 61 0 7 11 250 0 8 6 65 0 9 11 250 0 10 11 250 0 11 6 69 0 12 11 250 0 13 6 73 0 15 11 250 0 16 11 250 0 17 6 77 0 19 6 81 0 20 11 250 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 11 250 0 28 11 250 0 32 6 109 0 34 6 113 0 35 11 250 0 38 11 250 0 45 11 250 0 80 11 250 0 83 11 250 0 87 11 250 0 90 11 250 0 99 11 250 0 105 11 250 0 108 11 250 0 110 11 250 0 115 6 117 0 116 6 121 0 118 11 250 0 121 11 250 0 123 6 125 0 125 6 129 0 130 11 250 0 146 6 133 0 150 6 137 0 151 11 250 0 152 11 250 0 171 11 250 0 177 11 250 0 179 11 250 0 186 11 250 0 188 11 250 0 190 11 250 0 201 6 141 0 207 6 145 0 209 11 250 0 210 6 149 0 211 11 250 0 212 11 250 0 214 11 250 0 215] 
#[1 6 57 0 3 11 254 0 4 11 254 0 5 11 254 0 6 6 61 0 7 11 254 0 8 6 65 0 9 11 254 0 10 11 254 0 11 6 69 0 12 11 254 0 13 6 73 0 15 11 254 0 16 11 254 0 17 6 77 0 19 6 81 0 20 11 254 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 11 254 0 28 11 254 0 32 6 109 0 34 6 113 0 35 11 254 0 38 11 254 0 45 11 254 0 80 11 254 0 83 11 254 0 87 11 254 0 90 11 254 0 99 11 254 0 105 11 254 0 108 11 254 0 110 11 254 0 115 6 117 0 116 6 121 0 118 11 254 0 121 11 254 0 123 6 125 0 125 6 129 0 130 11 254 0 146 6 133 0 150 6 137 0 151 11 254 0 152 11 254 0 171 11 254 0 177 11 254 0 179 11 254 0 186 11 254 0 188 11 254 0 190 11 254 0 201 6 141 0 207 6 145 0 209 11 254 0 210 6 149 0 211 11 254 0 212 11 254 0 214 11 254 0 215] 
#[1 12 2 0 3 12 2 0 4 12 2 0 5 12 2 0 6 12 2 0 7 12 2 0 8 12 2 0 9 12 2 0 10 12 2 0 11 12 2 0 12 12 2 0 13 12 2 0 15 12 2 0 16 12 2 0 17 12 2 0 19 12 2 0 20 12 2 0 21 12 2 0 22 12 2 0 23 12 2 0 24 12 2 0 25 12 2 0 26 12 2 0 27 12 2 0 28 12 2 0 32 12 2 0 34 12 2 0 35 12 2 0 38 12 2 0 45 12 2 0 80 12 2 0 83 12 2 0 87 12 2 0 90 12 2 0 99 12 2 0 105 12 2 0 108 12 2 0 110 12 2 0 115 12 2 0 116 12 2 0 118 12 2 0 121 12 2 0 123 12 2 0 125 12 2 0 130 12 2 0 146 12 2 0 150 12 2 0 151 12 2 0 152 12 2 0 171 12 2 0 177 12 2 0 179 12 2 0 186 12 2 0 188 12 2 0 190 26 169 0 198 12 2 0 201 26 169 0 202 12 2 0 207 12 2 0 209 12 2 0 210 12 2 0 211 12 2 0 212 12 2 0 214 12 2 0 215 26 169 1 237] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 127 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 26 173 1 193 13 185 1 195] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 177 2 23 26 177 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 26 177 2 30 26 177 2 31 4 13 2 32 26 177 2 39 26 177 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 26 177 2 73 26 177 2 74 26 177 2 75 26 177 2 76 26 177 2 77 26 177 2 78 26 177 2 79 26 177 2 80 26 177 2 81 26 177 2 82 26 177 2 83 26 177 2 84 26 177 2 85 26 177 2 86 26 177 2 87 26 177 2 88 26 177 2 89 26 177 2 90 26 177 2 91 26 177 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 26 177 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 26 177 2 135] 
#[0 12 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 26 181 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 185 2 23 26 185 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 26 185 2 30 26 185 2 31 4 13 2 32 26 185 2 39 26 185 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 26 185 2 73 26 185 2 74 26 185 2 75 26 185 2 76 26 185 2 77 26 185 2 78 26 185 2 79 26 185 2 80 26 185 2 81 26 185 2 82 26 185 2 83 26 185 2 84 26 185 2 85 26 185 2 86 26 185 2 87 26 185 2 88 26 185 2 89 26 185 2 90 26 185 2 91 26 185 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 26 185 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 26 185 2 135] 
#[1 6 57 0 3 7 170 0 6 6 61 0 7 6 65 0 9 7 170 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 7 170 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 26 189 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 189 1 86] 
#[0 12 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 26 193 0 190 6 141 0 207 6 145 0 209 6 149 0 211] 
#[1 12 14 0 87 12 14 0 88 12 14 0 226 26 197 1 218] 
#[1 3 211 0 1 10 54 0 3 10 54 0 4 3 215 0 5 10 54 0 6 10 54 0 7 10 54 0 8 3 219 0 9 10 54 0 10 10 54 0 11 3 223 0 12 10 54 0 13 3 227 0 14 10 54 0 15 10 54 0 16 3 231 0 17 10 54 0 19 10 54 0 20 10 54 0 21 10 54 0 22 10 54 0 23 10 54 0 24 10 54 0 25 10 54 0 26 10 54 0 27 10 54 0 28 3 235 0 30 3 239 0 31 3 243 0 32 10 54 0 34 10 54 0 35 10 54 0 38 3 247 0 40 3 29 0 42 3 251 0 44 10 54 0 45 3 255 0 48 4 3 0 49 4 7 0 50 4 11 0 51 4 15 0 52 4 19 0 53 4 23 0 54 4 27 0 55 4 31 0 56 4 35 0 57 4 39 0 58 4 43 0 59 4 47 0 60 4 51 0 61 4 55 0 62 4 59 0 63 4 63 0 64 4 67 0 65 4 71 0 66 4 75 0 69 4 79 0 72 4 83 0 73 4 87 0 75 4 91 0 76 10 54 0 80 4 95 0 81 4 99 0 82 10 54 0 83 4 103 0 84 4 107 0 85 3 231 0 87 4 111 0 88 10 54 0 90 4 115 0 91 4 119 0 92 4 123 0 94 4 127 0 97 4 131 0 99 3 247 0 100 4 135 0 102 4 139 0 103 4 143 0 104 10 54 0 105 4 147 0 107 10 54 0 108 10 54 0 110 4 151 0 113 10 54 0 115 10 54 0 116 10 54 0 118 3 247 0 120 10 54 0 121 10 54 0 123 10 54 0 125 4 155 0 126 4 159 0 128 4 163 0 129 10 54 0 130 4 167 0 134 4 171 0 135 4 175 0 138 3 137 0 140 4 179 0 143 4 183 0 146 10 54 0 150 10 54 0 151 10 54 0 152 4 187 0 164 4 191 0 165 4 195 0 167 4 199 0 168 4 203 0 169 4 207 0 170 4 211 0 171 4 215 0 175 4 219 0 176 10 54 0 177 4 223 0 178 10 54 0 179 4 227 0 180 4 231 0 182 3 247 0 184 4 235 0 185 10 54 0 186 10 54 0 188 4 239 0 189 10 54 0 190 4 243 0 191 4 247 0 192 4 251 0 193 4 255 0 194 5 3 0 195 5 7 0 196 5 11 0 199 10 54 0 201 5 15 0 202 5 19 0 204 10 54 0 207 5 23 0 208 10 54 0 209 10 54 0 210 10 54 0 211 10 54 0 212 5 27 0 213 10 54 0 214 3 231 0 215 5 31 0 219 5 35 0 220 5 39 0 221 5 43 0 222 5 47 0 223 5 51 0 224 5 55 0 225 5 174 0 226 5 59 0 227 5 63 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 22 45 1 192 26 201 1 193 13 185 1 195 22 45 1 196 9 225 1 197 22 45 1 201 9 233 1 202 22 45 1 203 22 45 1 204 22 45 1 205 22 45 1 206 22 45 1 207 22 45 1 208 22 45 1 209 22 45 1 210 22 45 1 211 22 45 1 213 22 45 1 214 22 45 1 215 22 45 1 216 22 45 1 217 22 45 1 221 22 45 1 223 22 45 1 232 22 45 1 233 22 45 1 234 22 45 1 235 22 45 1 236 22 45 1 238 22 45 1 243 22 45 1 244 22 45 1 245 22 45 1 246 22 45 1 250 22 45 1 251 22 45 1 252 22 45 1 253 22 45 1 255 22 45 2 1 22 45 2 2 22 45 2 3 22 45 2 5 22 45 2 7 22 45 2 8 22 45 2 9 22 45 2 10 22 45 2 11 22 45 2 16 22 45 2 20 22 45 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 26 205 1 193 13 185 1 195] 
#[1 12 18 0 3 12 18 0 4 12 18 0 5 12 18 0 6 12 18 0 7 12 18 0 8 12 18 0 9 12 18 0 10 12 18 0 11 12 18 0 12 12 18 0 13 12 18 0 15 12 18 0 16 12 18 0 17 12 18 0 19 12 18 0 20 12 18 0 21 12 18 0 22 12 18 0 23 12 18 0 24 12 18 0 25 12 18 0 26 12 18 0 27 12 18 0 28 12 18 0 32 12 18 0 34 12 18 0 35 12 18 0 38 12 18 0 45 12 18 0 80 12 18 0 83 5 67 0 87 12 18 0 90 12 18 0 99 12 18 0 105 12 18 0 108 12 18 0 110 12 18 0 115 12 18 0 116 12 18 0 118 12 18 0 121 12 18 0 123 12 18 0 125 12 18 0 130 12 18 0 146 12 18 0 150 12 18 0 151 12 18 0 152 12 18 0 171 12 18 0 177 12 18 0 179 12 18 0 186 12 18 0 188 12 18 0 190 12 18 0 201 12 18 0 207 12 18 0 209 12 18 0 210 12 18 0 211 12 18 0 212 12 18 0 214 12 18 0 215 26 213 1 222] 
#[1 12 14 0 87 12 14 0 88 12 14 0 226 26 217 1 218] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 26 221 0 234] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 225 2 23 26 225 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 26 225 2 30 26 225 2 31 4 13 2 32 26 225 2 39 26 225 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 26 225 2 73 26 225 2 74 26 225 2 75 26 225 2 76 26 225 2 77 26 225 2 78 26 225 2 79 26 225 2 80 26 225 2 81 26 225 2 82 26 225 2 83 26 225 2 84 26 225 2 85 26 225 2 86 26 225 2 87 26 225 2 88 26 225 2 89 26 225 2 90 26 225 2 91 26 225 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 26 225 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 26 225 2 135] 
#[0 26 229 0 220] 
#[0 12 22 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 26 233 0 6 3 153 0 215 26 233 0 236] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 26 237 2 15 14 89 2 23 14 89 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 14 89 2 30 14 89 2 31 4 13 2 32 14 89 2 39 14 89 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 14 89 2 73 14 89 2 74 14 89 2 75 14 89 2 76 14 89 2 77 14 89 2 78 14 89 2 79 14 89 2 80 14 89 2 81 14 89 2 82 14 89 2 83 14 89 2 84 14 89 2 85 14 89 2 86 14 89 2 87 14 89 2 88 14 89 2 89 14 89 2 90 14 89 2 91 14 89 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 14 89 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 14 89 2 135] 
#[0 12 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 12 38 0 4 12 38 0 5 12 38 0 6 6 61 0 7 12 38 0 8 6 65 0 9 12 38 0 10 12 38 0 11 6 69 0 12 12 38 0 13 6 73 0 15 12 38 0 16 12 38 0 17 6 77 0 19 6 81 0 20 12 38 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 12 38 0 28 12 38 0 32 6 109 0 34 6 113 0 35 12 38 0 38 12 38 0 45 12 38 0 80 12 38 0 83 12 38 0 87 12 38 0 90 12 38 0 99 12 38 0 105 12 38 0 108 12 38 0 110 12 38 0 115 6 117 0 116 6 121 0 118 12 38 0 121 12 38 0 123 6 125 0 125 6 129 0 130 12 38 0 146 6 133 0 150 6 137 0 151 12 38 0 152 12 38 0 171 12 38 0 177 12 38 0 179 12 38 0 186 12 38 0 188 12 38 0 190 12 38 0 201 6 141 0 207 6 145 0 209 12 38 0 210 6 149 0 211 12 38 0 212 12 38 0 214 12 38 0 215] 
#[1 10 118 0 67 10 118 0 88 26 241 1 224] 
#[1 26 245 0 67 26 249 0 88 26 253 1 225 27 1 1 231] 
#[0 27 5 0 88] 
#[1 27 9 0 68 27 13 0 88 27 17 0 96 27 21 1 248 27 25 1 249] 
#[1 14 189 0 229 27 29 1 161 14 145 1 162 14 149 1 165] 
#[0 12 42 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 27 33 1 42 27 33 1 43 27 33 1 44 27 33 1 51 27 33 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 12 46 0 3 12 46 0 4 12 46 0 5 12 46 0 6 12 46 0 7 12 46 0 8 12 46 0 9 12 46 0 10 12 46 0 11 12 46 0 12 12 46 0 13 12 46 0 15 12 46 0 16 12 46 0 17 12 46 0 19 12 46 0 20 12 46 0 21 12 46 0 22 12 46 0 23 2 81 0 24 12 46 0 25 12 46 0 26 12 46 0 27 12 46 0 28 12 46 0 32 12 46 0 34 12 46 0 35 12 46 0 38 12 46 0 45 12 46 0 80 12 46 0 83 12 46 0 87 12 46 0 90 12 46 0 99 12 46 0 105 12 46 0 108 12 46 0 110 12 46 0 115 12 46 0 116 12 46 0 118 12 46 0 121 12 46 0 123 12 46 0 125 12 46 0 130 12 46 0 146 12 46 0 150 12 46 0 151 12 46 0 152 12 46 0 171 12 46 0 177 12 46 0 179 12 46 0 186 12 46 0 188 12 46 0 190 12 46 0 201 12 46 0 207 12 46 0 209 12 46 0 210 12 46 0 211 12 46 0 212 12 46 0 214 12 46 0 215 27 37 0 239] 
#[0 12 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 12 54 0 4 12 54 0 5 12 54 0 6 6 61 0 7 12 54 0 8 6 65 0 9 12 54 0 10 12 54 0 11 6 69 0 12 12 54 0 13 6 73 0 15 12 54 0 16 12 54 0 17 6 77 0 19 6 81 0 20 12 54 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 12 54 0 28 12 54 0 32 6 109 0 34 6 113 0 35 12 54 0 38 12 54 0 45 12 54 0 80 12 54 0 83 12 54 0 87 12 54 0 90 12 54 0 99 12 54 0 105 12 54 0 108 12 54 0 110 12 54 0 115 6 117 0 116 6 121 0 118 12 54 0 121 12 54 0 123 6 125 0 125 6 129 0 130 12 54 0 146 6 133 0 150 6 137 0 151 12 54 0 152 12 54 0 171 12 54 0 177 12 54 0 179 12 54 0 186 12 54 0 188 12 54 0 190 12 54 0 201 6 141 0 207 6 145 0 209 12 54 0 210 6 149 0 211 12 54 0 212 12 54 0 214 12 54 0 215] 
#[1 14 189 0 229 27 41 1 165] 
#[0 12 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 27 45 0 88] 
#[0 27 49 0 88] 
#[0 27 53 0 88] 
#[0 12 62 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 27 57 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 27 61 1 193 13 185 1 195] 
#[0 12 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 12 70 0 4 12 70 0 5 12 70 0 6 6 61 0 7 12 70 0 8 6 65 0 9 12 70 0 10 12 70 0 11 6 69 0 12 12 70 0 13 6 73 0 15 12 70 0 16 12 70 0 17 6 77 0 19 6 81 0 20 12 70 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 12 70 0 28 12 70 0 32 6 109 0 34 6 113 0 35 12 70 0 38 12 70 0 45 12 70 0 80 12 70 0 83 12 70 0 87 12 70 0 90 12 70 0 99 12 70 0 105 12 70 0 108 12 70 0 110 12 70 0 115 6 117 0 116 6 121 0 118 12 70 0 121 12 70 0 123 6 125 0 125 6 129 0 130 12 70 0 146 6 133 0 150 6 137 0 151 12 70 0 152 12 70 0 171 12 70 0 177 12 70 0 179 12 70 0 186 12 70 0 188 12 70 0 190 12 70 0 201 6 141 0 207 6 145 0 209 12 70 0 210 6 149 0 211 12 70 0 212 12 70 0 214 12 70 0 215] 
#[1 10 150 0 115 27 65 0 215 27 65 2 130] 
#[0 12 74 0 115 0 229] 
#[0 27 69 0 115] 
#[1 19 25 0 105 10 165 0 121 27 73 0 146 27 77 0 215 27 81 2 103 10 213 2 113 10 249 2 133] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 27 85 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 27 89 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 27 93 0 146] 
#[1 27 97 0 146 27 101 0 215] 
#[1 15 1 0 229 27 105 2 108 15 9 2 111] 
#[1 10 150 0 115 27 109 0 215 27 109 2 130] 
#[1 27 113 0 215 15 1 0 229 27 117 2 108 15 9 2 111] 
#[0 27 121 0 45] 
#[1 2 81 0 24 27 125 0 239] 
#[1 6 57 0 3 12 78 0 4 12 78 0 5 12 78 0 6 6 61 0 7 12 78 0 8 6 65 0 9 12 78 0 10 12 78 0 11 6 69 0 12 12 78 0 13 6 73 0 15 12 78 0 16 12 78 0 17 6 77 0 19 6 81 0 20 12 78 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 12 78 0 28 12 78 0 32 6 109 0 34 6 113 0 35 12 78 0 38 12 78 0 45 12 78 0 80 12 78 0 83 12 78 0 87 12 78 0 90 12 78 0 99 12 78 0 105 12 78 0 108 12 78 0 110 12 78 0 115 6 117 0 116 6 121 0 118 12 78 0 121 12 78 0 123 6 125 0 125 6 129 0 130 12 78 0 146 6 133 0 150 6 137 0 151 12 78 0 152 12 78 0 171 12 78 0 177 12 78 0 179 12 78 0 186 12 78 0 188 12 78 0 190 12 78 0 201 6 141 0 207 6 145 0 209 12 78 0 210 6 149 0 211 12 78 0 212 12 78 0 214 12 78 0 215] 
#[1 15 1 0 229 27 129 2 108 15 9 2 111] 
#[1 10 150 0 115 27 133 0 215 27 133 2 130] 
#[1 27 137 0 215 15 1 0 229 27 141 2 108 15 9 2 111] 
#[1 15 1 0 229 27 145 2 111] 
#[0 12 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 27 149 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 27 153 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 27 157 0 146] 
#[1 27 161 0 146 27 165 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 27 169 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 27 173 0 90 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211] 
#[0 12 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 90 0 3 12 90 0 4 12 90 0 5 12 90 0 6 12 90 0 7 12 90 0 8 12 90 0 9 12 90 0 10 12 90 0 11 12 90 0 12 12 90 0 13 12 90 0 15 12 90 0 16 12 90 0 17 12 90 0 19 12 90 0 20 12 90 0 21 12 90 0 22 12 90 0 23 12 90 0 24 12 90 0 25 12 90 0 26 12 90 0 27 12 90 0 28 12 90 0 32 12 90 0 34 12 90 0 35 12 90 0 38 12 90 0 45 12 90 0 80 12 90 0 83 12 90 0 87 12 90 0 90 12 90 0 99 12 90 0 105 12 90 0 108 12 90 0 110 12 90 0 115 12 90 0 116 12 90 0 118 12 90 0 121 12 90 0 123 12 90 0 125 12 90 0 130 12 90 0 146 12 90 0 150 12 90 0 151 12 90 0 152 12 90 0 171 12 90 0 177 12 90 0 179 12 90 0 186 12 90 0 188 12 90 0 190 12 90 0 201 12 90 0 207 12 90 0 209 12 90 0 210 12 90 0 211 12 90 0 212 12 90 0 214 12 90 0 215 27 177 2 116] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 27 181 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 27 185 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 27 189 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 27 193 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 27 197 0 146] 
#[0 12 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 110 0 3 12 110 0 4 12 110 0 5 12 110 0 6 12 110 0 7 12 110 0 8 12 110 0 9 12 110 0 10 5 71 0 11 12 110 0 12 12 110 0 13 12 110 0 15 12 110 0 16 12 110 0 17 12 110 0 19 12 110 0 20 12 110 0 21 12 110 0 22 12 110 0 23 12 110 0 24 12 110 0 25 12 110 0 26 12 110 0 27 12 110 0 28 12 110 0 32 12 110 0 34 12 110 0 35 12 110 0 38 12 110 0 45 12 110 0 80 12 110 0 83 12 110 0 87 12 110 0 90 12 110 0 99 12 110 0 105 12 110 0 108 12 110 0 110 12 110 0 115 12 110 0 116 12 110 0 118 12 110 0 121 12 110 0 123 12 110 0 125 12 110 0 130 12 110 0 146 12 110 0 150 12 110 0 151 12 110 0 152 12 110 0 171 12 110 0 177 12 110 0 179 12 110 0 186 12 110 0 188 12 110 0 190 12 110 0 201 12 110 0 207 12 110 0 209 12 110 0 210 12 110 0 211 12 110 0 212 12 110 0 214 12 110 0 215 27 201 0 234 27 205 2 125] 
#[1 6 57 0 3 12 114 0 4 12 114 0 5 12 114 0 6 6 61 0 7 12 114 0 8 6 65 0 9 12 114 0 10 12 114 0 11 6 69 0 12 12 114 0 13 6 73 0 15 12 114 0 16 12 114 0 17 6 77 0 19 6 81 0 20 12 114 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 12 114 0 28 12 114 0 32 6 109 0 34 6 113 0 35 12 114 0 38 12 114 0 45 12 114 0 80 12 114 0 83 12 114 0 87 12 114 0 90 12 114 0 99 12 114 0 105 12 114 0 108 12 114 0 110 12 114 0 115 6 117 0 116 6 121 0 118 12 114 0 121 12 114 0 123 6 125 0 125 6 129 0 130 12 114 0 146 6 133 0 150 6 137 0 151 12 114 0 152 12 114 0 171 12 114 0 177 12 114 0 179 12 114 0 186 12 114 0 188 12 114 0 190 12 114 0 201 6 141 0 207 6 145 0 209 12 114 0 210 6 149 0 211 12 114 0 212 12 114 0 214 12 114 0 215] 
#[1 6 57 0 3 12 118 0 4 12 118 0 5 12 118 0 6 6 61 0 7 12 118 0 8 6 65 0 9 12 118 0 10 12 118 0 11 6 69 0 12 12 118 0 13 6 73 0 15 12 118 0 16 12 118 0 17 6 77 0 19 6 81 0 20 12 118 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 12 118 0 28 12 118 0 32 6 109 0 34 6 113 0 35 12 118 0 38 12 118 0 45 12 118 0 80 12 118 0 83 12 118 0 87 12 118 0 90 12 118 0 99 12 118 0 105 12 118 0 108 12 118 0 110 12 118 0 115 6 117 0 116 6 121 0 118 12 118 0 121 12 118 0 123 6 125 0 125 6 129 0 130 12 118 0 146 6 133 0 150 6 137 0 151 12 118 0 152 12 118 0 171 12 118 0 177 12 118 0 179 12 118 0 186 12 118 0 188 12 118 0 190 12 118 0 201 6 141 0 207 6 145 0 209 12 118 0 210 6 149 0 211 12 118 0 212 12 118 0 214 12 118 0 215] 
#[1 27 209 0 17 27 213 0 215] 
#[0 27 217 0 70] 
#[1 27 221 0 17 27 225 0 215] 
#[0 27 229 0 70] 
#[0 27 233 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 27 237 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[0 27 241 0 70] 
#[1 0 73 0 19 0 175 0 40 0 26 0 70 0 26 0 72 0 26 0 74 0 26 0 77 0 179 0 78 0 26 0 79 0 183 0 81 27 245 0 88 0 26 0 89 0 26 0 93 0 187 0 98 0 26 0 100 0 26 0 114 0 191 0 120 0 195 0 132 0 26 0 133 0 199 0 137 0 203 0 141 0 207 0 142 0 26 0 147 0 211 0 154 0 215 0 155 0 219 0 156 0 223 0 158 0 227 0 160 0 26 0 161 0 231 0 162 0 235 0 163 0 239 0 166 0 243 0 173 0 247 0 174 0 26 0 183 0 26 0 184 0 251 0 203 0 255 0 205 1 3 0 206 15 201 0 252 0 89 0 253 0 93 0 254 15 213 1 40 15 213 1 63 15 209 1 64 15 213 1 67 15 213 1 71 15 213 1 72 15 213 1 78 15 213 1 93 15 213 1 100 15 213 1 102 15 213 1 107 15 213 1 108 15 213 1 111 15 213 1 112 15 213 1 117 15 213 1 118 15 213 1 120 15 213 1 138 15 213 1 139 15 213 1 140 15 213 1 145 15 213 1 151 15 213 1 156 12 81 1 157 15 213 1 171 15 213 1 173 15 213 1 175 15 213 1 176 15 213 1 190 12 101 2 136] 
#[0 12 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 12 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 27 249 0 89] 
#[0 27 253 0 89] 
#[0 12 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 12 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 28 1 0 17 28 5 0 215] 
#[1 28 9 0 17 28 13 0 215] 
#[0 28 17 0 114] 
#[0 28 21 0 114] 
#[0 12 138 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 12 142 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 12 146 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[0 12 150 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 98 0 114 0 120 0 131 0 132 0 136 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 173 0 174 0 183 0 203 0 205 0 206 2 137] 
#[1 28 25 0 17 28 29 0 215] 
#[1 28 33 0 17 28 37 0 215] 
#[0 28 41 0 183] 
#[0 28 45 0 183] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 28 49 1 42 28 49 1 43 28 49 1 44 28 49 1 51 28 49 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[0 12 154 0 11 0 17 0 215] 
#[0 12 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 12 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 28 53 0 3 0 7 0 9 0 12 0 15 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 34 0 62 0 117 0 119 0 125 0 130 0 140 0 150 0 207 0 209 0 211 1 191] 
#[0 12 166 0 5] 
#[0 12 170 0 5] 
#[0 12 174 0 5] 
#[0 12 178 0 5] 
#[0 12 182 0 5] 
#[0 12 186 0 5] 
#[0 12 190 0 5] 
#[0 12 194 0 5] 
#[0 12 198 0 5] 
#[0 12 202 0 5] 
#[0 12 206 0 5] 
#[0 12 210 0 5] 
#[0 12 214 0 5] 
#[0 12 218 0 5] 
#[0 12 222 0 5] 
#[0 12 226 0 5] 
#[0 12 230 0 5] 
#[0 12 234 0 5] 
#[0 12 238 0 5] 
#[0 12 242 0 5] 
#[0 12 246 0 5] 
#[0 12 250 0 5] 
#[0 12 254 0 5] 
#[0 13 2 0 5] 
#[1 2 45 0 5 28 57 0 235] 
#[1 28 61 0 17 28 65 0 215] 
#[0 13 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 13 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 28 69 0 17 28 73 0 215] 
#[1 28 77 0 214 6 17 0 215 28 77 0 238] 
#[1 13 14 0 11 13 14 0 214 13 14 0 215 28 81 0 250] 
#[0 13 18 0 6 0 11 0 215] 
#[1 28 85 0 17 28 89 0 215] 
#[0 28 93 0 70] 
#[1 28 97 0 17 28 101 0 215] 
#[0 28 105 0 70] 
#[0 13 22 0 17 0 106 0 108 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 28 109 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 28 109 1 86] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 28 113 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 28 117 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 28 117 1 86] 
#[0 13 26 0 6 0 11 0 215] 
#[1 13 30 0 6 13 30 0 11 2 81 0 24 13 30 0 215 28 121 0 239] 
#[0 13 34 0 6 0 11 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 28 125 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 28 125 1 86] 
#[1 0 73 0 19 4 170 0 44 4 170 0 48 4 170 0 69 4 170 0 75 4 170 0 76 4 170 0 85 4 170 0 103 4 170 0 113 4 170 0 126 4 170 0 143 4 170 0 170 4 170 0 175 4 170 0 176 4 170 0 182 4 170 0 194 4 170 0 195 4 170 0 196 4 170 0 229 11 149 0 252 0 89 0 253 0 93 0 254 28 129 1 106] 
#[0 13 38 0 19 0 88 0 229] 
#[0 13 42 0 19 0 88 0 229] 
#[1 28 133 0 17 28 137 0 215] 
#[1 28 141 0 17 28 145 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 28 149 1 42 28 149 1 43 28 149 1 44 28 149 1 51 28 149 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[0 13 46 0 11 0 17 0 215] 
#[0 13 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 13 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 28 153 0 17 28 157 0 215] 
#[1 28 161 0 17 28 165 0 215] 
#[0 28 169 0 229] 
#[1 28 173 0 17 28 177 0 215] 
#[0 13 58 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 62 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 66 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 70 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 45 0 5 11 114 0 17 25 145 0 37 11 114 0 215 25 149 0 235 28 181 1 143] 
#[1 2 45 0 5 11 118 0 17 28 185 0 37 11 118 0 108 11 118 0 215 28 189 0 235] 
#[0 13 74 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 78 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 13 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 28 193 0 17 28 197 0 215] 
#[1 28 201 0 17 28 205 0 215] 
#[1 28 209 0 17 28 213 0 215] 
#[0 28 217 0 229] 
#[0 28 221 0 229] 
#[0 28 225 0 229] 
#[1 28 229 0 100 28 233 0 184] 
#[1 2 45 0 5 11 114 0 17 25 145 0 37 11 114 0 108 11 114 0 215 25 149 0 235 28 237 1 143] 
#[1 2 45 0 5 2 81 0 24 28 241 0 37 3 203 0 108 3 203 0 215 28 245 0 235 25 165 0 239 25 169 1 177 28 249 1 178] 
#[1 2 45 0 5 28 253 0 215 29 1 0 235] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 29 5 1 193 13 185 1 195] 
#[0 29 9 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 29 13 1 193 13 185 1 195] 
#[0 29 17 0 215] 
#[1 2 5 0 40 2 5 0 78 2 5 0 81 2 5 0 98 2 165 0 100 2 5 0 120 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 169 0 184 2 5 0 203 2 5 0 205 2 5 0 206 29 21 1 104 29 25 1 105 2 5 2 136] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 29 29 1 174 26 5 1 187 26 5 1 188 26 5 1 189 26 17 2 136] 
#[0 29 33 0 215] 
#[1 2 5 0 40 2 5 0 78 2 5 0 81 2 5 0 98 2 5 0 120 2 5 0 132 2 5 0 137 2 5 0 141 2 5 0 142 2 5 0 154 2 5 0 155 2 5 0 156 2 5 0 158 2 5 0 160 20 173 0 161 2 5 0 162 2 5 0 163 2 5 0 166 2 5 0 173 2 5 0 174 2 5 0 203 2 5 0 205 2 5 0 206 29 37 1 172 2 5 2 136] 
#[0 13 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 29 41 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 29 41 1 86] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 29 45 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 13 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 241 0 11 13 106 0 17 13 106 0 215 29 49 0 234 29 53 1 153] 
#[0 29 57 0 37] 
#[1 29 61 0 124 29 65 1 124] 
#[1 29 61 0 124 29 69 1 124] 
#[0 29 73 0 229] 
#[0 29 77 0 229] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 29 81 1 42 29 81 1 43 29 81 1 44 29 81 1 51 29 81 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 29 85 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 29 85 0 236 11 161 0 252 0 89 0 253 0 93 0 254 29 89 1 126 11 169 1 129 11 173 1 130] 
#[1 29 93 0 17 21 65 0 108 29 97 0 215 29 101 1 95] 
#[1 0 73 0 19 5 75 0 44 5 79 0 48 5 83 0 69 5 87 0 75 5 91 0 76 5 95 0 85 5 99 0 103 5 103 0 113 5 107 0 126 29 105 0 138 5 111 0 143 5 115 0 170 5 119 0 175 5 123 0 176 5 127 0 182 5 131 0 194 5 135 0 195 5 139 0 196 5 143 0 229 29 109 0 252 0 89 0 253 0 93 0 254 29 113 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 29 113 1 86 29 117 1 106] 
#[1 29 121 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 29 121 0 236 11 161 0 252 0 89 0 253 0 93 0 254 29 125 1 126 11 169 1 129 11 173 1 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 29 129 2 23 29 129 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 29 129 2 30 29 129 2 31 4 13 2 32 29 129 2 39 29 129 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 29 129 2 73 29 129 2 74 29 129 2 75 29 129 2 76 29 129 2 77 29 129 2 78 29 129 2 79 29 129 2 80 29 129 2 81 29 129 2 82 29 129 2 83 29 129 2 84 29 129 2 85 29 129 2 86 29 129 2 87 29 129 2 88 29 129 2 89 29 129 2 90 29 129 2 91 29 129 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 29 129 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 29 129 2 135] 
#[0 13 110 0 108 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 29 137 1 179] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 29 141 1 193 13 185 1 195] 
#[1 29 145 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 29 145 0 236 11 161 0 252 0 89 0 253 0 93 0 254 29 149 1 126 11 169 1 129 11 173 1 130] 
#[0 29 153 0 14] 
#[0 29 157 0 14] 
#[0 29 161 0 14] 
#[0 29 165 0 14] 
#[0 13 118 0 17 0 215] 
#[1 13 122 0 11 13 122 0 17 13 122 0 215 29 169 1 136] 
#[1 29 173 0 14 2 101 0 29] 
#[0 13 126 0 17 0 215] 
#[1 13 130 0 11 13 130 0 17 13 130 0 215 29 177 1 98] 
#[0 29 181 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 29 185 1 193 13 185 1 195] 
#[0 29 189 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 29 193 1 193 13 185 1 195] 
#[1 29 197 0 17 21 61 0 106 21 65 0 108 29 201 0 215 21 73 1 95 29 205 1 116 21 81 1 133] 
#[1 29 209 0 17 21 61 0 106 21 65 0 108 29 213 0 215 21 73 1 95 29 217 1 116 21 81 1 133] 
#[0 29 221 0 215] 
#[1 2 45 0 5 29 225 0 215 29 229 0 235] 
#[1 29 241 0 40 29 241 0 78 29 241 0 81 29 241 0 98 29 233 0 101 29 241 0 120 29 241 0 132 29 241 0 137 29 241 0 141 29 241 0 142 29 241 0 154 29 241 0 155 29 241 0 156 29 241 0 158 29 241 0 160 29 241 0 162 29 241 0 163 29 241 0 166 29 237 0 172 29 241 0 173 29 241 0 174 29 241 0 203 29 241 0 205 29 241 0 206 29 241 2 136] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 29 245 0 88 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 29 249 1 187 29 249 1 188 29 249 1 189 26 17 2 136] 
#[0 13 134 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 13 138 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 13 142 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[1 29 253 0 101 30 1 0 172] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 30 5 1 174 26 5 1 187 26 5 1 188 26 5 1 189 26 17 2 136] 
#[1 30 9 0 17 21 65 0 108 30 13 0 215 30 17 1 95] 
#[0 13 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 13 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 13 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 13 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 30 21 0 17 30 25 0 215] 
#[1 30 29 0 17 30 33 0 215] 
#[0 13 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 30 37 2 108 15 9 2 111] 
#[0 13 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 13 174 0 4 13 174 0 5 13 174 0 6 6 61 0 7 13 174 0 8 6 65 0 9 13 174 0 10 13 174 0 11 6 69 0 12 13 174 0 13 6 73 0 15 13 174 0 16 13 174 0 17 6 77 0 19 6 81 0 20 13 174 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 13 174 0 28 13 174 0 32 6 109 0 34 6 113 0 35 13 174 0 38 13 174 0 45 13 174 0 80 13 174 0 83 13 174 0 87 13 174 0 90 13 174 0 99 13 174 0 105 13 174 0 108 13 174 0 110 13 174 0 115 6 117 0 116 6 121 0 118 13 174 0 121 13 174 0 123 6 125 0 125 6 129 0 130 13 174 0 146 6 133 0 150 6 137 0 151 13 174 0 152 13 174 0 171 13 174 0 177 13 174 0 179 13 174 0 186 13 174 0 188 13 174 0 190 13 174 0 201 6 141 0 207 6 145 0 209 13 174 0 210 6 149 0 211 13 174 0 212 13 174 0 214 13 174 0 215] 
#[0 13 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 13 182 0 6 17 145 0 14 13 182 0 215 17 149 2 35] 
#[1 4 238 0 6 4 238 0 14 4 238 0 215 30 41 2 36] 
#[1 13 186 0 6 17 145 0 14 13 186 0 215 17 149 2 35] 
#[0 13 190 0 6 0 14 0 215] 
#[1 2 45 0 5 13 194 0 6 13 194 0 14 13 194 0 215 26 97 0 235 30 45 2 37] 
#[0 30 49 0 144] 
#[0 13 198 0 6 0 14 0 215] 
#[1 6 57 0 3 30 53 0 6 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 30 53 0 236] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 57 2 23 30 57 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 57 2 30 30 57 2 31 4 13 2 32 30 57 2 39 30 57 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 57 2 73 30 57 2 74 30 57 2 75 30 57 2 76 30 57 2 77 30 57 2 78 30 57 2 79 30 57 2 80 30 57 2 81 30 57 2 82 30 57 2 83 30 57 2 84 30 57 2 85 30 57 2 86 30 57 2 87 30 57 2 88 30 57 2 89 30 57 2 90 30 57 2 91 30 57 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 57 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 57 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 13 202 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 13 202 0 214 13 202 0 215] 
#[1 4 226 0 1 4 226 0 3 1 19 0 5 4 226 0 7 4 226 0 9 4 226 0 11 4 226 0 12 4 226 0 14 4 226 0 15 4 226 0 19 4 226 0 20 4 226 0 22 4 226 0 23 2 81 0 24 4 226 0 25 4 226 0 26 4 226 0 27 4 226 0 34 4 226 0 35 4 226 0 116 4 226 0 118 4 226 0 125 4 226 0 130 4 226 0 150 4 226 0 151 4 226 0 207 4 226 0 209 4 226 0 211 4 226 0 214 4 226 0 215 12 145 0 235 30 61 0 239] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 65 2 23 30 65 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 65 2 30 30 65 2 31 4 13 2 32 30 65 2 39 30 65 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 65 2 73 30 65 2 74 30 65 2 75 30 65 2 76 30 65 2 77 30 65 2 78 30 65 2 79 30 65 2 80 30 65 2 81 30 65 2 82 30 65 2 83 30 65 2 84 30 65 2 85 30 65 2 86 30 65 2 87 30 65 2 88 30 65 2 89 30 65 2 90 30 65 2 91 30 65 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 65 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 65 2 135] 
#[0 13 206 0 11 0 214 0 215] 
#[0 13 210 0 6 0 11 0 215] 
#[1 30 69 0 6 3 153 0 215 30 69 0 236] 
#[0 13 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 30 73 0 228] 
#[0 13 218 0 6 0 11 0 215] 
#[0 30 77 0 100] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 30 81 1 193 13 185 1 195] 
#[0 30 85 0 100] 
#[0 30 89 0 215] 
#[0 30 93 0 88] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 97 2 23 30 97 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 97 2 30 30 97 2 31 4 13 2 32 30 97 2 39 30 97 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 97 2 73 30 97 2 74 30 97 2 75 30 97 2 76 30 97 2 77 30 97 2 78 30 97 2 79 30 97 2 80 30 97 2 81 30 97 2 82 30 97 2 83 30 97 2 84 30 97 2 85 30 97 2 86 30 97 2 87 30 97 2 88 30 97 2 89 30 97 2 90 30 97 2 91 30 97 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 97 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 97 2 135] 
#[0 30 101 0 127] 
#[1 6 57 0 3 13 222 0 4 13 222 0 5 13 222 0 6 6 61 0 7 13 222 0 8 6 65 0 9 13 222 0 10 13 222 0 11 6 69 0 12 13 222 0 13 6 73 0 15 13 222 0 16 13 222 0 17 6 77 0 19 6 81 0 20 13 222 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 13 222 0 28 13 222 0 32 6 109 0 34 6 113 0 35 13 222 0 38 13 222 0 45 13 222 0 80 13 222 0 83 13 222 0 87 13 222 0 90 13 222 0 99 13 222 0 105 13 222 0 108 13 222 0 110 13 222 0 115 6 117 0 116 6 121 0 118 13 222 0 121 13 222 0 123 6 125 0 125 6 129 0 130 13 222 0 146 6 133 0 150 6 137 0 151 13 222 0 152 13 222 0 171 13 222 0 177 13 222 0 179 13 222 0 186 13 222 0 188 13 222 0 190 13 222 0 201 6 141 0 207 6 145 0 209 13 222 0 210 6 149 0 211 13 222 0 212 13 222 0 214 13 222 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 105 2 23 30 105 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 105 2 30 30 105 2 31 4 13 2 32 30 105 2 39 30 105 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 105 2 73 30 105 2 74 30 105 2 75 30 105 2 76 30 105 2 77 30 105 2 78 30 105 2 79 30 105 2 80 30 105 2 81 30 105 2 82 30 105 2 83 30 105 2 84 30 105 2 85 30 105 2 86 30 105 2 87 30 105 2 88 30 105 2 89 30 105 2 90 30 105 2 91 30 105 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 105 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 105 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 30 109 0 215] 
#[0 13 226 0 24 0 110] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 113 2 23 30 113 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 113 2 30 30 113 2 31 4 13 2 32 30 113 2 39 30 113 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 113 2 73 30 113 2 74 30 113 2 75 30 113 2 76 30 113 2 77 30 113 2 78 30 113 2 79 30 113 2 80 30 113 2 81 30 113 2 82 30 113 2 83 30 113 2 84 30 113 2 85 30 113 2 86 30 113 2 87 30 113 2 88 30 113 2 89 30 113 2 90 30 113 2 91 30 113 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 113 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 113 2 135] 
#[1 30 117 0 87 30 121 0 88 30 125 0 226 30 129 1 219 30 133 1 220] 
#[1 12 14 0 87 12 14 0 88 12 14 0 226 30 137 1 218] 
#[1 12 14 0 87 12 14 0 88 12 14 0 226 30 141 1 218] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 17 253 0 17 9 81 0 30 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 9 85 0 66 1 57 0 69 9 233 0 72 9 93 0 73 1 57 0 75 1 57 0 76 9 233 0 81 3 101 0 82 9 101 0 84 1 57 0 85 9 105 0 88 9 109 0 91 9 113 0 92 9 117 0 94 9 121 0 97 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 9 125 0 104 9 129 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 9 133 0 129 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 9 137 0 146 9 141 0 164 9 145 0 165 9 149 0 167 9 153 0 168 9 157 0 169 1 57 0 170 9 161 0 171 1 57 0 175 1 57 0 176 9 233 0 178 9 169 0 180 1 57 0 182 1 206 0 184 9 173 0 185 9 177 0 189 9 181 0 191 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 9 185 0 199 9 189 0 202 9 193 0 204 9 197 0 208 3 149 0 213 3 157 0 219 3 161 0 220 9 225 0 221 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 209 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 18 5 1 192 18 5 1 196 9 225 1 197 30 145 1 198 18 17 1 199 18 21 1 200 18 5 1 201 9 233 1 202 18 5 1 203 18 5 1 204 18 5 1 205 18 5 1 206 18 5 1 207 18 5 1 208 18 5 1 209 18 5 1 210 18 5 1 211 18 5 1 213 18 5 1 214 18 5 1 215 18 5 1 216 18 5 1 217 18 5 1 221 18 5 1 223 18 5 1 232 18 5 1 233 18 5 1 234 18 5 1 235 18 5 1 236 18 5 1 238 18 5 1 243 18 5 1 244 18 5 1 245 18 5 1 246 18 5 1 250 18 5 1 251 18 5 1 252 18 5 1 253 18 5 1 255 18 5 2 1 18 5 2 2 18 5 2 3 18 5 2 5 18 5 2 7 18 5 2 8 18 5 2 9 18 5 2 10 18 5 2 11 18 5 2 16 18 5 2 20 18 5 2 22 10 153 2 23 10 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 10 153 2 30 10 153 2 31 4 13 2 32 10 153 2 39 10 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 10 153 2 73 10 153 2 74 10 153 2 75 10 153 2 76 10 153 2 77 10 153 2 78 10 153 2 79 10 153 2 80 10 153 2 81 10 153 2 82 10 153 2 83 10 153 2 84 10 153 2 85 10 153 2 86 10 153 2 87 10 153 2 88 10 153 2 89 10 153 2 90 10 153 2 91 10 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 10 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 10 153 2 135] 
#[0 13 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 30 117 0 87 30 149 0 88 30 125 0 226 30 129 1 219 30 153 1 220] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 157 2 23 30 157 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 157 2 30 30 157 2 31 4 13 2 32 30 157 2 39 30 157 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 157 2 73 30 157 2 74 30 157 2 75 30 157 2 76 30 157 2 77 30 157 2 78 30 157 2 79 30 157 2 80 30 157 2 81 30 157 2 82 30 157 2 83 30 157 2 84 30 157 2 85 30 157 2 86 30 157 2 87 30 157 2 88 30 157 2 89 30 157 2 90 30 157 2 91 30 157 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 157 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 157 2 135] 
#[1 6 57 0 3 30 165 0 6 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 30 161 0 234 30 165 0 236] 
#[0 13 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 26 245 0 67 30 169 0 88 26 253 1 225 30 173 1 231] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 30 217 0 19 30 217 0 22 30 217 0 23 30 217 0 24 30 217 0 25 30 197 0 26 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 30 201 0 87 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 30 205 0 116 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 30 209 1 226 30 213 1 229 30 217 1 230 30 221 2 23 30 221 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 221 2 30 30 221 2 31 4 13 2 32 30 221 2 39 30 221 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 221 2 73 30 221 2 74 30 221 2 75 30 221 2 76 30 221 2 77 30 221 2 78 30 221 2 79 30 221 2 80 30 221 2 81 30 221 2 82 30 221 2 83 30 221 2 84 30 221 2 85 30 221 2 86 30 221 2 87 30 221 2 88 30 221 2 89 30 221 2 90 30 221 2 91 30 221 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 221 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 221 2 135] 
#[0 30 225 0 171] 
#[0 13 246 0 67 0 88] 
#[0 30 229 0 88] 
#[0 30 233 0 185] 
#[1 30 237 0 200 30 241 0 215 30 245 0 229] 
#[0 30 249 0 191] 
#[0 30 253 0 215] 
#[0 31 1 0 88] 
#[0 13 250 0 68 0 88 0 96] 
#[0 13 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 62 0 3 4 62 0 4 0 111 0 5 4 62 0 6 4 62 0 7 4 62 0 8 4 62 0 9 4 62 0 10 4 62 0 11 4 62 0 12 4 62 0 13 4 62 0 15 4 62 0 16 4 62 0 17 4 62 0 19 4 62 0 20 4 62 0 21 4 62 0 22 4 62 0 23 4 62 0 24 4 62 0 25 4 62 0 26 4 62 0 27 4 62 0 28 2 101 0 29 4 62 0 32 4 62 0 34 4 62 0 35 4 62 0 38 4 62 0 45 4 62 0 80 4 62 0 83 4 62 0 87 4 62 0 90 0 115 0 99 4 62 0 105 4 62 0 108 4 62 0 110 4 62 0 115 4 62 0 116 4 62 0 118 4 62 0 121 4 62 0 123 4 62 0 125 4 62 0 130 4 62 0 146 4 62 0 150 4 62 0 151 4 62 0 152 4 62 0 171 4 62 0 177 4 62 0 179 4 62 0 186 4 62 0 188 4 62 0 190 4 62 0 201 5 221 0 204 4 62 0 207 4 62 0 209 4 62 0 210 4 62 0 211 4 62 0 212 4 62 0 214 4 62 0 215 31 5 0 235 8 21 2 55 8 21 2 56 8 21 2 61] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 31 9 2 23 31 9 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 31 9 2 30 31 9 2 31 4 13 2 32 31 9 2 39 31 9 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 31 9 2 73 31 9 2 74 31 9 2 75 31 9 2 76 31 9 2 77 31 9 2 78 31 9 2 79 31 9 2 80 31 9 2 81 31 9 2 82 31 9 2 83 31 9 2 84 31 9 2 85 31 9 2 86 31 9 2 87 31 9 2 88 31 9 2 89 31 9 2 90 31 9 2 91 31 9 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 31 9 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 31 9 2 135] 
#[0 14 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 31 13 0 199] 
#[0 31 17 0 202] 
#[0 31 21 0 204] 
#[0 31 25 0 184] 
#[0 31 29 0 88] 
#[0 31 33 0 115] 
#[1 31 37 0 215 10 150 0 229 31 37 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 41 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 45 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 31 49 0 146] 
#[1 31 53 0 146 31 57 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 61 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 31 65 0 215 31 65 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 69 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 73 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 77 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 81 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 31 85 0 146] 
#[1 10 150 0 115 31 89 0 215 31 89 2 130] 
#[0 31 93 0 115] 
#[1 15 1 0 229 31 97 2 108 15 9 2 111] 
#[1 10 150 0 115 31 101 0 215 31 101 2 130] 
#[1 31 105 0 215 15 1 0 229 31 109 2 108 15 9 2 111] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 31 113 2 23 31 113 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 31 113 2 30 31 113 2 31 4 13 2 32 31 113 2 39 31 113 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 31 113 2 73 31 113 2 74 31 113 2 75 31 113 2 76 31 113 2 77 31 113 2 78 31 113 2 79 31 113 2 80 31 113 2 81 31 113 2 82 31 113 2 83 31 113 2 84 31 113 2 85 31 113 2 86 31 113 2 87 31 113 2 88 31 113 2 89 31 113 2 90 31 113 2 91 31 113 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 31 113 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 31 113 2 135] 
#[1 10 150 0 115 31 117 0 215 31 117 2 130] 
#[0 31 121 0 115] 
#[1 15 1 0 229 31 125 2 108 15 9 2 111] 
#[1 10 150 0 115 31 129 0 215 31 129 2 130] 
#[0 14 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 133 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 14 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 137 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 141 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 145 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 149 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 31 153 0 146] 
#[0 14 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 157 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 31 161 2 23 31 161 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 31 161 2 30 31 161 2 31 4 13 2 32 31 161 2 39 31 161 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 31 161 2 73 31 161 2 74 31 161 2 75 31 161 2 76 31 161 2 77 31 161 2 78 31 161 2 79 31 161 2 80 31 161 2 81 31 161 2 82 31 161 2 83 31 161 2 84 31 161 2 85 31 161 2 86 31 161 2 87 31 161 2 88 31 161 2 89 31 161 2 90 31 161 2 91 31 161 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 31 161 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 31 161 2 135] 
#[1 14 18 0 3 14 18 0 4 14 18 0 5 14 18 0 6 14 18 0 7 14 18 0 8 14 18 0 9 14 18 0 10 14 18 0 11 14 18 0 12 14 18 0 13 14 18 0 15 14 18 0 16 14 18 0 17 14 18 0 19 14 18 0 20 14 18 0 21 14 18 0 22 14 18 0 23 14 18 0 24 14 18 0 25 14 18 0 26 14 18 0 27 14 18 0 28 14 18 0 32 31 165 0 34 14 18 0 35 14 18 0 38 14 18 0 45 14 18 0 80 14 18 0 83 14 18 0 87 14 18 0 90 14 18 0 99 14 18 0 105 14 18 0 108 14 18 0 110 14 18 0 115 14 18 0 116 14 18 0 118 14 18 0 121 14 18 0 123 14 18 0 125 14 18 0 130 14 18 0 146 14 18 0 150 14 18 0 151 14 18 0 152 14 18 0 171 14 18 0 177 14 18 0 179 14 18 0 186 14 18 0 188 14 18 0 190 14 18 0 201 14 18 0 207 14 18 0 209 14 18 0 210 14 18 0 211 14 18 0 212 14 18 0 214 14 18 0 215 31 169 2 115] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 173 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 14 22 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 177 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 14 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 31 181 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 31 185 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 49 2 23 19 49 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 19 49 2 30 19 49 2 31 4 13 2 32 19 49 2 39 19 49 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 19 49 2 73 19 49 2 74 19 49 2 75 19 49 2 76 19 49 2 77 19 49 2 78 19 49 2 79 19 49 2 80 19 49 2 81 19 49 2 82 19 49 2 83 19 49 2 84 19 49 2 85 19 49 2 86 19 49 2 87 19 49 2 88 19 49 2 89 19 49 2 90 19 49 2 91 19 49 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 19 49 2 98 4 181 2 101 4 185 2 112 31 189 2 127 4 189 2 131 4 193 2 134 19 49 2 135] 
#[0 14 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 31 193 0 17 31 197 0 215] 
#[0 14 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 31 201 0 17 31 205 0 215] 
#[1 31 209 0 17 31 213 0 215] 
#[0 31 217 0 70] 
#[1 31 221 0 17 31 225 0 215] 
#[0 31 229 0 70] 
#[1 31 233 0 17 31 237 0 215] 
#[1 31 241 0 17 31 245 0 215] 
#[0 14 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 31 249 0 17 31 253 0 215] 
#[1 32 1 0 17 32 5 0 215] 
#[0 14 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 32 9 0 17 32 13 0 215] 
#[1 32 17 0 17 32 21 0 215] 
#[1 14 82 0 11 14 82 0 17 2 101 0 29 14 82 0 215] 
#[1 2 45 0 5 32 25 0 235] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 32 29 1 126 11 169 1 129 11 173 1 130] 
#[0 14 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 102 0 6 0 11 0 215] 
#[1 2 241 0 11 14 106 0 214 14 106 0 215 32 33 0 234 32 37 0 249] 
#[0 14 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 32 41 0 17 32 45 0 215] 
#[0 14 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 32 49 0 17 32 53 0 215] 
#[1 14 126 0 6 14 126 0 11 2 81 0 24 14 126 0 215 32 57 0 239] 
#[0 14 130 0 6 0 11 0 215] 
#[0 14 134 0 17 0 106 0 108 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 32 61 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 14 138 0 17 0 106 0 108 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 32 65 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 32 65 1 86] 
#[0 14 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 14 158 0 11 14 158 0 17 2 101 0 29 14 158 0 215] 
#[0 14 162 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 166 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 170 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 174 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 45 0 5 11 114 0 17 25 145 0 37 11 114 0 215 25 149 0 235 32 69 1 143] 
#[0 14 178 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 182 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 32 73 0 17 32 77 0 215] 
#[1 0 73 0 19 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 32 81 0 252 0 89 0 253 0 93 0 254 29 113 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 29 113 1 86] 
#[1 32 85 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 32 85 0 236 11 161 0 252 0 89 0 253 0 93 0 254 32 89 1 126 11 169 1 129 11 173 1 130] 
#[0 14 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 14 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 32 93 0 37] 
#[1 29 61 0 124 32 97 1 124] 
#[1 29 61 0 124 32 101 1 124] 
#[0 32 105 0 229] 
#[0 32 109 0 229] 
#[1 32 113 0 17 21 65 0 108 32 117 0 215 32 121 1 95] 
#[1 0 73 0 19 5 75 0 44 5 79 0 48 5 83 0 69 5 87 0 75 5 91 0 76 5 95 0 85 5 99 0 103 5 103 0 113 5 107 0 126 32 125 0 138 5 111 0 143 5 115 0 170 5 119 0 175 5 123 0 176 5 127 0 182 5 131 0 194 5 135 0 195 5 139 0 196 5 143 0 229 32 129 0 252 0 89 0 253 0 93 0 254 29 113 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 29 113 1 86 32 133 1 106] 
#[1 32 137 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 32 137 0 236 11 161 0 252 0 89 0 253 0 93 0 254 32 141 1 126 11 169 1 129 11 173 1 130] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 32 145 1 179] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 32 149 1 193 13 185 1 195] 
#[1 32 153 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 32 153 0 236 11 161 0 252 0 89 0 253 0 93 0 254 32 157 1 126 11 169 1 129 11 173 1 130] 
#[0 32 161 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 32 165 1 193 13 185 1 195] 
#[0 32 169 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 32 173 1 193 13 185 1 195] 
#[1 32 177 0 17 21 61 0 106 21 65 0 108 32 181 0 215 21 73 1 95 32 185 1 116 21 81 1 133] 
#[1 32 189 0 17 21 61 0 106 21 65 0 108 32 193 0 215 21 73 1 95 32 197 1 116 21 81 1 133] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 32 201 0 88 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 29 249 1 187 29 249 1 188 29 249 1 189 26 17 2 136] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 32 205 1 174 26 5 1 187 26 5 1 188 26 5 1 189 26 17 2 136] 
#[1 32 209 0 17 21 65 0 108 32 213 0 215 32 217 1 95] 
#[1 2 81 0 24 32 221 0 239] 
#[0 14 210 0 11 0 17 0 215] 
#[1 21 9 0 229 32 225 1 155] 
#[0 14 214 0 11 0 17 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 32 229 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 32 229 1 86] 
#[0 32 233 0 223] 
#[1 2 45 0 5 14 218 0 17 32 237 0 33 32 241 0 37 14 218 0 215 32 245 0 235 32 249 1 121 32 253 1 122 33 1 1 125] 
#[1 2 45 0 5 33 5 0 17 32 237 0 33 33 9 0 215 33 13 0 235 33 17 1 125] 
#[1 29 61 0 124 33 21 1 124] 
#[1 29 61 0 124 33 25 1 124] 
#[1 14 222 0 17 2 101 0 29 14 222 0 108 14 222 0 215] 
#[0 14 226 0 17 0 108 0 215] 
#[1 33 29 0 6 3 153 0 215 33 29 0 236] 
#[0 14 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 33 0 17 33 37 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 33 49 1 181] 
#[1 5 147 0 44 5 151 0 48 5 155 0 69 5 159 0 75 5 163 0 76 5 167 0 85 5 171 0 103 5 175 0 113 5 179 0 126 33 53 0 138 5 183 0 143 5 187 0 170 5 191 0 175 5 195 0 176 5 199 0 182 5 203 0 194 5 207 0 195 5 211 0 196 5 215 0 229 33 57 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 57 1 86] 
#[0 14 242 0 17 0 108 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 33 61 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 61 1 86] 
#[1 2 81 0 24 33 65 0 37 5 219 0 108 5 219 0 215 25 165 0 239 25 169 1 177 33 69 1 178] 
#[1 33 73 0 6 3 153 0 215 33 73 0 236] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 14 250 0 108 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 14 250 0 215] 
#[0 14 254 0 215] 
#[0 33 77 0 215] 
#[0 33 81 0 88] 
#[0 33 85 0 215] 
#[1 33 89 0 6 3 153 0 215 33 89 0 236] 
#[1 33 93 0 215 33 97 0 228] 
#[1 33 101 0 215 33 105 0 228] 
#[1 33 109 0 215 33 113 0 228] 
#[1 33 117 0 215 33 121 0 228] 
#[1 2 241 0 11 15 2 0 17 15 2 0 215 33 125 0 234 33 129 1 135] 
#[1 33 133 0 215 33 137 0 228] 
#[1 2 241 0 11 15 6 0 17 15 6 0 215 33 141 0 234 33 145 1 97] 
#[0 33 149 0 184] 
#[0 33 153 0 88] 
#[0 33 157 0 100] 
#[0 33 161 0 88] 
#[0 15 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 165 0 17 33 169 0 215] 
#[0 15 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 173 0 17 33 177 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 33 181 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 33 185 1 193 13 185 1 195] 
#[1 33 189 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 33 189 0 236 11 161 0 252 0 89 0 253 0 93 0 254 33 193 1 126 11 169 1 129 11 173 1 130] 
#[0 33 197 0 215] 
#[1 2 45 0 5 33 201 0 215 33 205 0 235] 
#[1 33 209 0 101 33 213 0 172] 
#[0 33 217 0 161] 
#[0 15 26 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 33 221 0 215] 
#[1 2 45 0 5 33 225 0 215 33 229 0 235] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 33 233 0 88 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 29 249 1 187 29 249 1 188 29 249 1 189 26 17 2 136] 
#[0 15 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 237 0 17 33 241 0 215] 
#[0 15 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 58 0 6 17 145 0 14 15 58 0 215 17 149 2 35] 
#[0 15 62 0 6 0 14 0 215] 
#[1 21 201 0 6 2 241 0 11 3 153 0 215 4 217 0 234 21 201 0 236 21 205 1 91 21 209 2 38] 
#[0 15 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 15 70 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 15 70 0 214 15 70 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 245 2 23 33 245 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 33 245 2 30 33 245 2 31 4 13 2 32 33 245 2 39 33 245 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 33 245 2 73 33 245 2 74 33 245 2 75 33 245 2 76 33 245 2 77 33 245 2 78 33 245 2 79 33 245 2 80 33 245 2 81 33 245 2 82 33 245 2 83 33 245 2 84 33 245 2 85 33 245 2 86 33 245 2 87 33 245 2 88 33 245 2 89 33 245 2 90 33 245 2 91 33 245 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 33 245 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 33 245 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 15 74 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 15 74 0 214 15 74 0 215] 
#[0 15 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 253 0 18 33 249 0 240] 
#[0 15 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 33 253 0 88] 
#[0 15 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 34 1 1 193 13 185 1 195] 
#[0 34 5 0 100] 
#[1 6 57 0 3 15 90 0 4 15 90 0 5 15 90 0 6 6 61 0 7 15 90 0 8 6 65 0 9 15 90 0 10 15 90 0 11 6 69 0 12 15 90 0 13 6 73 0 15 15 90 0 16 15 90 0 17 6 77 0 19 6 81 0 20 15 90 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 15 90 0 28 15 90 0 32 6 109 0 34 6 113 0 35 15 90 0 38 15 90 0 45 15 90 0 80 15 90 0 83 15 90 0 87 15 90 0 90 15 90 0 99 15 90 0 105 15 90 0 108 15 90 0 110 15 90 0 115 6 117 0 116 6 121 0 118 15 90 0 121 15 90 0 123 6 125 0 125 6 129 0 130 15 90 0 146 6 133 0 150 6 137 0 151 15 90 0 152 15 90 0 171 15 90 0 177 15 90 0 179 15 90 0 186 15 90 0 188 15 90 0 190 15 90 0 201 6 141 0 207 6 145 0 209 15 90 0 210 6 149 0 211 15 90 0 212 15 90 0 214 15 90 0 215] 
#[0 15 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 34 9 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 139 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 34 13 1 193 13 185 1 195] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 34 17 0 179 6 141 0 207 6 145 0 209 6 149 0 211 34 21 0 215] 
#[1 34 25 0 17 34 29 0 215] 
#[0 34 33 0 107] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 34 37 2 23 34 37 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 34 37 2 30 34 37 2 31 4 13 2 32 34 37 2 39 34 37 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 34 37 2 73 34 37 2 74 34 37 2 75 34 37 2 76 34 37 2 77 34 37 2 78 34 37 2 79 34 37 2 80 34 37 2 81 34 37 2 82 34 37 2 83 34 37 2 84 34 37 2 85 34 37 2 86 34 37 2 87 34 37 2 88 34 37 2 89 34 37 2 90 34 37 2 91 34 37 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 34 37 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 34 37 2 135] 
#[0 15 98 0 87 0 88 0 226] 
#[0 34 41 0 88] 
#[1 30 117 0 87 34 45 0 88 30 125 0 226 30 129 1 219 34 49 1 220] 
#[1 30 117 0 87 34 53 0 88 30 125 0 226 30 129 1 219 34 57 1 220] 
#[0 15 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 34 61 0 107] 
#[0 34 65 0 88] 
#[1 6 57 0 3 34 73 0 6 6 61 0 7 6 65 0 9 2 241 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 34 69 0 234 34 73 0 236] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 34 77 2 23 34 77 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 34 77 2 30 34 77 2 31 4 13 2 32 34 77 2 39 34 77 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 34 77 2 73 34 77 2 74 34 77 2 75 34 77 2 76 34 77 2 77 34 77 2 78 34 77 2 79 34 77 2 80 34 77 2 81 34 77 2 82 34 77 2 83 34 77 2 84 34 77 2 85 34 77 2 86 34 77 2 87 34 77 2 88 34 77 2 89 34 77 2 90 34 77 2 91 34 77 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 34 77 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 34 77 2 135] 
#[1 2 81 0 24 34 81 0 239] 
#[0 34 85 0 171] 
#[0 34 89 0 88] 
#[0 15 106 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 15 110 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 15 114 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 15 118 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 15 122 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 15 126 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 34 93 0 17 34 97 0 215] 
#[1 34 105 0 19 34 105 0 22 34 105 0 23 34 105 0 24 34 105 0 25 30 197 0 26 34 101 0 215 34 105 1 230] 
#[1 34 109 0 17 34 113 0 215] 
#[1 15 130 0 11 15 130 0 17 15 130 0 215 34 117 1 228] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 34 121 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 34 125 2 23 34 125 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 34 125 2 30 34 125 2 31 4 13 2 32 34 125 2 39 34 125 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 34 125 2 73 34 125 2 74 34 125 2 75 34 125 2 76 34 125 2 77 34 125 2 78 34 125 2 79 34 125 2 80 34 125 2 81 34 125 2 82 34 125 2 83 34 125 2 84 34 125 2 85 34 125 2 86 34 125 2 87 34 125 2 88 34 125 2 89 34 125 2 90 34 125 2 91 34 125 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 34 125 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 34 125 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 15 134 0 11 6 69 0 12 6 73 0 15 15 134 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 34 129 0 190 6 141 0 207 6 145 0 209 6 149 0 211 15 134 0 215] 
#[0 15 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 34 133 0 171] 
#[0 15 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 34 137 2 23 34 137 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 34 137 2 30 34 137 2 31 4 13 2 32 34 137 2 39 34 137 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 34 137 2 73 34 137 2 74 34 137 2 75 34 137 2 76 34 137 2 77 34 137 2 78 34 137 2 79 34 137 2 80 34 137 2 81 34 137 2 82 34 137 2 83 34 137 2 84 34 137 2 85 34 137 2 86 34 137 2 87 34 137 2 88 34 137 2 89 34 137 2 90 34 137 2 91 34 137 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 34 137 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 34 137 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 34 141 1 193 13 185 1 195] 
#[1 34 145 0 37 34 149 0 200 34 153 0 215] 
#[0 15 146 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 34 157 1 193 13 185 1 195] 
#[0 34 161 0 191] 
#[1 3 1 0 1 2 45 0 5 34 165 0 6 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 37 0 228 3 189 0 229 3 193 0 235 34 165 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 45 2 23 9 45 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 45 2 30 9 45 2 31 4 13 2 32 9 45 2 39 9 45 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 13 9 2 46 9 53 2 47 9 57 2 50 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 45 2 73 9 45 2 74 9 45 2 75 9 45 2 76 9 45 2 77 9 45 2 78 9 45 2 79 9 45 2 80 9 45 2 81 9 45 2 82 9 45 2 83 9 45 2 84 9 45 2 85 9 45 2 86 9 45 2 87 9 45 2 88 9 45 2 89 9 45 2 90 9 45 2 91 9 45 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 45 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 45 2 135] 
#[1 6 57 0 3 15 150 0 4 15 150 0 5 15 150 0 6 6 61 0 7 15 150 0 8 6 65 0 9 15 150 0 10 15 150 0 11 6 69 0 12 15 150 0 13 6 73 0 15 15 150 0 16 15 150 0 17 6 77 0 19 6 81 0 20 15 150 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 15 150 0 28 15 150 0 32 6 109 0 34 6 113 0 35 15 150 0 38 15 150 0 45 15 150 0 80 15 150 0 83 15 150 0 87 15 150 0 90 15 150 0 99 15 150 0 105 15 150 0 108 15 150 0 110 15 150 0 115 6 117 0 116 6 121 0 118 15 150 0 121 15 150 0 123 6 125 0 125 6 129 0 130 15 150 0 146 6 133 0 150 6 137 0 151 15 150 0 152 15 150 0 171 15 150 0 177 15 150 0 179 15 150 0 186 15 150 0 188 15 150 0 190 15 150 0 201 6 141 0 207 6 145 0 209 15 150 0 210 6 149 0 211 15 150 0 212 15 150 0 214 15 150 0 215] 
#[0 15 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 34 169 0 184] 
#[1 34 173 0 215 10 150 0 229 34 173 2 130] 
#[1 15 1 0 229 34 177 2 108 15 9 2 111] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 34 181 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 34 185 0 215 34 185 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 34 189 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 34 193 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 34 197 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 34 201 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 34 205 0 146] 
#[1 10 150 0 115 34 209 0 215 34 209 2 130] 
#[0 34 213 0 115] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 34 217 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 34 221 0 215 34 221 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 34 225 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 34 229 0 215 34 229 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 34 233 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 34 237 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 34 241 0 115] 
#[1 34 245 0 215 10 150 0 229 34 245 2 130] 
#[1 10 150 0 115 34 249 0 215 34 249 2 130] 
#[0 34 253 0 115] 
#[1 15 1 0 229 35 1 2 108 15 9 2 111] 
#[1 10 150 0 115 35 5 0 215 35 5 2 130] 
#[1 6 57 0 3 15 170 0 4 15 170 0 5 15 170 0 6 6 61 0 7 15 170 0 8 6 65 0 9 15 170 0 10 15 170 0 11 6 69 0 12 15 170 0 13 6 73 0 15 15 170 0 16 15 170 0 17 6 77 0 19 6 81 0 20 15 170 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 15 170 0 28 15 170 0 32 6 109 0 34 6 113 0 35 15 170 0 38 15 170 0 45 15 170 0 80 15 170 0 83 15 170 0 87 15 170 0 90 15 170 0 99 15 170 0 105 15 170 0 108 15 170 0 110 15 170 0 115 6 117 0 116 6 121 0 118 15 170 0 121 15 170 0 123 6 125 0 125 6 129 0 130 15 170 0 146 6 133 0 150 6 137 0 151 15 170 0 152 15 170 0 171 15 170 0 177 15 170 0 179 15 170 0 186 15 170 0 188 15 170 0 190 15 170 0 201 6 141 0 207 6 145 0 209 15 170 0 210 6 149 0 211 15 170 0 212 15 170 0 214 15 170 0 215] 
#[0 35 9 0 115] 
#[1 35 13 0 215 10 150 0 229 35 13 2 130] 
#[1 10 150 0 115 35 17 0 215 35 17 2 130] 
#[0 35 21 0 115] 
#[0 15 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 35 25 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 15 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 35 29 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 15 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 35 33 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 35 37 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 35 41 2 23 35 41 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 35 41 2 30 35 41 2 31 4 13 2 32 35 41 2 39 35 41 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 35 41 2 73 35 41 2 74 35 41 2 75 35 41 2 76 35 41 2 77 35 41 2 78 35 41 2 79 35 41 2 80 35 41 2 81 35 41 2 82 35 41 2 83 35 41 2 84 35 41 2 85 35 41 2 86 35 41 2 87 35 41 2 88 35 41 2 89 35 41 2 90 35 41 2 91 35 41 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 35 41 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 35 41 2 135] 
#[1 6 57 0 3 15 186 0 4 15 186 0 5 15 186 0 6 6 61 0 7 15 186 0 8 6 65 0 9 15 186 0 10 15 186 0 11 6 69 0 12 15 186 0 13 6 73 0 15 15 186 0 16 15 186 0 17 6 77 0 19 6 81 0 20 15 186 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 15 186 0 28 15 186 0 32 6 109 0 34 6 113 0 35 15 186 0 38 15 186 0 45 15 186 0 80 15 186 0 83 15 186 0 87 15 186 0 90 15 186 0 99 15 186 0 105 15 186 0 108 15 186 0 110 15 186 0 115 6 117 0 116 6 121 0 118 15 186 0 121 15 186 0 123 6 125 0 125 6 129 0 130 15 186 0 146 6 133 0 150 6 137 0 151 15 186 0 152 15 186 0 171 15 186 0 177 15 186 0 179 15 186 0 186 15 186 0 188 15 186 0 190 15 186 0 201 6 141 0 207 6 145 0 209 15 186 0 210 6 149 0 211 15 186 0 212 15 186 0 214 15 186 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 35 45 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 35 49 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 15 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 198 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 35 53 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 15 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 35 57 0 17 35 61 0 215] 
#[0 15 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 35 65 0 17 35 69 0 215] 
#[0 15 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 15 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 35 73 1 126 11 169 1 129 11 173 1 130] 
#[1 35 77 0 6 3 153 0 215 35 77 0 236] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 19 217 0 70 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 19 221 0 138 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 19 225 0 183 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 35 81 0 251 19 237 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 19 237 1 86] 
#[0 16 34 0 11 0 214 0 215] 
#[0 16 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 16 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 35 85 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 16 54 0 6 0 11 0 215] 
#[0 16 58 0 17 0 106 0 108 0 215] 
#[1 35 89 0 17 35 93 0 215] 
#[0 16 62 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 66 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 33 57 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 57 1 86] 
#[1 14 246 0 17 35 97 0 37 14 246 0 108 14 246 0 215] 
#[1 35 101 0 6 3 153 0 215 35 101 0 236] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 35 105 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 35 105 1 86] 
#[1 2 45 0 5 14 218 0 17 32 237 0 33 32 241 0 37 14 218 0 215 35 109 0 235 32 249 1 121 35 113 1 122 35 117 1 125] 
#[1 2 45 0 5 35 121 0 17 32 237 0 33 35 125 0 215 35 129 0 235 35 133 1 125] 
#[1 29 61 0 124 35 137 1 124] 
#[1 29 61 0 124 35 141 1 124] 
#[0 16 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 35 145 0 17 35 149 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 35 153 1 181] 
#[1 5 147 0 44 5 151 0 48 5 155 0 69 5 159 0 75 5 163 0 76 5 167 0 85 5 171 0 103 5 175 0 113 5 179 0 126 35 157 0 138 5 183 0 143 5 187 0 170 5 191 0 175 5 195 0 176 5 199 0 182 5 203 0 194 5 207 0 195 5 211 0 196 5 215 0 229 33 57 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 57 1 86] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 35 161 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 35 161 1 86] 
#[1 2 81 0 24 35 165 0 37 5 219 0 108 5 219 0 215 25 165 0 239 25 169 1 177 35 169 1 178] 
#[1 35 173 0 6 3 153 0 215 35 173 0 236] 
#[0 35 177 0 215] 
#[0 35 181 0 88] 
#[0 35 185 0 215] 
#[1 35 189 0 6 3 153 0 215 35 189 0 236] 
#[0 35 193 0 184] 
#[0 35 197 0 88] 
#[0 35 201 0 100] 
#[0 35 205 0 88] 
#[0 16 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 35 209 0 17 35 213 0 215] 
#[0 16 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 35 217 0 17 35 221 0 215] 
#[0 35 225 0 161] 
#[1 0 73 0 19 26 17 0 40 26 17 0 78 26 17 0 81 35 229 0 88 26 17 0 98 25 245 0 101 26 17 0 120 26 17 0 132 26 17 0 137 26 17 0 141 26 17 0 142 26 17 0 154 26 17 0 155 26 17 0 156 26 17 0 158 26 17 0 160 26 17 0 162 26 17 0 163 26 17 0 166 25 249 0 172 26 17 0 173 26 17 0 174 26 17 0 203 26 17 0 205 26 17 0 206 25 253 0 252 0 89 0 253 0 93 0 254 29 249 1 187 29 249 1 188 29 249 1 189 26 17 2 136] 
#[0 16 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 35 233 0 17 35 237 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 3 233 2 23 35 241 2 24 3 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 3 233 2 30 3 233 2 31 4 13 2 32 3 233 2 39 3 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 3 233 2 73 3 233 2 74 3 233 2 75 3 233 2 76 3 233 2 77 3 233 2 78 3 233 2 79 3 233 2 80 3 233 2 81 3 233 2 82 3 233 2 83 3 233 2 84 3 233 2 85 3 233 2 86 3 233 2 87 3 233 2 88 3 233 2 89 3 233 2 90 3 233 2 91 3 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 3 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 3 233 2 135] 
#[0 16 102 0 11 0 17 0 215] 
#[1 35 245 0 17 21 65 0 108 35 249 0 215 35 253 1 95] 
#[0 16 106 0 5 0 17 0 33 0 37 0 215] 
#[0 36 1 0 223] 
#[1 0 73 0 19 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 36 5 0 252 0 89 0 253 0 93 0 254 36 9 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 36 9 1 86] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 36 13 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[0 16 114 0 17 0 215] 
#[1 36 21 0 17 36 25 0 215] 
#[1 2 45 0 5 14 218 0 17 32 241 0 37 14 218 0 215 36 29 0 235 32 249 1 121 36 33 1 122] 
#[0 16 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 36 37 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 36 41 0 17 36 45 0 215 36 49 0 235] 
#[1 2 45 0 5 14 218 0 17 32 237 0 33 32 241 0 37 14 218 0 215 36 53 0 235 32 249 1 121 36 57 1 122 36 61 1 125] 
#[1 2 45 0 5 36 65 0 17 32 237 0 33 36 69 0 215 36 73 0 235 36 77 1 125] 
#[0 16 126 0 17 0 108 0 215] 
#[0 16 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 45 0 5 2 101 0 29 16 138 0 99 16 138 0 108 16 138 0 204 16 138 0 215 36 81 0 235] 
#[0 16 142 0 99 0 108 0 204 0 215] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 36 85 1 182 36 85 2 55 36 85 2 56 36 85 2 61] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 36 93 1 181] 
#[0 16 150 0 17 0 108 0 215] 
#[1 2 81 0 24 11 122 0 108 11 122 0 215 25 165 0 239 25 169 1 177 36 97 1 178] 
#[1 0 73 0 19 5 75 0 44 5 79 0 48 5 83 0 69 5 87 0 75 5 91 0 76 5 95 0 85 5 99 0 103 5 103 0 113 5 107 0 126 36 101 0 138 5 111 0 143 5 115 0 170 5 119 0 175 5 123 0 176 5 127 0 182 5 131 0 194 5 135 0 195 5 139 0 196 5 143 0 229 36 105 0 252 0 89 0 253 0 93 0 254 36 109 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 36 109 1 86 36 113 1 106] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 36 117 1 179] 
#[1 2 81 0 24 36 121 0 37 5 223 0 108 5 223 0 215 25 165 0 239 25 169 1 177 36 125 1 178] 
#[0 16 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 36 129 0 184] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 36 133 1 193 13 185 1 195] 
#[0 36 137 0 215] 
#[0 36 141 0 228] 
#[0 16 162 0 11 0 17 0 215] 
#[0 36 145 0 228] 
#[0 16 166 0 11 0 17 0 215] 
#[0 36 149 0 228] 
#[0 16 170 0 11 0 17 0 215] 
#[0 36 153 0 228] 
#[0 16 174 0 11 0 17 0 215] 
#[1 25 185 0 128 25 189 0 134 25 193 0 135 25 197 0 229 36 157 1 137] 
#[0 16 178 0 11 0 17 0 215] 
#[0 36 161 0 228] 
#[0 16 182 0 11 0 17 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 25 209 1 42 25 209 1 43 25 209 1 44 25 209 1 51 25 209 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 36 165 1 99] 
#[0 16 186 0 11 0 17 0 215] 
#[1 36 169 0 17 36 173 0 215] 
#[0 36 177 0 184] 
#[1 36 181 0 17 36 185 0 215] 
#[0 36 189 0 100] 
#[0 16 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 36 193 0 88] 
#[0 36 197 0 88] 
#[0 36 201 0 215] 
#[1 36 205 0 6 3 153 0 215 36 205 0 236] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 36 209 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 36 213 1 193 13 185 1 195] 
#[1 36 217 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 36 217 0 236 11 161 0 252 0 89 0 253 0 93 0 254 36 221 1 126 11 169 1 129 11 173 1 130] 
#[0 36 225 0 215] 
#[1 2 45 0 5 36 229 0 215 36 233 0 235] 
#[1 36 237 0 17 36 241 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 36 245 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 36 249 1 193 13 185 1 195] 
#[1 36 253 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 36 253 0 236 11 161 0 252 0 89 0 253 0 93 0 254 37 1 1 126 11 169 1 129 11 173 1 130] 
#[0 37 5 0 161] 
#[0 16 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 16 214 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 16 214 0 214 16 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 9 2 23 37 9 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 9 2 30 37 9 2 31 4 13 2 32 37 9 2 39 37 9 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 9 2 73 37 9 2 74 37 9 2 75 37 9 2 76 37 9 2 77 37 9 2 78 37 9 2 79 37 9 2 80 37 9 2 81 37 9 2 82 37 9 2 83 37 9 2 84 37 9 2 85 37 9 2 86 37 9 2 87 37 9 2 88 37 9 2 89 37 9 2 90 37 9 2 91 37 9 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 9 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 9 2 135] 
#[0 37 13 0 100] 
#[0 37 17 0 88] 
#[0 16 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 139 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 21 1 193 13 185 1 195] 
#[0 37 25 0 139] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 29 2 23 37 29 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 29 2 30 37 29 2 31 4 13 2 32 37 29 2 39 37 29 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 29 2 73 37 29 2 74 37 29 2 75 37 29 2 76 37 29 2 77 37 29 2 78 37 29 2 79 37 29 2 80 37 29 2 81 37 29 2 82 37 29 2 83 37 29 2 84 37 29 2 85 37 29 2 86 37 29 2 87 37 29 2 88 37 29 2 89 37 29 2 90 37 29 2 91 37 29 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 29 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 29 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 139 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 33 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 37 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 41 1 193 13 185 1 195] 
#[0 16 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 37 45 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 37 49 0 188 6 141 0 207 6 145 0 209 6 149 0 211 37 53 0 215] 
#[0 37 57 0 107] 
#[0 37 61 0 107] 
#[0 37 65 0 88] 
#[0 37 69 0 107] 
#[0 37 73 0 88] 
#[0 16 226 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 37 77 0 107] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 81 2 23 37 81 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 81 2 30 37 81 2 31 4 13 2 32 37 81 2 39 37 81 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 81 2 73 37 81 2 74 37 81 2 75 37 81 2 76 37 81 2 77 37 81 2 78 37 81 2 79 37 81 2 80 37 81 2 81 37 81 2 82 37 81 2 83 37 81 2 84 37 81 2 85 37 81 2 86 37 81 2 87 37 81 2 88 37 81 2 89 37 81 2 90 37 81 2 91 37 81 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 81 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 81 2 135] 
#[1 2 81 0 24 37 85 0 239] 
#[1 6 57 0 3 37 89 0 6 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 37 89 0 236] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 93 2 23 37 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 93 2 30 37 93 2 31 4 13 2 32 37 93 2 39 37 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 93 2 73 37 93 2 74 37 93 2 75 37 93 2 76 37 93 2 77 37 93 2 78 37 93 2 79 37 93 2 80 37 93 2 81 37 93 2 82 37 93 2 83 37 93 2 84 37 93 2 85 37 93 2 86 37 93 2 87 37 93 2 88 37 93 2 89 37 93 2 90 37 93 2 91 37 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 93 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 93 2 135] 
#[0 16 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 37 97 0 171] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 101 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 105 1 193 13 185 1 195] 
#[1 37 109 0 19 37 109 0 22 37 109 0 23 37 109 0 24 37 109 0 25 30 197 0 26 37 109 1 230] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 37 113 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 117 2 23 37 117 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 117 2 30 37 117 2 31 4 13 2 32 37 117 2 39 37 117 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 117 2 73 37 117 2 74 37 117 2 75 37 117 2 76 37 117 2 77 37 117 2 78 37 117 2 79 37 117 2 80 37 117 2 81 37 117 2 82 37 117 2 83 37 117 2 84 37 117 2 85 37 117 2 86 37 117 2 87 37 117 2 88 37 117 2 89 37 117 2 90 37 117 2 91 37 117 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 117 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 117 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 67 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 121 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 67 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 125 1 193 13 185 1 195] 
#[1 2 241 0 11 16 234 0 17 16 234 0 215 37 129 0 234 37 133 1 227] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 137 2 23 37 137 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 137 2 30 37 137 2 31 4 13 2 32 37 137 2 39 37 137 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 137 2 73 37 137 2 74 37 137 2 75 37 137 2 76 37 137 2 77 37 137 2 78 37 137 2 79 37 137 2 80 37 137 2 81 37 137 2 82 37 137 2 83 37 137 2 84 37 137 2 85 37 137 2 86 37 137 2 87 37 137 2 88 37 137 2 89 37 137 2 90 37 137 2 91 37 137 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 137 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 137 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 16 238 0 11 6 69 0 12 6 73 0 15 16 238 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 16 238 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 141 2 23 37 141 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 141 2 30 37 141 2 31 4 13 2 32 37 141 2 39 37 141 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 141 2 73 37 141 2 74 37 141 2 75 37 141 2 76 37 141 2 77 37 141 2 78 37 141 2 79 37 141 2 80 37 141 2 81 37 141 2 82 37 141 2 83 37 141 2 84 37 141 2 85 37 141 2 86 37 141 2 87 37 141 2 88 37 141 2 89 37 141 2 90 37 141 2 91 37 141 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 141 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 141 2 135] 
#[0 16 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 37 145 0 215] 
#[0 16 246 0 68 0 88 0 96] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 37 149 1 42 37 149 1 43 37 149 1 44 37 149 1 51 37 149 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 37 153 2 23 37 153 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 37 153 2 30 37 153 2 31 4 13 2 32 37 153 2 39 37 153 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 37 153 2 73 37 153 2 74 37 153 2 75 37 153 2 76 37 153 2 77 37 153 2 78 37 153 2 79 37 153 2 80 37 153 2 81 37 153 2 82 37 153 2 83 37 153 2 84 37 153 2 85 37 153 2 86 37 153 2 87 37 153 2 88 37 153 2 89 37 153 2 90 37 153 2 91 37 153 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 37 153 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 37 153 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 37 157 1 193 13 185 1 195] 
#[0 16 250 0 88] 
#[0 16 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 7 162 0 3 7 162 0 4 7 162 0 5 7 162 0 6 7 162 0 7 7 162 0 8 7 162 0 9 7 162 0 10 7 162 0 11 7 162 0 12 7 162 0 13 7 162 0 15 7 162 0 16 7 162 0 17 7 162 0 19 7 162 0 20 7 162 0 21 7 162 0 22 7 162 0 23 7 162 0 24 7 162 0 25 7 162 0 26 7 162 0 27 7 162 0 28 7 162 0 32 7 162 0 34 7 162 0 35 7 162 0 38 7 162 0 45 7 162 0 80 7 162 0 83 7 162 0 87 7 162 0 90 1 127 0 99 7 162 0 105 7 162 0 108 7 162 0 110 7 162 0 115 7 162 0 116 7 162 0 118 7 162 0 121 7 162 0 123 7 162 0 125 7 162 0 130 7 162 0 146 7 162 0 150 7 162 0 151 7 162 0 152 7 162 0 171 7 162 0 177 7 162 0 179 7 162 0 186 7 162 0 188 7 162 0 190 7 162 0 201 5 221 0 204 7 162 0 207 7 162 0 209 7 162 0 210 7 162 0 211 7 162 0 212 7 162 0 214 7 162 0 215 17 189 2 55 17 189 2 56 17 189 2 61] 
#[0 17 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 37 161 2 108 15 9 2 111] 
#[0 17 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 150 0 115 37 165 0 215 37 165 2 130] 
#[0 37 169 0 115] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 37 173 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 37 177 0 215 37 177 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 37 181 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 37 185 0 215 37 185 2 130] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 37 189 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 37 193 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 37 197 0 115] 
#[1 37 201 0 215 10 150 0 229 37 201 2 130] 
#[1 10 150 0 115 37 205 0 215 37 205 2 130] 
#[0 37 209 0 115] 
#[1 10 150 0 115 37 213 0 215 37 213 2 130] 
#[0 37 217 0 115] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 37 221 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 37 225 0 215 37 225 2 130] 
#[1 37 229 0 215 10 150 0 229 37 229 2 130] 
#[1 15 1 0 229 37 233 2 108 15 9 2 111] 
#[0 37 237 0 115] 
#[1 37 241 0 215 10 150 0 229 37 241 2 130] 
#[1 10 150 0 115 37 245 0 215 37 245 2 130] 
#[0 37 249 0 115] 
#[1 37 253 0 215 10 150 0 229 37 253 2 130] 
#[1 15 1 0 229 38 1 2 108 15 9 2 111] 
#[0 38 5 0 115] 
#[1 38 9 0 215 10 150 0 229 38 9 2 130] 
#[0 17 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 38 13 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 17 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 17 22 0 4 17 22 0 5 17 22 0 6 6 61 0 7 17 22 0 8 6 65 0 9 17 22 0 10 17 22 0 11 6 69 0 12 17 22 0 13 6 73 0 15 17 22 0 16 17 22 0 17 6 77 0 19 6 81 0 20 17 22 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 17 22 0 28 17 22 0 32 6 109 0 34 6 113 0 35 17 22 0 38 17 22 0 45 17 22 0 80 17 22 0 83 17 22 0 87 17 22 0 90 17 22 0 99 17 22 0 105 17 22 0 108 17 22 0 110 17 22 0 115 6 117 0 116 6 121 0 118 17 22 0 121 17 22 0 123 6 125 0 125 6 129 0 130 17 22 0 146 6 133 0 150 6 137 0 151 17 22 0 152 17 22 0 171 17 22 0 177 17 22 0 179 17 22 0 186 17 22 0 188 17 22 0 190 17 22 0 201 6 141 0 207 6 145 0 209 17 22 0 210 6 149 0 211 17 22 0 212 17 22 0 214 17 22 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 38 17 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[0 17 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 17 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 17 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[0 17 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 137] 
#[1 38 21 0 6 3 153 0 215 38 21 0 236] 
#[1 38 25 0 37 38 29 0 215] 
#[0 17 50 0 11 0 214 0 215] 
#[0 17 54 0 6 0 11 0 215] 
#[0 17 58 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 62 0 19 0 40 0 70 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 38 33 0 252 0 89 0 253 0 93 0 254 36 109 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 36 109 1 86] 
#[1 16 154 0 17 38 37 0 37 16 154 0 108 16 154 0 215] 
#[1 38 41 0 17 21 65 0 108 38 45 0 215 38 49 1 95] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 38 53 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 38 57 0 17 38 61 0 215] 
#[1 2 45 0 5 14 218 0 17 32 241 0 37 14 218 0 215 38 65 0 235 32 249 1 121 38 69 1 122] 
#[0 17 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 38 73 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 38 77 0 17 38 81 0 215 38 85 0 235] 
#[1 2 45 0 5 14 218 0 17 32 237 0 33 32 241 0 37 14 218 0 215 38 89 0 235 32 249 1 121 38 93 1 122 38 97 1 125] 
#[1 2 45 0 5 38 101 0 17 32 237 0 33 38 105 0 215 38 109 0 235 38 113 1 125] 
#[0 17 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 38 117 1 182 38 117 2 55 38 117 2 56 38 117 2 61] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 38 121 1 181] 
#[1 2 81 0 24 11 122 0 108 11 122 0 215 25 165 0 239 25 169 1 177 38 125 1 178] 
#[1 0 73 0 19 5 75 0 44 5 79 0 48 5 83 0 69 5 87 0 75 5 91 0 76 5 95 0 85 5 99 0 103 5 103 0 113 5 107 0 126 38 129 0 138 5 111 0 143 5 115 0 170 5 119 0 175 5 123 0 176 5 127 0 182 5 131 0 194 5 135 0 195 5 139 0 196 5 143 0 229 38 133 0 252 0 89 0 253 0 93 0 254 36 109 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 36 109 1 86 38 137 1 106] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 38 141 1 179] 
#[1 2 81 0 24 38 145 0 37 5 223 0 108 5 223 0 215 25 165 0 239 25 169 1 177 38 149 1 178] 
#[0 17 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 38 153 0 184] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 38 157 1 193 13 185 1 195] 
#[0 38 161 0 215] 
#[1 38 165 0 17 38 169 0 215] 
#[0 38 173 0 184] 
#[1 38 177 0 17 38 181 0 215] 
#[0 38 185 0 100] 
#[0 17 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 38 189 0 17 38 193 0 215] 
#[0 38 197 0 161] 
#[0 17 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 110 0 11 0 17 0 215] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 38 217 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 38 237 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 38 241 0 17 38 245 0 215] 
#[0 17 114 0 5 0 17 0 37 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 38 249 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 38 249 1 86] 
#[0 17 118 0 17 0 215] 
#[1 38 253 0 6 3 153 0 215 38 253 0 236] 
#[0 17 122 0 6 0 215] 
#[0 17 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 39 1 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 39 5 0 17 39 9 0 215] 
#[1 39 13 0 6 3 153 0 215 39 13 0 236] 
#[0 17 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 39 17 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 39 21 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 39 25 0 17 39 29 0 215] 
#[1 2 45 0 5 14 218 0 17 32 241 0 37 14 218 0 215 39 33 0 235 32 249 1 121 39 37 1 122] 
#[0 17 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 39 41 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 39 45 0 17 39 49 0 215 39 53 0 235] 
#[1 3 1 0 1 2 45 0 5 39 57 0 6 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 153 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 9 37 0 228 3 189 0 229 3 193 0 235 39 57 0 236 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 9 45 2 23 9 45 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 9 45 2 30 9 45 2 31 4 13 2 32 9 45 2 39 9 45 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 39 61 2 46 9 53 2 47 9 57 2 50 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 9 45 2 73 9 45 2 74 9 45 2 75 9 45 2 76 9 45 2 77 9 45 2 78 9 45 2 79 9 45 2 80 9 45 2 81 9 45 2 82 9 45 2 83 9 45 2 84 9 45 2 85 9 45 2 86 9 45 2 87 9 45 2 88 9 45 2 89 9 45 2 90 9 45 2 91 9 45 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 9 45 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 9 45 2 135] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 39 65 1 179] 
#[0 17 150 0 108 0 215] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 39 69 1 182 39 69 2 55 39 69 2 56 39 69 2 61] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 39 73 1 179] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 39 77 1 181] 
#[1 5 147 0 44 5 151 0 48 5 155 0 69 5 159 0 75 5 163 0 76 5 167 0 85 5 171 0 103 5 175 0 113 5 179 0 126 39 81 0 138 5 183 0 143 5 187 0 170 5 191 0 175 5 195 0 176 5 199 0 182 5 203 0 194 5 207 0 195 5 211 0 196 5 215 0 229 39 85 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 85 1 86] 
#[0 17 154 0 17 0 108 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 39 89 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 89 1 86] 
#[0 39 93 0 215] 
#[1 0 73 0 19 5 75 0 44 5 79 0 48 5 83 0 69 5 87 0 75 5 91 0 76 5 95 0 85 5 99 0 103 5 103 0 113 5 107 0 126 39 97 0 138 5 111 0 143 5 115 0 170 5 119 0 175 5 123 0 176 5 127 0 182 5 131 0 194 5 135 0 195 5 139 0 196 5 143 0 229 39 101 0 252 0 89 0 253 0 93 0 254 39 105 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 105 1 86 39 109 1 106] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 39 113 1 179] 
#[1 39 117 0 17 39 121 0 215] 
#[0 39 125 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 39 129 1 193 13 185 1 195] 
#[0 17 158 0 11 0 17 0 215] 
#[0 17 162 0 11 0 17 0 215] 
#[0 17 166 0 11 0 17 0 215] 
#[0 17 170 0 11 0 17 0 215] 
#[0 17 174 0 11 0 17 0 215] 
#[0 17 178 0 11 0 17 0 215] 
#[0 17 182 0 11 0 17 0 215] 
#[0 17 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 133 0 17 39 137 0 215] 
#[0 17 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 141 0 17 39 145 0 215] 
#[0 39 149 0 101] 
#[0 39 153 0 172] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 39 157 1 193 13 185 1 195] 
#[0 39 161 0 215] 
#[0 39 165 0 88] 
#[0 39 169 0 88] 
#[0 39 173 0 215] 
#[1 39 177 0 6 3 153 0 215 39 177 0 236] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 39 181 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 39 185 1 193 13 185 1 195] 
#[1 39 189 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 3 153 0 215 4 174 0 229 39 189 0 236 11 161 0 252 0 89 0 253 0 93 0 254 39 193 1 126 11 169 1 129 11 173 1 130] 
#[0 17 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 39 197 0 88] 
#[0 39 201 0 88] 
#[0 39 205 0 215] 
#[1 39 209 0 6 3 153 0 215 39 209 0 236] 
#[1 39 213 0 17 39 217 0 215] 
#[1 6 57 0 3 17 210 0 6 6 61 0 7 6 65 0 9 17 210 0 11 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 17 210 0 215] 
#[0 17 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 39 221 0 100] 
#[0 39 225 0 139] 
#[1 3 1 0 1 17 218 0 3 17 218 0 4 5 227 0 5 17 218 0 6 17 218 0 7 17 218 0 8 3 9 0 9 17 218 0 10 17 218 0 11 3 13 0 12 17 218 0 13 3 17 0 14 17 218 0 15 17 218 0 16 17 218 0 17 17 218 0 19 17 218 0 20 17 218 0 21 17 218 0 22 17 218 0 23 17 218 0 24 17 218 0 25 17 218 0 26 17 218 0 27 17 218 0 28 3 21 0 31 5 231 0 32 17 218 0 34 17 218 0 35 17 218 0 38 1 206 0 40 3 29 0 42 1 57 0 44 17 218 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 17 218 0 80 3 101 0 82 17 218 0 83 1 57 0 85 17 218 0 87 17 218 0 90 5 235 0 99 1 206 0 100 3 109 0 102 3 113 0 103 17 218 0 105 3 117 0 107 17 218 0 108 17 218 0 110 1 57 0 113 17 218 0 115 17 218 0 116 17 218 0 118 1 206 0 120 17 218 0 121 17 218 0 123 17 218 0 125 1 57 0 126 3 121 0 128 17 218 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 17 218 0 146 17 218 0 150 17 218 0 151 17 218 0 152 1 57 0 170 17 218 0 171 1 57 0 175 1 57 0 176 17 218 0 177 17 218 0 179 1 57 0 182 1 206 0 184 17 218 0 186 17 218 0 188 17 218 0 190 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 17 218 0 201 17 218 0 207 17 218 0 209 17 218 0 210 17 218 0 211 17 218 0 212 3 149 0 213 17 218 0 214 17 218 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 229 1 240 39 233 2 23 39 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 39 233 2 30 39 233 2 31 4 13 2 32 39 233 2 39 39 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 39 233 2 73 39 233 2 74 39 233 2 75 39 233 2 76 39 233 2 77 39 233 2 78 39 233 2 79 39 233 2 80 39 233 2 81 39 233 2 82 39 233 2 83 39 233 2 84 39 233 2 85 39 233 2 86 39 233 2 87 39 233 2 88 39 233 2 89 39 233 2 90 39 233 2 91 39 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 39 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 39 233 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 39 237 0 215] 
#[0 39 241 0 139] 
#[0 17 222 0 88] 
#[0 17 226 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 39 245 1 193 13 185 1 195] 
#[1 39 249 0 17 39 253 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 40 1 1 193 13 185 1 195] 
#[0 17 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 5 0 107] 
#[0 17 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 9 0 107] 
#[0 17 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 40 13 0 6 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 3 153 0 215 40 13 0 236] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 40 17 2 23 40 17 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 40 17 2 30 40 17 2 31 4 13 2 32 40 17 2 39 40 17 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 40 17 2 73 40 17 2 74 40 17 2 75 40 17 2 76 40 17 2 77 40 17 2 78 40 17 2 79 40 17 2 80 40 17 2 81 40 17 2 82 40 17 2 83 40 17 2 84 40 17 2 85 40 17 2 86 40 17 2 87 40 17 2 88 40 17 2 89 40 17 2 90 40 17 2 91 40 17 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 40 17 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 40 17 2 135] 
#[1 2 81 0 24 40 21 0 239] 
#[1 6 57 0 3 17 246 0 4 17 246 0 5 17 246 0 6 6 61 0 7 17 246 0 8 6 65 0 9 17 246 0 10 17 246 0 11 6 69 0 12 17 246 0 13 6 73 0 15 17 246 0 16 17 246 0 17 6 77 0 19 6 81 0 20 17 246 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 17 246 0 28 17 246 0 32 6 109 0 34 6 113 0 35 17 246 0 38 17 246 0 45 17 246 0 80 17 246 0 83 17 246 0 87 17 246 0 90 17 246 0 99 17 246 0 105 17 246 0 108 17 246 0 110 17 246 0 115 6 117 0 116 6 121 0 118 17 246 0 121 17 246 0 123 6 125 0 125 6 129 0 130 17 246 0 146 6 133 0 150 6 137 0 151 17 246 0 152 17 246 0 171 17 246 0 177 17 246 0 179 17 246 0 186 17 246 0 188 17 246 0 190 17 246 0 201 6 141 0 207 6 145 0 209 17 246 0 210 6 149 0 211 17 246 0 212 17 246 0 214 17 246 0 215] 
#[0 17 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 254 0 88] 
#[0 18 2 0 88] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 40 25 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 40 29 2 23 40 29 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 40 29 2 30 40 29 2 31 4 13 2 32 40 29 2 39 40 29 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 40 29 2 73 40 29 2 74 40 29 2 75 40 29 2 76 40 29 2 77 40 29 2 78 40 29 2 79 40 29 2 80 40 29 2 81 40 29 2 82 40 29 2 83 40 29 2 84 40 29 2 85 40 29 2 86 40 29 2 87 40 29 2 88 40 29 2 89 40 29 2 90 40 29 2 91 40 29 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 40 29 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 40 29 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 40 33 2 23 40 33 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 40 33 2 30 40 33 2 31 4 13 2 32 40 33 2 39 40 33 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 40 33 2 73 40 33 2 74 40 33 2 75 40 33 2 76 40 33 2 77 40 33 2 78 40 33 2 79 40 33 2 80 40 33 2 81 40 33 2 82 40 33 2 83 40 33 2 84 40 33 2 85 40 33 2 86 40 33 2 87 40 33 2 88 40 33 2 89 40 33 2 90 40 33 2 91 40 33 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 40 33 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 40 33 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 18 6 0 11 6 69 0 12 6 73 0 15 18 6 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 6 0 215] 
#[0 18 10 0 67 0 88] 
#[0 18 14 0 67 0 88] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 30 217 0 19 30 217 0 22 30 217 0 23 30 217 0 24 30 217 0 25 30 197 0 26 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 30 205 0 116 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 40 37 1 229 30 217 1 230 30 221 2 23 30 221 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 30 221 2 30 30 221 2 31 4 13 2 32 30 221 2 39 30 221 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 30 221 2 73 30 221 2 74 30 221 2 75 30 221 2 76 30 221 2 77 30 221 2 78 30 221 2 79 30 221 2 80 30 221 2 81 30 221 2 82 30 221 2 83 30 221 2 84 30 221 2 85 30 221 2 86 30 221 2 87 30 221 2 88 30 221 2 89 30 221 2 90 30 221 2 91 30 221 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 30 221 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 30 221 2 135] 
#[0 18 18 0 11 0 17 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 18 22 0 11 6 69 0 12 6 73 0 15 18 22 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 22 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 18 26 0 11 6 69 0 12 6 73 0 15 18 26 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 26 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 40 41 1 193 13 185 1 195] 
#[1 2 101 0 29 40 45 0 200 40 49 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 40 53 0 215] 
#[0 18 30 0 68 0 88 0 96] 
#[0 18 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 57 0 115] 
#[1 40 61 0 215 10 150 0 229 40 61 2 130] 
#[1 10 150 0 115 40 65 0 215 40 65 2 130] 
#[0 40 69 0 115] 
#[1 10 150 0 115 40 73 0 215 40 73 2 130] 
#[0 40 77 0 115] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 23 93 2 23 23 93 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 23 93 2 30 23 93 2 31 4 13 2 32 23 93 2 39 23 93 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 23 93 2 73 23 93 2 74 23 93 2 75 23 93 2 76 23 93 2 77 23 93 2 78 23 93 2 79 23 93 2 80 23 93 2 81 23 93 2 82 23 93 2 83 23 93 2 84 23 93 2 85 23 93 2 86 23 93 2 87 23 93 2 88 23 93 2 89 23 93 2 90 23 93 2 91 23 93 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 23 93 2 98 4 181 2 101 4 185 2 112 40 81 2 114 23 101 2 117 4 189 2 131 4 193 2 134 23 93 2 135] 
#[1 10 150 0 115 40 85 0 215 40 85 2 130] 
#[1 40 89 0 215 10 150 0 229 40 89 2 130] 
#[1 15 1 0 229 40 93 2 108 15 9 2 111] 
#[0 40 97 0 115] 
#[1 40 101 0 215 10 150 0 229 40 101 2 130] 
#[0 40 105 0 115] 
#[1 40 109 0 215 10 150 0 229 40 109 2 130] 
#[1 10 150 0 115 40 113 0 215 40 113 2 130] 
#[0 40 117 0 115] 
#[1 15 1 0 229 40 121 2 108 15 9 2 111] 
#[0 18 38 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 40 125 0 215 10 150 0 229 40 125 2 130] 
#[1 15 1 0 229 40 129 2 108 15 9 2 111] 
#[0 40 133 0 115] 
#[1 40 137 0 215 10 150 0 229 40 137 2 130] 
#[1 15 1 0 229 40 141 2 108 15 9 2 111] 
#[0 18 42 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 40 145 0 215 10 150 0 229 40 145 2 130] 
#[1 15 1 0 229 40 149 2 108 15 9 2 111] 
#[0 18 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 40 153 0 37 40 157 0 215] 
#[1 0 73 0 19 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 40 161 0 252 0 89 0 253 0 93 0 254 40 165 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 40 165 1 86] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 40 169 1 193 13 185 1 195] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 39 85 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 85 1 86] 
#[1 0 73 0 19 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 40 173 0 252 0 89 0 253 0 93 0 254 39 105 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 105 1 86] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 40 177 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 40 181 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 40 185 0 17 40 189 0 215] 
#[1 40 193 0 6 3 153 0 215 40 193 0 236] 
#[0 18 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 40 197 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 40 201 0 17 40 205 0 215] 
#[1 40 209 0 6 3 153 0 215 40 209 0 236] 
#[0 18 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 40 213 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 40 217 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 40 221 0 17 40 225 0 215] 
#[1 2 45 0 5 14 218 0 17 32 241 0 37 14 218 0 215 40 229 0 235 32 249 1 121 40 233 1 122] 
#[0 18 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 40 237 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 40 241 0 17 40 245 0 215 40 249 0 235] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 40 253 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 41 1 1 182 41 1 2 55 41 1 2 56 41 1 2 61] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 41 5 1 179] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 41 9 1 181] 
#[1 5 147 0 44 5 151 0 48 5 155 0 69 5 159 0 75 5 163 0 76 5 167 0 85 5 171 0 103 5 175 0 113 5 179 0 126 41 13 0 138 5 183 0 143 5 187 0 170 5 191 0 175 5 195 0 176 5 199 0 182 5 203 0 194 5 207 0 195 5 211 0 196 5 215 0 229 39 85 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 85 1 86] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 41 17 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 41 17 1 86] 
#[0 41 21 0 215] 
#[1 0 73 0 19 5 75 0 44 5 79 0 48 5 83 0 69 5 87 0 75 5 91 0 76 5 95 0 85 5 99 0 103 5 103 0 113 5 107 0 126 41 25 0 138 5 111 0 143 5 115 0 170 5 119 0 175 5 123 0 176 5 127 0 182 5 131 0 194 5 135 0 195 5 139 0 196 5 143 0 229 41 29 0 252 0 89 0 253 0 93 0 254 39 105 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 39 105 1 86 41 33 1 106] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 41 37 1 179] 
#[1 41 41 0 17 41 45 0 215] 
#[0 41 49 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 41 53 1 193 13 185 1 195] 
#[0 18 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 57 0 17 41 61 0 215] 
#[0 18 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 65 0 17 41 69 0 215] 
#[0 18 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 73 0 17 41 77 0 215] 
#[1 2 45 0 5 41 81 0 235] 
#[1 2 45 0 5 41 85 0 235] 
#[1 2 45 0 5 41 89 0 235] 
#[1 41 93 0 30 41 97 0 164 41 101 0 167] 
#[1 0 73 0 19 38 201 0 30 41 105 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[0 18 102 0 19 0 30 0 88 0 164 0 167] 
#[0 18 106 0 19 0 30 0 88 0 164 0 167] 
#[0 18 110 0 19 0 30 0 88 0 164 0 167] 
#[0 18 114 0 19 0 30 0 88 0 164 0 167] 
#[1 0 73 0 19 38 201 0 30 41 113 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 117 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 121 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[0 18 118 0 17 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 41 125 1 122] 
#[1 41 129 0 6 3 153 0 215 41 129 0 236] 
#[0 18 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 133 0 17 41 137 0 215] 
#[1 41 141 0 6 3 153 0 215 41 141 0 236] 
#[1 41 145 0 6 3 153 0 215 41 145 0 236] 
#[0 18 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 41 149 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 41 153 0 17 41 157 0 215] 
#[1 41 161 0 6 3 153 0 215 41 161 0 236] 
#[0 18 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 41 165 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[0 18 146 0 99 0 108 0 204 0 215] 
#[1 41 169 0 6 3 153 0 215 41 169 0 236] 
#[0 41 173 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 41 177 1 179] 
#[0 41 181 0 215] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 41 185 1 182 41 185 2 55 41 185 2 56 41 185 2 61] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 41 189 1 181] 
#[0 18 150 0 17 0 108 0 215] 
#[1 2 81 0 24 11 122 0 108 11 122 0 215 25 165 0 239 25 169 1 177 41 193 1 178] 
#[0 18 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 41 197 1 181] 
#[1 5 147 0 44 5 151 0 48 5 155 0 69 5 159 0 75 5 163 0 76 5 167 0 85 5 171 0 103 5 175 0 113 5 179 0 126 41 201 0 138 5 183 0 143 5 187 0 170 5 191 0 175 5 195 0 176 5 199 0 182 5 203 0 194 5 207 0 195 5 211 0 196 5 215 0 229 41 205 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 41 205 1 86] 
#[0 18 158 0 17 0 108 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 41 209 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 41 209 1 86] 
#[0 41 213 0 215] 
#[0 18 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 41 217 0 184] 
#[0 41 221 0 88] 
#[0 18 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 225 0 17 41 229 0 215] 
#[1 41 233 0 17 41 237 0 215] 
#[0 41 241 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 41 245 1 193 13 185 1 195] 
#[0 41 249 0 101] 
#[0 41 253 0 172] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 42 1 1 193 13 185 1 195] 
#[0 42 5 0 215] 
#[0 42 9 0 88] 
#[0 42 13 0 88] 
#[0 42 17 0 215] 
#[1 42 21 0 6 3 153 0 215 42 21 0 236] 
#[0 42 25 0 101] 
#[0 42 29 0 172] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 42 33 1 193 13 185 1 195] 
#[0 42 37 0 215] 
#[0 18 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 18 198 0 3 18 198 0 4 5 239 0 5 18 198 0 6 18 198 0 7 18 198 0 8 3 9 0 9 18 198 0 10 18 198 0 11 3 13 0 12 18 198 0 13 3 17 0 14 18 198 0 15 18 198 0 16 18 198 0 17 18 198 0 19 18 198 0 20 18 198 0 21 18 198 0 22 18 198 0 23 18 198 0 24 18 198 0 25 18 198 0 26 18 198 0 27 18 198 0 28 3 21 0 31 5 243 0 32 18 198 0 34 18 198 0 35 18 198 0 38 1 206 0 40 3 29 0 42 1 57 0 44 18 198 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 18 198 0 80 3 101 0 82 18 198 0 83 1 57 0 85 18 198 0 87 18 198 0 90 5 247 0 99 1 206 0 100 3 109 0 102 3 113 0 103 18 198 0 105 3 117 0 107 18 198 0 108 18 198 0 110 1 57 0 113 18 198 0 115 18 198 0 116 18 198 0 118 1 206 0 120 18 198 0 121 18 198 0 123 18 198 0 125 1 57 0 126 3 121 0 128 18 198 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 18 198 0 146 18 198 0 150 18 198 0 151 18 198 0 152 1 57 0 170 18 198 0 171 1 57 0 175 1 57 0 176 18 198 0 177 18 198 0 179 1 57 0 182 1 206 0 184 18 198 0 186 18 198 0 188 18 198 0 190 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 18 198 0 201 18 198 0 207 18 198 0 209 18 198 0 210 18 198 0 211 18 198 0 212 3 149 0 213 18 198 0 214 18 198 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 41 1 240 39 233 2 23 39 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 39 233 2 30 39 233 2 31 4 13 2 32 39 233 2 39 39 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 39 233 2 73 39 233 2 74 39 233 2 75 39 233 2 76 39 233 2 77 39 233 2 78 39 233 2 79 39 233 2 80 39 233 2 81 39 233 2 82 39 233 2 83 39 233 2 84 39 233 2 85 39 233 2 86 39 233 2 87 39 233 2 88 39 233 2 89 39 233 2 90 39 233 2 91 39 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 39 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 39 233 2 135] 
#[0 18 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 57 0 3 18 206 0 4 18 206 0 5 18 206 0 6 6 61 0 7 18 206 0 8 6 65 0 9 18 206 0 10 18 206 0 11 6 69 0 12 18 206 0 13 6 73 0 15 18 206 0 16 18 206 0 17 6 77 0 19 6 81 0 20 18 206 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 18 206 0 28 18 206 0 32 6 109 0 34 6 113 0 35 18 206 0 38 18 206 0 45 18 206 0 80 18 206 0 83 18 206 0 87 18 206 0 90 18 206 0 99 18 206 0 105 18 206 0 108 18 206 0 110 18 206 0 115 6 117 0 116 6 121 0 118 18 206 0 121 18 206 0 123 6 125 0 125 6 129 0 130 18 206 0 146 6 133 0 150 6 137 0 151 18 206 0 152 18 206 0 171 18 206 0 177 18 206 0 179 18 206 0 186 18 206 0 188 18 206 0 190 18 206 0 201 6 141 0 207 6 145 0 209 18 206 0 210 6 149 0 211 18 206 0 212 18 206 0 214 18 206 0 215 42 45 1 242] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 139 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 42 49 1 193 13 185 1 195] 
#[1 3 1 0 1 18 210 0 3 18 210 0 4 5 251 0 5 18 210 0 6 18 210 0 7 18 210 0 8 3 9 0 9 18 210 0 10 18 210 0 11 3 13 0 12 18 210 0 13 3 17 0 14 18 210 0 15 18 210 0 16 18 210 0 17 18 210 0 19 18 210 0 20 18 210 0 21 18 210 0 22 18 210 0 23 18 210 0 24 18 210 0 25 18 210 0 26 18 210 0 27 18 210 0 28 3 21 0 31 5 255 0 32 18 210 0 34 18 210 0 35 18 210 0 38 1 206 0 40 3 29 0 42 1 57 0 44 18 210 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 18 210 0 80 3 101 0 82 18 210 0 83 1 57 0 85 18 210 0 87 18 210 0 90 6 3 0 99 1 206 0 100 3 109 0 102 3 113 0 103 18 210 0 105 3 117 0 107 18 210 0 108 18 210 0 110 1 57 0 113 18 210 0 115 18 210 0 116 18 210 0 118 1 206 0 120 18 210 0 121 18 210 0 123 18 210 0 125 1 57 0 126 3 121 0 128 18 210 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 18 210 0 146 18 210 0 150 18 210 0 151 18 210 0 152 1 57 0 170 18 210 0 171 1 57 0 175 1 57 0 176 18 210 0 177 18 210 0 179 1 57 0 182 1 206 0 184 18 210 0 186 18 210 0 188 18 210 0 190 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 18 210 0 201 18 210 0 207 18 210 0 209 18 210 0 210 18 210 0 211 18 210 0 212 3 149 0 213 18 210 0 214 18 210 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 53 1 240 39 233 2 23 39 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 39 233 2 30 39 233 2 31 4 13 2 32 39 233 2 39 39 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 39 233 2 73 39 233 2 74 39 233 2 75 39 233 2 76 39 233 2 77 39 233 2 78 39 233 2 79 39 233 2 80 39 233 2 81 39 233 2 82 39 233 2 83 39 233 2 84 39 233 2 85 39 233 2 86 39 233 2 87 39 233 2 88 39 233 2 89 39 233 2 90 39 233 2 91 39 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 39 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 39 233 2 135] 
#[0 18 214 0 87 0 88 0 226] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 42 57 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 87 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 226 5 174 0 227 5 174 0 229 42 61 1 193 13 185 1 195] 
#[0 18 218 0 87 0 88 0 226] 
#[0 18 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 226 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 81 0 24 42 65 0 239] 
#[1 6 57 0 3 18 230 0 4 18 230 0 5 18 230 0 6 6 61 0 7 18 230 0 8 6 65 0 9 18 230 0 10 18 230 0 11 6 69 0 12 18 230 0 13 6 73 0 15 18 230 0 16 18 230 0 17 6 77 0 19 6 81 0 20 18 230 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 18 230 0 28 18 230 0 32 6 109 0 34 6 113 0 35 18 230 0 38 18 230 0 45 18 230 0 80 18 230 0 83 18 230 0 87 18 230 0 90 18 230 0 99 18 230 0 105 18 230 0 108 18 230 0 110 18 230 0 115 6 117 0 116 6 121 0 118 18 230 0 121 18 230 0 123 6 125 0 125 6 129 0 130 18 230 0 146 6 133 0 150 6 137 0 151 18 230 0 152 18 230 0 171 18 230 0 177 18 230 0 179 18 230 0 186 18 230 0 188 18 230 0 190 18 230 0 201 6 141 0 207 6 145 0 209 18 230 0 210 6 149 0 211 18 230 0 212 18 230 0 214 18 230 0 215] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 69 2 23 42 69 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 42 69 2 30 42 69 2 31 4 13 2 32 42 69 2 39 42 69 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 42 69 2 73 42 69 2 74 42 69 2 75 42 69 2 76 42 69 2 77 42 69 2 78 42 69 2 79 42 69 2 80 42 69 2 81 42 69 2 82 42 69 2 83 42 69 2 84 42 69 2 85 42 69 2 86 42 69 2 87 42 69 2 88 42 69 2 89 42 69 2 90 42 69 2 91 42 69 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 42 69 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 42 69 2 135] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 73 2 23 42 73 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 42 73 2 30 42 73 2 31 4 13 2 32 42 73 2 39 42 73 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 42 73 2 73 42 73 2 74 42 73 2 75 42 73 2 76 42 73 2 77 42 73 2 78 42 73 2 79 42 73 2 80 42 73 2 81 42 73 2 82 42 73 2 83 42 73 2 84 42 73 2 85 42 73 2 86 42 73 2 87 42 73 2 88 42 73 2 89 42 73 2 90 42 73 2 91 42 73 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 42 73 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 42 73 2 135] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 18 234 0 11 6 69 0 12 6 73 0 15 18 234 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 234 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 18 238 0 11 6 69 0 12 6 73 0 15 18 238 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 18 238 0 215] 
#[0 18 242 0 11 0 17 0 215] 
#[0 18 246 0 68 0 88 0 96] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 77 2 23 42 77 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 42 77 2 30 42 77 2 31 4 13 2 32 42 77 2 39 42 77 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 42 77 2 73 42 77 2 74 42 77 2 75 42 77 2 76 42 77 2 77 42 77 2 78 42 77 2 79 42 77 2 80 42 77 2 81 42 77 2 82 42 77 2 83 42 77 2 84 42 77 2 85 42 77 2 86 42 77 2 87 42 77 2 88 42 77 2 89 42 77 2 90 42 77 2 91 42 77 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 42 77 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 42 77 2 135] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 42 81 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 42 85 1 193 13 185 1 195] 
#[1 42 89 0 215 10 150 0 229 42 89 2 130] 
#[1 15 1 0 229 42 93 2 108 15 9 2 111] 
#[0 42 97 0 115] 
#[1 42 101 0 215 10 150 0 229 42 101 2 130] 
#[0 42 105 0 115] 
#[1 42 109 0 215 10 150 0 229 42 109 2 130] 
#[1 10 150 0 115 42 113 0 215 42 113 2 130] 
#[0 42 117 0 115] 
#[1 15 1 0 229 42 121 2 108 15 9 2 111] 
#[0 18 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 42 125 0 215 10 150 0 229 42 125 2 130] 
#[1 15 1 0 229 42 129 2 108 15 9 2 111] 
#[1 42 133 0 215 10 150 0 229 42 133 2 130] 
#[1 15 1 0 229 42 137 2 108 15 9 2 111] 
#[0 42 141 0 115] 
#[1 42 145 0 215 10 150 0 229 42 145 2 130] 
#[0 18 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 42 149 2 108 15 9 2 111] 
#[0 19 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 42 153 0 215 10 150 0 229 42 153 2 130] 
#[1 15 1 0 229 42 157 2 108 15 9 2 111] 
#[0 19 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 42 161 2 108 15 9 2 111] 
#[0 19 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 73 0 19 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 42 165 0 252 0 89 0 253 0 93 0 254 42 169 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 169 1 86] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 42 173 1 193 13 185 1 195] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 42 177 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 42 177 1 86] 
#[0 42 181 0 215] 
#[0 42 185 0 88] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 41 205 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 41 205 1 86] 
#[1 0 73 0 19 38 201 0 30 42 189 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 0 73 0 19 38 201 0 30 42 193 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 42 197 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 0 73 0 19 38 201 0 30 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 42 201 1 146 38 221 1 147 38 221 1 148 38 221 1 149 38 221 1 150] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 42 205 1 122] 
#[1 42 209 0 6 3 153 0 215 42 209 0 236] 
#[0 19 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 42 213 0 17 42 217 0 215] 
#[1 42 221 0 6 3 153 0 215 42 221 0 236] 
#[1 42 225 0 6 3 153 0 215 42 225 0 236] 
#[0 19 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 42 229 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[1 42 233 0 17 42 237 0 215] 
#[1 42 241 0 6 3 153 0 215 42 241 0 236] 
#[0 19 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 110 0 6 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 16 110 0 215 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 42 245 1 119 36 17 1 126 11 169 1 129 11 173 1 130] 
#[0 42 249 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 42 253 1 179] 
#[0 43 1 0 215] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 43 5 1 182 43 5 2 55 43 5 2 56 43 5 2 61] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 43 9 1 181] 
#[1 2 81 0 24 11 122 0 108 11 122 0 215 25 165 0 239 25 169 1 177 43 13 1 178] 
#[0 19 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 43 17 1 181] 
#[1 5 147 0 44 5 151 0 48 5 155 0 69 5 159 0 75 5 163 0 76 5 167 0 85 5 171 0 103 5 175 0 113 5 179 0 126 43 21 0 138 5 183 0 143 5 187 0 170 5 191 0 175 5 195 0 176 5 199 0 182 5 203 0 194 5 207 0 195 5 211 0 196 5 215 0 229 41 205 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 41 205 1 86] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 43 25 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 43 25 1 86] 
#[0 43 29 0 215] 
#[0 19 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 43 33 0 184] 
#[0 43 37 0 88] 
#[0 19 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 43 41 1 126 11 169 1 129 11 173 1 130] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 43 45 1 126 11 169 1 129 11 173 1 130] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 43 49 1 126 11 169 1 129 11 173 1 130] 
#[1 2 45 0 5 43 53 0 235] 
#[1 2 45 0 5 43 57 0 235] 
#[1 2 45 0 5 43 61 0 235] 
#[0 43 65 0 93] 
#[0 19 74 0 19 0 30 0 88 0 164 0 167] 
#[0 43 69 0 93] 
#[1 0 73 0 19 38 201 0 30 43 73 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 0 73 0 19 38 201 0 30 43 77 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 43 81 0 17 43 85 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 43 89 1 122] 
#[0 19 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 93 0 17 43 97 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 43 101 1 122] 
#[1 43 105 0 6 3 153 0 215 43 105 0 236] 
#[0 19 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 109 0 17 43 113 0 215] 
#[1 43 117 0 6 3 153 0 215 43 117 0 236] 
#[0 19 94 0 99 0 108 0 204 0 215] 
#[0 19 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 43 121 0 215] 
#[0 19 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 43 125 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 43 129 1 182 43 129 2 55 43 129 2 56 43 129 2 61] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 43 133 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 43 137 1 182 43 137 2 55 43 137 2 56 43 137 2 61] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 43 141 1 181] 
#[0 19 106 0 17 0 108 0 215] 
#[1 2 81 0 24 11 122 0 108 11 122 0 215 25 165 0 239 25 169 1 177 43 145 1 178] 
#[0 19 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 149 0 17 43 153 0 215] 
#[0 43 157 0 184] 
#[0 19 114 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 19 118 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 19 122 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 19 126 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 43 161 0 172] 
#[0 43 165 0 88] 
#[1 43 169 0 17 43 173 0 215] 
#[1 43 177 0 17 43 181 0 215] 
#[0 43 185 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 43 189 1 193 13 185 1 195] 
#[0 43 193 0 101] 
#[0 43 197 0 172] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 43 201 1 193 13 185 1 195] 
#[0 43 205 0 215] 
#[1 43 209 0 17 43 213 0 215] 
#[1 43 217 0 17 43 221 0 215] 
#[0 43 225 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 43 229 1 193 13 185 1 195] 
#[0 19 130 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 19 134 0 3 19 134 0 4 19 134 0 5 19 134 0 6 19 134 0 7 19 134 0 8 19 134 0 9 19 134 0 10 6 7 0 11 19 134 0 12 19 134 0 13 19 134 0 15 19 134 0 16 19 134 0 17 19 134 0 19 19 134 0 20 19 134 0 21 19 134 0 22 19 134 0 23 19 134 0 24 19 134 0 25 19 134 0 26 19 134 0 27 19 134 0 28 19 134 0 32 19 134 0 34 19 134 0 35 19 134 0 38 19 134 0 45 19 134 0 80 19 134 0 83 19 134 0 87 19 134 0 90 19 134 0 99 19 134 0 105 19 134 0 108 19 134 0 110 19 134 0 115 19 134 0 116 19 134 0 118 19 134 0 121 19 134 0 123 19 134 0 125 19 134 0 130 19 134 0 146 19 134 0 150 19 134 0 151 19 134 0 152 19 134 0 171 19 134 0 177 19 134 0 179 19 134 0 186 19 134 0 188 19 134 0 190 19 134 0 201 19 134 0 207 19 134 0 209 19 134 0 210 19 134 0 211 19 134 0 212 19 134 0 214 19 134 0 215 43 233 0 234 43 237 1 241] 
#[0 43 241 0 139] 
#[0 19 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 142 0 87 0 88 0 226] 
#[0 19 146 0 87 0 88 0 226] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 43 245 2 23 43 245 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 43 245 2 30 43 245 2 31 4 13 2 32 43 245 2 39 43 245 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 43 245 2 73 43 245 2 74 43 245 2 75 43 245 2 76 43 245 2 77 43 245 2 78 43 245 2 79 43 245 2 80 43 245 2 81 43 245 2 82 43 245 2 83 43 245 2 84 43 245 2 85 43 245 2 86 43 245 2 87 43 245 2 88 43 245 2 89 43 245 2 90 43 245 2 91 43 245 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 43 245 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 43 245 2 135] 
#[1 6 57 0 3 19 150 0 4 19 150 0 5 19 150 0 6 6 61 0 7 19 150 0 8 6 65 0 9 19 150 0 10 19 150 0 11 6 69 0 12 19 150 0 13 6 73 0 15 19 150 0 16 19 150 0 17 6 77 0 19 6 81 0 20 19 150 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 19 150 0 28 19 150 0 32 6 109 0 34 6 113 0 35 19 150 0 38 19 150 0 45 19 150 0 80 19 150 0 83 19 150 0 87 19 150 0 90 19 150 0 99 19 150 0 105 19 150 0 108 19 150 0 110 19 150 0 115 6 117 0 116 6 121 0 118 19 150 0 121 19 150 0 123 6 125 0 125 6 129 0 130 19 150 0 146 6 133 0 150 6 137 0 151 19 150 0 152 19 150 0 171 19 150 0 177 19 150 0 179 19 150 0 186 19 150 0 188 19 150 0 190 19 150 0 201 6 141 0 207 6 145 0 209 19 150 0 210 6 149 0 211 19 150 0 212 19 150 0 214 19 150 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 19 154 0 11 6 69 0 12 6 73 0 15 19 154 0 17 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 19 154 0 215] 
#[1 6 57 0 3 6 61 0 7 6 65 0 9 6 69 0 12 6 73 0 15 6 77 0 19 6 81 0 20 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 6 109 0 34 6 113 0 35 6 117 0 116 6 121 0 118 6 125 0 125 6 129 0 130 6 133 0 150 6 137 0 151 6 141 0 207 6 145 0 209 6 149 0 211 43 249 0 215] 
#[0 19 158 0 68 0 88 0 96] 
#[0 19 162 0 68 0 88 0 96] 
#[1 15 1 0 229 43 253 2 108 15 9 2 111] 
#[0 19 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 44 1 0 215 10 150 0 229 44 1 2 130] 
#[1 15 1 0 229 44 5 2 108 15 9 2 111] 
#[1 44 9 0 215 10 150 0 229 44 9 2 130] 
#[1 15 1 0 229 44 13 2 108 15 9 2 111] 
#[0 44 17 0 115] 
#[1 44 21 0 215 10 150 0 229 44 21 2 130] 
#[0 19 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 44 25 2 108 15 9 2 111] 
#[0 19 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 44 29 2 108 15 9 2 111] 
#[0 19 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 44 33 0 215 10 150 0 229 44 33 2 130] 
#[1 15 1 0 229 44 37 2 108 15 9 2 111] 
#[0 19 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 44 41 2 108 15 9 2 111] 
#[0 19 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 0 237 0 103 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 1 29 0 229 44 45 1 41 1 97 1 42 1 97 1 43 1 97 1 44 1 97 1 51 1 97 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 44 45 1 86] 
#[0 44 49 0 215] 
#[0 44 53 0 88] 
#[0 44 57 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 44 61 1 193 13 185 1 195] 
#[0 44 65 0 147] 
#[0 44 69 0 93] 
#[0 44 73 0 93] 
#[1 0 73 0 19 38 201 0 30 44 77 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 0 73 0 19 38 201 0 30 44 81 0 88 38 205 0 164 38 209 0 167 38 213 0 252 0 89 0 253 0 93 0 254 41 109 1 147 41 109 1 148 41 109 1 149 41 109 1 150] 
#[1 44 85 0 17 44 89 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 44 93 1 122] 
#[0 19 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 97 0 17 44 101 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 44 105 1 122] 
#[1 44 109 0 6 3 153 0 215 44 109 0 236] 
#[0 19 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 113 0 17 44 117 0 215] 
#[1 44 121 0 6 3 153 0 215 44 121 0 236] 
#[0 19 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 44 125 0 215] 
#[0 19 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 44 129 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 44 133 1 182 44 133 2 55 44 133 2 56 44 133 2 61] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 44 137 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 44 141 1 182 44 141 2 55 44 141 2 56 44 141 2 61] 
#[1 1 57 0 44 1 57 0 48 1 57 0 69 1 57 0 75 1 57 0 76 1 57 0 85 14 238 0 99 0 237 0 103 14 238 0 108 1 57 0 113 1 57 0 126 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 57 0 194 1 57 0 195 1 57 0 196 14 238 0 204 14 238 0 215 1 29 0 229 33 41 1 42 33 41 1 43 33 41 1 44 33 41 1 51 33 41 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 33 45 1 180 44 145 1 181] 
#[1 2 81 0 24 11 122 0 108 11 122 0 215 25 165 0 239 25 169 1 177 44 149 1 178] 
#[0 19 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 153 0 17 44 157 0 215] 
#[0 44 161 0 184] 
#[1 44 165 0 6 3 153 0 215 44 165 0 236] 
#[1 44 169 0 6 3 153 0 215 44 169 0 236] 
#[1 44 173 0 6 3 153 0 215 44 173 0 236] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 44 177 1 126 11 169 1 129 11 173 1 130] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 44 181 1 126 11 169 1 129 11 173 1 130] 
#[1 0 73 0 19 4 174 0 46 4 174 0 47 4 174 0 149 4 174 0 157 4 174 0 229 11 161 0 252 0 89 0 253 0 93 0 254 44 185 1 126 11 169 1 129 11 173 1 130] 
#[1 44 189 0 17 44 193 0 215] 
#[1 44 197 0 17 44 201 0 215] 
#[0 44 205 0 93] 
#[0 44 209 0 93] 
#[0 19 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 213 0 17 44 217 0 215] 
#[0 19 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 221 0 17 44 225 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 44 229 1 122] 
#[0 19 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 233 0 17 44 237 0 215] 
#[0 19 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 44 241 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 44 245 1 179] 
#[0 44 249 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 44 253 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 45 1 1 182 45 1 2 55 45 1 2 56 45 1 2 61] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 45 5 1 179] 
#[0 19 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 9 0 17 45 13 0 215] 
#[1 45 17 0 17 45 21 0 215] 
#[0 45 25 0 172] 
#[0 20 2 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 6 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 10 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 14 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 45 29 0 172] 
#[0 45 33 0 88] 
#[1 45 37 0 17 45 41 0 215] 
#[1 45 45 0 17 45 49 0 215] 
#[0 45 53 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 45 57 1 193 13 185 1 195] 
#[0 20 18 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 22 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 26 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 30 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 45 61 0 172] 
#[0 45 65 0 88] 
#[1 3 1 0 1 2 45 0 5 3 9 0 9 3 13 0 12 3 17 0 14 3 21 0 31 3 25 0 32 1 206 0 40 3 29 0 42 1 57 0 44 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 3 101 0 82 1 57 0 85 3 105 0 99 1 206 0 100 3 109 0 102 3 113 0 103 3 117 0 107 1 57 0 113 1 206 0 120 1 57 0 126 3 121 0 128 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 1 57 0 170 1 57 0 175 1 57 0 176 1 57 0 182 1 206 0 184 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 3 149 0 213 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 45 69 2 23 45 69 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 45 69 2 30 45 69 2 31 4 13 2 32 45 69 2 39 45 69 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 45 69 2 73 45 69 2 74 45 69 2 75 45 69 2 76 45 69 2 77 45 69 2 78 45 69 2 79 45 69 2 80 45 69 2 81 45 69 2 82 45 69 2 83 45 69 2 84 45 69 2 85 45 69 2 86 45 69 2 87 45 69 2 88 45 69 2 89 45 69 2 90 45 69 2 91 45 69 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 45 69 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 45 69 2 135] 
#[0 20 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 1 0 1 20 38 0 3 20 38 0 4 6 11 0 5 20 38 0 6 20 38 0 7 20 38 0 8 3 9 0 9 20 38 0 10 20 38 0 11 3 13 0 12 20 38 0 13 3 17 0 14 20 38 0 15 20 38 0 16 20 38 0 17 20 38 0 19 20 38 0 20 20 38 0 21 20 38 0 22 20 38 0 23 20 38 0 24 20 38 0 25 20 38 0 26 20 38 0 27 20 38 0 28 3 21 0 31 6 15 0 32 20 38 0 34 20 38 0 35 20 38 0 38 1 206 0 40 3 29 0 42 1 57 0 44 20 38 0 45 1 57 0 48 4 77 0 49 4 77 0 50 4 77 0 51 4 77 0 52 4 77 0 53 4 77 0 54 4 77 0 55 4 77 0 56 4 77 0 57 4 77 0 58 4 77 0 59 4 77 0 60 4 77 0 61 3 85 0 62 4 77 0 63 4 77 0 64 4 77 0 65 1 57 0 69 1 57 0 75 1 57 0 76 20 38 0 80 3 101 0 82 20 38 0 83 1 57 0 85 20 38 0 87 20 38 0 90 6 19 0 99 1 206 0 100 3 109 0 102 3 113 0 103 20 38 0 105 3 117 0 107 20 38 0 108 20 38 0 110 1 57 0 113 20 38 0 115 20 38 0 116 20 38 0 118 1 206 0 120 20 38 0 121 20 38 0 123 20 38 0 125 1 57 0 126 3 121 0 128 20 38 0 130 3 125 0 134 3 129 0 135 3 133 0 138 3 137 0 140 0 253 0 143 20 38 0 146 20 38 0 150 20 38 0 151 20 38 0 152 1 57 0 170 20 38 0 171 1 57 0 175 1 57 0 176 20 38 0 177 20 38 0 179 1 57 0 182 1 206 0 184 20 38 0 186 20 38 0 188 20 38 0 190 3 141 0 192 3 145 0 193 1 57 0 194 1 57 0 195 1 57 0 196 20 38 0 201 20 38 0 207 20 38 0 209 20 38 0 210 20 38 0 211 20 38 0 212 3 149 0 213 20 38 0 214 20 38 0 215 3 157 0 219 3 161 0 220 3 165 0 222 3 169 0 223 3 173 0 224 3 177 0 225 3 181 0 227 3 189 0 229 3 193 0 235 3 201 0 237 3 245 0 241 3 229 1 42 3 229 1 43 3 229 1 44 3 229 1 51 3 229 1 53 1 57 1 59 1 57 1 60 1 57 1 61 1 57 1 62 45 73 1 240 39 233 2 23 39 233 2 25 3 245 2 26 3 249 2 27 3 253 2 28 4 1 2 29 39 233 2 30 39 233 2 31 4 13 2 32 39 233 2 39 39 233 2 40 4 25 2 41 4 29 2 42 4 33 2 43 4 37 2 44 4 41 2 45 4 45 2 53 4 45 2 54 4 45 2 62 4 45 2 67 4 45 2 68 4 45 2 69 4 45 2 70 4 73 2 71 4 77 2 72 39 233 2 73 39 233 2 74 39 233 2 75 39 233 2 76 39 233 2 77 39 233 2 78 39 233 2 79 39 233 2 80 39 233 2 81 39 233 2 82 39 233 2 83 39 233 2 84 39 233 2 85 39 233 2 86 39 233 2 87 39 233 2 88 39 233 2 89 39 233 2 90 39 233 2 91 39 233 2 92 4 161 2 93 4 165 2 94 4 165 2 95 4 165 2 96 39 233 2 98 4 181 2 101 4 185 2 112 4 189 2 131 4 193 2 134 39 233 2 135] 
#[1 6 57 0 3 20 42 0 4 20 42 0 5 20 42 0 6 6 61 0 7 20 42 0 8 6 65 0 9 20 42 0 10 20 42 0 11 6 69 0 12 20 42 0 13 6 73 0 15 20 42 0 16 20 42 0 17 6 77 0 19 6 81 0 20 20 42 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 20 42 0 28 20 42 0 32 6 109 0 34 6 113 0 35 20 42 0 38 20 42 0 45 20 42 0 80 20 42 0 83 20 42 0 87 20 42 0 90 20 42 0 99 20 42 0 105 20 42 0 108 20 42 0 110 20 42 0 115 6 117 0 116 6 121 0 118 20 42 0 121 20 42 0 123 6 125 0 125 6 129 0 130 20 42 0 146 6 133 0 150 6 137 0 151 20 42 0 152 20 42 0 171 20 42 0 177 20 42 0 179 20 42 0 186 20 42 0 188 20 42 0 190 20 42 0 201 6 141 0 207 6 145 0 209 20 42 0 210 6 149 0 211 20 42 0 212 20 42 0 214 20 42 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 68 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 96 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 45 77 1 193 13 185 1 195] 
#[0 20 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 45 81 2 108 15 9 2 111] 
#[0 20 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 45 85 2 108 15 9 2 111] 
#[0 20 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 45 89 0 215 10 150 0 229 45 89 2 130] 
#[1 15 1 0 229 45 93 2 108 15 9 2 111] 
#[0 20 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 62 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 45 97 2 108 15 9 2 111] 
#[0 20 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 45 101 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 45 105 1 193 13 185 1 195] 
#[0 45 109 0 147] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 45 113 1 193 13 185 1 195] 
#[0 45 117 0 88] 
#[1 45 121 0 17 45 125 0 215] 
#[1 45 129 0 17 45 133 0 215] 
#[1 45 137 0 17 45 141 0 215] 
#[0 45 145 0 93] 
#[0 45 149 0 93] 
#[0 20 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 153 0 17 45 157 0 215] 
#[0 20 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 161 0 17 45 165 0 215] 
#[1 14 218 0 17 32 241 0 37 14 218 0 215 32 249 1 121 45 169 1 122] 
#[0 20 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 173 0 17 45 177 0 215] 
#[0 20 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 45 181 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 45 185 1 179] 
#[0 45 189 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 45 193 1 179] 
#[1 8 1 0 99 16 146 0 108 5 221 0 204 16 146 0 215 45 197 1 182 45 197 2 55 45 197 2 56 45 197 2 61] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 45 201 1 179] 
#[0 20 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 205 0 17 45 209 0 215] 
#[0 45 213 0 215] 
#[0 45 217 0 215] 
#[0 45 221 0 215] 
#[1 45 225 0 6 3 153 0 215 45 225 0 236] 
#[1 45 229 0 6 3 153 0 215 45 229 0 236] 
#[1 45 233 0 6 3 153 0 215 45 233 0 236] 
#[0 20 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 237 0 17 45 241 0 215] 
#[1 45 245 0 17 45 249 0 215] 
#[0 20 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 253 0 17 46 1 0 215] 
#[0 20 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 5 0 215] 
#[0 20 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 9 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 46 13 1 179] 
#[0 46 17 0 215] 
#[0 20 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 166 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 170 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[1 46 21 0 17 46 25 0 215] 
#[1 46 29 0 17 46 33 0 215] 
#[0 46 37 0 172] 
#[0 20 174 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 178 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 182 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 20 186 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 46 41 0 172] 
#[0 46 45 0 88] 
#[1 46 49 0 17 46 53 0 215] 
#[0 46 57 0 172] 
#[1 6 57 0 3 20 190 0 4 20 190 0 5 20 190 0 6 6 61 0 7 20 190 0 8 6 65 0 9 20 190 0 10 20 190 0 11 6 69 0 12 20 190 0 13 6 73 0 15 20 190 0 16 20 190 0 17 6 77 0 19 6 81 0 20 20 190 0 21 6 85 0 22 6 89 0 23 6 93 0 24 6 97 0 25 6 101 0 26 6 105 0 27 20 190 0 28 20 190 0 32 6 109 0 34 6 113 0 35 20 190 0 38 20 190 0 45 20 190 0 80 20 190 0 83 20 190 0 87 20 190 0 90 20 190 0 99 20 190 0 105 20 190 0 108 20 190 0 110 20 190 0 115 6 117 0 116 6 121 0 118 20 190 0 121 20 190 0 123 6 125 0 125 6 129 0 130 20 190 0 146 6 133 0 150 6 137 0 151 20 190 0 152 20 190 0 171 20 190 0 177 20 190 0 179 20 190 0 186 20 190 0 188 20 190 0 190 20 190 0 201 6 141 0 207 6 145 0 209 20 190 0 210 6 149 0 211 20 190 0 212 20 190 0 214 20 190 0 215] 
#[0 20 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 198 0 68 0 88 0 96] 
#[0 20 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 1 0 229 46 61 2 108 15 9 2 111] 
#[0 20 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 65 1 193 13 185 1 195] 
#[0 46 69 0 88] 
#[1 46 73 0 17 46 77 0 215] 
#[0 46 81 0 88] 
#[0 46 85 0 147] 
#[0 20 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 89 0 17 46 93 0 215] 
#[1 46 97 0 17 46 101 0 215] 
#[0 20 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 105 0 17 46 109 0 215] 
#[0 21 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 113 0 215] 
#[0 21 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 117 0 215] 
#[1 21 65 0 108 13 114 0 215 29 133 1 95 46 121 1 179] 
#[0 46 125 0 215] 
#[0 21 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 129 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 133 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 137 1 193 13 185 1 195] 
#[0 46 141 0 215] 
#[0 46 145 0 215] 
#[0 46 149 0 215] 
#[0 21 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 153 0 215] 
#[0 21 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 62 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 66 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 70 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 74 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[1 46 157 0 17 46 161 0 215] 
#[1 46 165 0 17 46 169 0 215] 
#[0 46 173 0 172] 
#[0 21 78 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 82 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[1 46 177 0 17 46 181 0 215] 
#[0 21 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 46 185 0 88] 
#[0 46 189 0 147] 
#[0 21 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 193 0 147] 
#[1 46 197 0 17 46 201 0 215] 
#[0 21 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 205 0 215] 
#[0 21 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 209 0 88] 
#[0 46 213 0 88] 
#[0 46 217 0 88] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 221 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 225 1 193 13 185 1 195] 
#[1 5 174 0 1 5 174 0 5 5 174 0 9 5 174 0 12 5 174 0 14 5 174 0 17 5 174 0 30 5 174 0 31 5 174 0 32 5 174 0 40 5 174 0 42 5 174 0 44 5 174 0 48 5 174 0 49 5 174 0 50 5 174 0 51 5 174 0 52 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 57 5 174 0 58 5 174 0 59 5 174 0 60 5 174 0 61 5 174 0 62 5 174 0 63 5 174 0 64 5 174 0 65 5 174 0 66 5 174 0 69 5 174 0 72 5 174 0 73 5 174 0 75 5 174 0 76 5 174 0 81 5 174 0 82 5 174 0 84 5 174 0 85 5 174 0 88 5 174 0 91 5 174 0 92 5 174 0 94 5 174 0 97 5 174 0 99 5 174 0 100 5 174 0 102 5 174 0 103 5 174 0 104 5 174 0 107 5 174 0 113 5 174 0 120 5 174 0 126 5 174 0 128 5 174 0 129 5 174 0 134 5 174 0 135 5 174 0 138 5 174 0 140 5 174 0 143 5 174 0 146 5 174 0 164 5 174 0 165 5 174 0 167 5 174 0 168 5 174 0 169 5 174 0 170 5 174 0 171 5 174 0 175 5 174 0 176 5 174 0 178 5 174 0 180 5 174 0 182 5 174 0 184 5 174 0 185 5 174 0 189 5 174 0 191 5 174 0 192 5 174 0 193 5 174 0 194 5 174 0 195 5 174 0 196 5 174 0 199 5 174 0 202 5 174 0 204 5 174 0 208 5 174 0 213 5 174 0 215 5 174 0 219 5 174 0 220 5 174 0 221 5 174 0 222 5 174 0 223 5 174 0 224 5 174 0 225 5 174 0 227 5 174 0 229 46 229 1 193 13 185 1 195] 
#[0 21 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 138 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 142 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 146 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 150 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[1 46 233 0 17 46 237 0 215] 
#[0 21 154 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 158 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 46 241 0 147] 
#[1 46 245 0 17 46 249 0 215] 
#[1 46 253 0 17 47 1 0 215] 
#[0 21 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 5 0 30] 
#[0 47 9 0 164] 
#[0 47 13 0 167] 
#[0 47 17 0 88] 
#[0 47 21 0 88] 
#[0 47 25 0 88] 
#[0 21 174 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[0 21 178 0 19 0 40 0 78 0 81 0 88 0 98 0 101 0 120 0 132 0 137 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 166 0 172 0 173 0 174 0 203 0 205 0 206] 
#[1 47 29 0 17 47 33 0 215] 
#[0 21 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 47 37 0 17 47 41 0 215] 
#[1 47 45 0 17 47 49 0 215] 
#[1 47 53 0 17 47 57 0 215] 
#[0 47 61 0 30] 
#[0 47 65 0 164] 
#[0 47 69 0 167] 
#[0 21 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 206 0 19 0 30 0 88 0 164 0 167] 
#[0 21 210 0 19 0 30 0 88 0 164 0 167] 
#[0 21 214 0 19 0 30 0 88 0 164 0 167] 
#[0 21 218 0 19 0 30 0 88 0 164 0 167] 
#[0 21 222 0 19 0 30 0 88 0 164 0 167] 
#[0 21 226 0 19 0 30 0 88 0 164 0 167] 
#[1 47 73 0 17 47 77 0 215] 
#[1 47 81 0 17 47 85 0 215] 
#[1 47 89 0 17 47 93 0 215] 
#[0 21 230 0 19 0 30 0 88 0 164 0 167] 
#[0 21 234 0 19 0 30 0 88 0 164 0 167] 
#[0 21 238 0 19 0 30 0 88 0 164 0 167] 
#[0 21 242 0 19 0 30 0 88 0 164 0 167] 
#[0 21 246 0 19 0 30 0 88 0 164 0 167] 
#[0 21 250 0 19 0 30 0 88 0 164 0 167]
	).
]

{ #category : #accessing }
VBNetParser >> actionsForCurrentToken [
	| actions |
	actions := super actionsForCurrentToken.
	(actions isEmpty
		and: [ currentToken ids includes: scanner LineTerminatorId ])
		ifTrue: [ currentToken := nil.
			self getNextToken.
			^ self actionsForCurrentToken ].
	((currentToken ids includes: scanner IdentifierOrKeywordId)
		and:
			[ (self class keywords includes: currentToken source asUppercase) not ])
		ifTrue: [ self addActionsFor: scanner IdentifierId to: actions ].
	(actions isEmpty and: [ self isEOFToken ])
		ifTrue: [ self addActionsFor: scanner LineTerminatorId to: actions ].
	^ actions
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration1: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result addHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result addHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration2: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result addHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result addHandlerTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration3: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result addHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result addHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration4: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result addHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result addHandlerTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerStatement1: nodes [
	| result |
	result := VBNetAddHandlerStatementNode new.
	result addHandlerToken: (nodes at: 1).
	result event: (nodes at: 2).
	result comma: (nodes at: 3).
	result handler: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddressOfExpression1: nodes [
	| result |
	result := VBNetAddressOfExpressionNode new.
	result addressOfToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator2: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator3: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator4: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator5: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator6: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator7: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator8: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAliasImportsClause1: nodes [
	| result |
	result := VBNetAliasImportsClauseNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAnonymousObjectCreationExpression1: nodes [
	| result |
	result := VBNetAnonymousCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList3: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayCreationExpression1: nodes [
	| result |
	result := VBNetArrayCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result arrayTypeModifiers.
	result addToken: ((nodes at: 3) at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 3) to: result bounds.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	result addToken: ((nodes at: 3) at: 5) to: result rightParens.
	result initializer: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayNameModifier1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayNameModifier2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 2 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArraySizeInitializationModifier1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArraySizeInitializationModifier2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeModifier1: nodes [
	| result |
	result := VBNetArrayTypeModifierNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeModifier2: nodes [
	| result |
	result := VBNetArrayTypeModifierNode new.
	result leftParen: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result commas.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeName1: nodes [
	| result |
	result := VBNetArrayTypeNameNode new.
	result type: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result arrayTypeModifiers.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute2: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute3: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result arguments.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute4: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute5: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute6: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result arguments.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeArguments2: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addFirst: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock1: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock3: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock4: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock6: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock__attributeBlock__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeList1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributes1: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributesNamespaceDeclaration1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributesNamespaceDeclaration2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration10: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result equals: ((nodes at: 10) at: 1).
	result value: ((nodes at: 10) at: 2).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration11: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result equals: ((nodes at: 8) at: 1).
	result value: ((nodes at: 8) at: 2).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration12: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result equals: ((nodes at: 11) at: 1).
	result value: ((nodes at: 11) at: 2).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration13: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result newToken: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result addToken: ((nodes at: 6) at: 2) to: result leftParens.
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 6) at: 4) to: result arguments.
	result addTokens: ((nodes at: 6) at: 5) to: result commas.
	result addTokens: ((nodes at: 6) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 6) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 6) at: 8) to: result namedArguments.
	result initializer: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration14: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result newToken: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result addToken: ((nodes at: 7) at: 2) to: result leftParens.
	result addToken: ((nodes at: 7) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 7) at: 4) to: result arguments.
	result addTokens: ((nodes at: 7) at: 5) to: result commas.
	result addTokens: ((nodes at: 7) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 7) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 7) at: 8) to: result namedArguments.
	result initializer: (nodes at: 8).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration15: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result newToken: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result addToken: ((nodes at: 8) at: 2) to: result leftParens.
	result addToken: ((nodes at: 8) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 8) at: 4) to: result arguments.
	result addTokens: ((nodes at: 8) at: 5) to: result commas.
	result addTokens: ((nodes at: 8) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 8) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 8) at: 8) to: result namedArguments.
	result initializer: (nodes at: 9).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration16: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 9) at: 4) to: result arguments.
	result addTokens: ((nodes at: 9) at: 5) to: result commas.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration17: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 9) at: 4) to: result arguments.
	result addTokens: ((nodes at: 9) at: 5) to: result commas.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration18: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 10) at: 4) to: result arguments.
	result addTokens: ((nodes at: 10) at: 5) to: result commas.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration19: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result newToken: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result addToken: ((nodes at: 7) at: 2) to: result leftParens.
	result addToken: ((nodes at: 7) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 7) at: 4) to: result arguments.
	result addTokens: ((nodes at: 7) at: 5) to: result commas.
	result addTokens: ((nodes at: 7) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 7) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 7) at: 8) to: result namedArguments.
	result initializer: (nodes at: 8).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equals: ((nodes at: 4) at: 1).
	result value: ((nodes at: 4) at: 2).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration20: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result newToken: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result addToken: ((nodes at: 8) at: 2) to: result leftParens.
	result addToken: ((nodes at: 8) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 8) at: 4) to: result arguments.
	result addTokens: ((nodes at: 8) at: 5) to: result commas.
	result addTokens: ((nodes at: 8) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 8) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 8) at: 8) to: result namedArguments.
	result initializer: (nodes at: 9).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration21: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 9) at: 4) to: result arguments.
	result addTokens: ((nodes at: 9) at: 5) to: result commas.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration22: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 10) at: 4) to: result arguments.
	result addTokens: ((nodes at: 10) at: 5) to: result commas.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration23: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 10) at: 4) to: result arguments.
	result addTokens: ((nodes at: 10) at: 5) to: result commas.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration24: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result newToken: (nodes at: 10).
	result type: ((nodes at: 11) at: 1).
	result addToken: ((nodes at: 11) at: 2) to: result leftParens.
	result addToken: ((nodes at: 11) at: 3) to: result rightParens.
	result addNodes: ((nodes at: 11) at: 4) to: result arguments.
	result addTokens: ((nodes at: 11) at: 5) to: result commas.
	result addTokens: ((nodes at: 11) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 11) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 11) at: 8) to: result namedArguments.
	result initializer: (nodes at: 12).
	result implementsToken: ((nodes at: 13) at: 1).
	result addNodes: ((nodes at: 13) at: 2) to: result implements.
	result addTokens: ((nodes at: 13) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result type: (nodes at: 6).
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result equals: ((nodes at: 6) at: 1).
	result value: ((nodes at: 6) at: 2).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	result equals: ((nodes at: 9) at: 1).
	result value: ((nodes at: 9) at: 2).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result equals: ((nodes at: 10) at: 1).
	result value: ((nodes at: 10) at: 2).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equals: ((nodes at: 5) at: 1).
	result value: ((nodes at: 5) at: 2).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result type: (nodes at: 7).
	result equals: ((nodes at: 8) at: 1).
	result value: ((nodes at: 8) at: 2).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration9: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAwaitOperatorExpression1: nodes [
	| result |
	result := VBNetAwaitExpressionNode new.
	result awaitToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement1: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement2: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement3: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement4: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement5: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement6: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result else: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement7: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement8: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result else: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBound2: nodes [
	| result |
	result := VBNetBoundExpressionNode new.
	result from: (nodes at: 1).
	result toToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBuiltInTypeName1: nodes [
	| result |
	result := VBNetBuiltInTypeNameNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause1: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause2: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause3: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 2) to: result operators.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause4: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 2) to: result operators.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause5: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 3) to: result operators.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause6: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 3) to: result operators.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause7: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause8: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result value: (nodes at: 1).
	result toToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseElseStatement1: nodes [
	| result |
	result := VBNetCaseElseStatementNode new.
	result caseToken: (nodes at: 1).
	result elseToken: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseElseStatement2: nodes [
	| result |
	result := VBNetCaseElseStatementNode new.
	result caseToken: (nodes at: 1).
	result elseToken: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseStatement1: nodes [
	| result |
	result := VBNetCaseStatementNode new.
	result caseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseStatement2: nodes [
	| result |
	result := VBNetCaseStatementNode new.
	result caseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCastExpression3: nodes [
	| result |
	result := VBNetCastExpressionNode new.
	result castType: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result comma: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCastExpression4: nodes [
	| result |
	result := VBNetPrimitiveCastExpressionNode new.
	result type: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement1: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement2: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result whenToken: (nodes at: 2).
	result when: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement3: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement4: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result whenToken: (nodes at: 3).
	result when: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement5: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement6: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result whenToken: (nodes at: 5).
	result when: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassBase1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassBase2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration10: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration11: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration12: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration13: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration14: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration15: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration16: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration17: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration18: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration19: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration1: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration20: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration21: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration22: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration23: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration24: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration25: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration26: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration27: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration28: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration29: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration2: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration30: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration31: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration32: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration3: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration4: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration5: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration6: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration7: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration8: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration9: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionInitializer1: nodes [
	| result |
	result := VBNetCollectionInitializerNode new.
	result leftBrace: (nodes at: 1).
	result rightBrace: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionInitializer2: nodes [
	| result |
	result := VBNetCollectionInitializerNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration3: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration4: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclarationList1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self add: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCompoundAssignmentStatement2: nodes [
	| result |
	result := VBNetAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConcatenationOperatorExpression1: nodes [
	| result |
	result := VBNetBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConcatenationOperatorExpression2: nodes [
	| result |
	result := VBNetBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConditionalExpression1: nodes [
	| result |
	result := VBNetConditionalExpressionNode new.
	result ifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result booleanValue: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result trueValue: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result falseValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConditionalExpression2: nodes [
	| result |
	result := VBNetConditionalExpressionNode new.
	result ifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result booleanValue: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result trueValue: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantDeclarator1: nodes [
	| result |
	result := VBNetConstantDeclaratorNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantDeclarator2: nodes [
	| result |
	result := VBNetConstantDeclaratorNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration1: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result constToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result constants.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration2: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result constToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result constants.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration3: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result constToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result constants.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration4: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result constToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result constants.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint1: nodes [
	| result |
	result := VBNetTypeConstraintNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint2: nodes [
	| result |
	result := VBNetNewConstraintNode new.
	result newToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint3: nodes [
	| result |
	result := VBNetStructureConstraintNode new.
	result structureToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint4: nodes [
	| result |
	result := VBNetClassConstraintNode new.
	result classToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration10: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration11: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration12: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result subTokens.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration1: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration2: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration3: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration4: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration5: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration6: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration7: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration8: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration9: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForContinueStatement1: nodes [
	| result |
	result := VBNetContinueStatementNode new.
	result continueToken: (nodes at: 1).
	result continue: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration10: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration11: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration12: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration13: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration14: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	result addToken: (nodes at: 13) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration15: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addToken: (nodes at: 9) to: result statementSeparators.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration16: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addToken: (nodes at: 9) to: result statementSeparators.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	result addToken: (nodes at: 13) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration1: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration2: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration3: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration4: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration5: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration6: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration7: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration8: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration9: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration1: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result delegateToken: (nodes at: 2).
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration2: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result delegateToken: (nodes at: 2).
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration3: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result delegateToken: (nodes at: 3).
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration4: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result delegateToken: (nodes at: 3).
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDictionaryAccessExpression1: nodes [
	| result |
	result := VBNetDictionaryAccessExpressionNode new.
	result bangToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDictionaryAccessExpression2: nodes [
	| result |
	result := VBNetDictionaryAccessExpressionNode new.
	result value: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoBottomLoopStatement1: nodes [
	| result |
	result := VBNetDoBottomLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	result addToken: (nodes at: 4) to: result loopTokens.
	result addToken: (nodes at: 5) to: result loopTokens.
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoTopLoopStatement1: nodes [
	| result |
	result := VBNetDoTopLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	result addToken: (nodes at: 4) to: result loopTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoTopLoopStatement2: nodes [
	| result |
	result := VBNetDoTopLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result loopTokens.
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addToken: (nodes at: 6) to: result loopTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement1: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement2: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement3: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement4: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseStatement1: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseStatement2: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result statementSeparator: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEndStatement1: nodes [
	| result |
	result := VBNetEndStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration10: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration11: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration12: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration13: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration14: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration15: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration16: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration1: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration2: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration3: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration4: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration5: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration6: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration7: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration8: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration9: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration1: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration2: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result statementSeparator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration3: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration4: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration5: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration6: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration7: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration8: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEraseStatement1: nodes [
	| result |
	result := VBNetEraseStatementNode new.
	result eraseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arraies.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause1: nodes [
	| result |
	result := VBNetGotoClauseNode new.
	result gotoToken: (nodes at: 1).
	result minus: (nodes at: 2).
	result location: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause2: nodes [
	| result |
	result := VBNetGotoClauseNode new.
	result gotoToken: (nodes at: 1).
	result location: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause4: nodes [
	| result |
	result := VBNetResumeClauseNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorStatement1: nodes [
	| result |
	result := VBNetErrorStatementNode new.
	result errorToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEventMemberSpecifier7: nodes [
	| result |
	result := VBNetEventMemberSpecifierNode new.
	result addToken: (nodes at: 1) to: result names.
	result period: (nodes at: 2).
	result addToken: (nodes at: 3) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEventMemberSpecifier8: nodes [
	| result |
	result := VBNetEventMemberSpecifierNode new.
	result addToken: (nodes at: 1) to: result names.
	result period: (nodes at: 2).
	result addToken: (nodes at: 4) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExitStatement1: nodes [
	| result |
	result := VBNetExitStatementNode new.
	result exitToken: (nodes at: 1).
	result exit: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExpressionRangeVariableDeclaration1: nodes [
	| result |
	result := VBNetExpressionRangeVariableDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExpressionRangeVariableDeclaration2: nodes [
	| result |
	result := VBNetExpressionRangeVariableDeclarationNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration10: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration11: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration12: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration13: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration14: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration15: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration16: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration17: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration18: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration19: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration1: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 6) at: 1).
	result type: ((nodes at: 6) at: 2).
	result addNodes: ((nodes at: 6) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration20: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration21: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration22: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration23: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration24: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration25: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration26: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration27: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration28: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration29: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration2: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 6) at: 1).
	result type: ((nodes at: 6) at: 2).
	result addNodes: ((nodes at: 6) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration30: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration31: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result asToken: ((nodes at: 12) at: 1).
	result type: ((nodes at: 12) at: 2).
	result addNodes: ((nodes at: 12) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration32: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result asToken: ((nodes at: 12) at: 1).
	result type: ((nodes at: 12) at: 2).
	result addNodes: ((nodes at: 12) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration3: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration4: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration5: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration6: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration7: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration8: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration9: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration10: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration11: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration12: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration13: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration14: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration15: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration16: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration17: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration18: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration19: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration1: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration20: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration21: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration22: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration23: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration24: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration25: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration26: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration27: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration28: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration29: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration2: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration30: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration31: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration32: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration3: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration4: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration5: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration6: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration7: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration8: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration9: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer1: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer2: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer3: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer4: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer5: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer6: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	result equals: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFile1: nodes [
	| result |
	result := VBNetFileNode new.
	result addNodes: ((nodes at: 2) at: 1) to: result options.
	result addNodes: ((nodes at: 2) at: 2) to: result imports.
	result addNodes: ((nodes at: 2) at: 3) to: result declarations.
	result addNodes: ((nodes at: 2) at: 4) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFinallyStatement1: nodes [
	| result |
	result := VBNetFinallyStatementNode new.
	result finallyToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement1: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement2: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result nextToken: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result nexts.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement3: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement4: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result nexts.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement1: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement2: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result nexts.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement3: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement4: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result nextToken: (nodes at: 11).
	result addNodes: ((nodes at: 12) at: 1) to: result nexts.
	result addTokens: ((nodes at: 12) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromOrAggregateQueryOperator1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromOrAggregateQueryOperator2: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 20) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromQueryOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromQueryOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result functionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result functionToken: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration5: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration6: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration7: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result functionToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration8: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result functionToken: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature10: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature11: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature12: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature1: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature2: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attributeBlocks.
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature3: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature4: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature5: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature6: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature7: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature8: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature9: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGetTypeExpression1: nodes [
	| result |
	result := VBNetGetTypeExpressionNode new.
	result getTypeToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBNetGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result goto: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator10: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator11: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator12: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 9).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 5).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator2: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator3: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator4: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator5: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator6: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator7: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator8: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator9: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator10: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator11: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator12: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator13: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator14: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator15: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 7) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator16: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 7) to: (result at: 8).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 9) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 9) at: 4) to: (result at: 12).
	self add: (nodes at: 11) to: (result at: 13).
	self addAll: ((nodes at: 13) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 13) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator1: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	self add: (nodes at: 7) to: (result at: 13).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator3: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator4: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator5: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator6: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator7: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator8: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator9: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForHandlesOrImplements1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForHandlesOrImplements2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 4 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers3: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers4: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImplementsClause_1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImportsStatement1: nodes [
	| result |
	result := VBNetImportsStatementNode new.
	result importsToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result imports.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImportsStatement2: nodes [
	| result |
	result := VBNetImportsStatementNode new.
	result importsToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result imports.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInstanceExpression1: nodes [
	| result |
	result := VBNetInstanceExpressionNode new.
	result meToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration10: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration11: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration12: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration13: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration14: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration15: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration16: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration1: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration2: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration3: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration4: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration5: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration6: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration7: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration8: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration9: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceMemberSpecifier1: nodes [
	| result |
	result := VBNetInterfaceMemberSpecifierNode new.
	result type: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceMemberSpecifier2: nodes [
	| result |
	result := VBNetInterfaceMemberSpecifierNode new.
	result type: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfacePropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfacePropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfacePropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfacePropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationExpression1: nodes [
	| result |
	result := VBNetInvocationExpressionNode new.
	result receiver: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationExpression2: nodes [
	| result |
	result := VBNetInvocationExpressionNode new.
	result receiver: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result arguments.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addTokens: ((nodes at: 3) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 3) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 3) at: 5) to: result namedArguments.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationStatement1: nodes [
	| result |
	result := VBNetInvocationStatementNode new.
	result expression: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationStatement2: nodes [
	| result |
	result := VBNetInvocationStatementNode new.
	result callToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinCondition2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinConditionList1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinOrGroupJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator10: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator11: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator12: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator13: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator14: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator15: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 6) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator16: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 6) to: (result at: 7).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator1: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 3) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 3) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator3: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator4: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator5: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator6: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator7: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator8: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator9: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLabelDeclarationStatement1: nodes [
	| result |
	result := VBNetLabelDeclarationStatementNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLetQueryOperator1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLetQueryOperator2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineElseStatement1: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineIfThenStatement1: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineIfThenStatement2: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result statements.
	result else: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral1: nodes [
	| result |
	result := VBNetBooleanLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral2: nodes [
	| result |
	result := VBNetIntegerLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral3: nodes [
	| result |
	result := VBNetFloatingPointLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral4: nodes [
	| result |
	result := VBNetStringLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral5: nodes [
	| result |
	result := VBNetCharacterLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral6: nodes [
	| result |
	result := VBNetDateLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral7: nodes [
	| result |
	result := VBNetNothingLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLocalDeclarationStatement1: nodes [
	| result |
	result := VBNetLocalDeclarationStatementNode new.
	result modifier: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLoopControlVariable1: nodes [
	| result |
	result := VBNetLoopControlVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLoopControlVariable2: nodes [
	| result |
	result := VBNetLoopControlVariableNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase3: nodes [
	| result |
	result := VBNetGlobalNode new.
	result globalToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase4: nodes [
	| result |
	result := VBNetMyClassNode new.
	result myClassToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase5: nodes [
	| result |
	result := VBNetMyBaseNode new.
	result myBaseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression1: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression2: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result ofToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result types.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression3: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression4: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result ofToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result types.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression5: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression6: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result ofToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result types.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression7: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression8: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result ofToken: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result types.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMembersImportsClause1: nodes [
	| result |
	result := VBNetMembersImportsClauseNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement1: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result string: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result start: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result equals: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement2: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result string: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result start: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result length: (nodes at: 7).
	result rightParen: (nodes at: 8).
	result equals: (nodes at: 9).
	result value: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement3: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result typeCharToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result string: (nodes at: 4).
	result addToken: (nodes at: 5) to: result commas.
	result start: (nodes at: 6).
	result rightParen: (nodes at: 7).
	result equals: (nodes at: 8).
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement4: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result typeCharToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result string: (nodes at: 4).
	result addToken: (nodes at: 5) to: result commas.
	result start: (nodes at: 6).
	result addToken: (nodes at: 7) to: result commas.
	result length: (nodes at: 8).
	result rightParen: (nodes at: 9).
	result equals: (nodes at: 10).
	result value: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration1: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration2: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration3: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration4: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration5: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration6: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration7: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration8: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda1: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda2: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda3: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda4: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda5: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda6: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda1: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda2: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda3: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration5: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration6: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration7: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration8: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result addToken: ((nodes at: 4) at: 1) to: result propertyTokens.
	result name: ((nodes at: 4) at: 2).
	result asToken: ((nodes at: 4) at: 3).
	result type: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 4) at: 6).
	result rightParen: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result parameters.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result addToken: ((nodes at: 4) at: 1) to: result propertyTokens.
	result name: ((nodes at: 4) at: 2).
	result asToken: ((nodes at: 4) at: 3).
	result type: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 4) at: 6).
	result rightParen: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result parameters.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result addToken: ((nodes at: 4) at: 1) to: result propertyTokens.
	result name: ((nodes at: 4) at: 2).
	result asToken: ((nodes at: 4) at: 3).
	result type: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 4) at: 6).
	result rightParen: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result parameters.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result addToken: ((nodes at: 4) at: 1) to: result propertyTokens.
	result name: ((nodes at: 4) at: 2).
	result asToken: ((nodes at: 4) at: 3).
	result type: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 4) at: 6).
	result rightParen: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result parameters.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result addToken: ((nodes at: 5) at: 1) to: result propertyTokens.
	result name: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 5) at: 3).
	result type: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 5) at: 6).
	result rightParen: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result parameters.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result addToken: ((nodes at: 5) at: 1) to: result propertyTokens.
	result name: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 5) at: 3).
	result type: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 5) at: 6).
	result rightParen: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result parameters.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result addToken: ((nodes at: 5) at: 1) to: result propertyTokens.
	result name: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 5) at: 3).
	result type: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 5) at: 6).
	result rightParen: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result parameters.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result addToken: ((nodes at: 5) at: 1) to: result propertyTokens.
	result name: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 5) at: 3).
	result type: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 5) at: 6).
	result rightParen: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result parameters.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration5: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration6: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration7: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration8: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamedArgumentList1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration1: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration2: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	result addToken: (nodes at: 7) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration3: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addToken: (nodes at: 3) to: result statementSeparators.
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration4: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addToken: (nodes at: 3) to: result statementSeparators.
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	result addToken: (nodes at: 7) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceMemberDeclaration_1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceMemberDeclaration_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName4: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNullableTypeName1: nodes [
	| result |
	result := VBNetNullableTypeNameNode new.
	result type: (nodes at: 1).
	result nullableToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCollectionInitializer1: nodes [
	| result |
	result := VBNetObjectCollectionInitializerNode new.
	result fromToken: (nodes at: 1).
	result initializer: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression1: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression2: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result initializer: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression3: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression4: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result initializer: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression5: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result arguments.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression6: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result arguments.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result addToken: (nodes at: 5) to: result rightParens.
	result initializer: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectMemberInitializer1: nodes [
	| result |
	result := VBNetObjectMemberInitializerNode new.
	result withToken: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result initializers.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOnErrorStatement1: nodes [
	| result |
	result := VBNetOnErrorStatementNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result clause: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration10: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	result statementSeparator: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration11: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result addNodes: (nodes at: 12) to: result statements.
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration12: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result addNodes: (nodes at: 12) to: result statements.
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result operatorTokens.
	result statementSeparator: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration1: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration2: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result operatorTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration3: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result type: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration4: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result type: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result operatorTokens.
	result statementSeparator: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration5: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration6: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	result statementSeparator: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration7: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration8: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result operatorTokens.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration9: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionCompareStatement1: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionCompareStatement2: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result value: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionExplicitStatement1: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionExplicitStatement2: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionStatement__option__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionStatement__option__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderByQueryOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderByQueryOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderExpression1: nodes [
	| result |
	result := VBNetOrderExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderExpression2: nodes [
	| result |
	result := VBNetOrderExpressionNode new.
	result value: (nodes at: 1).
	result order: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result equals: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result equals: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameterIdentifier1: nodes [
	| result |
	result := VBNetParameterIdentifierNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType1: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType2: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType4: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParenthesizedExpression1: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator5: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator6: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator7: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator8: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration1: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addToken: (nodes at: 1) to: result getTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration2: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addToken: (nodes at: 1) to: result getTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result getTokens.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration3: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration4: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration5: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration6: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration7: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result getTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration8: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result getTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result getTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration10: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration11: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration12: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration13: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration14: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration15: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration16: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration17: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration18: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration19: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration1: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration20: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration21: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration22: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration23: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration24: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result setTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration2: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result setTokens.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration3: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration4: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration5: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration6: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration7: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration8: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration9: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature1: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature2: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature3: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature4: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature5: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature6: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature7: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature8: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature9: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	result at: 4 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName1: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName2: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 1) to: result leftParens.
	result addToken: ((nodes at: 2) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 2) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result addTokens: ((nodes at: 3) at: 1) to: result periods.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName3: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result periods.
	result addTokens: ((nodes at: 4) at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 4) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName4: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addToken: ((nodes at: 4) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName5: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName6: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result addToken: ((nodes at: 5) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addTokens: ((nodes at: 6) at: 1) to: result periods.
	result addTokens: ((nodes at: 6) at: 2) to: result names.
	result addTokens: ((nodes at: 6) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 6) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 6) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 6) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName1: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName2: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 1) to: result leftParens.
	result addToken: ((nodes at: 2) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 2) at: 3) to: result types.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result addToken: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 1) to: result periods.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 3) at: 6) to: result types.
	result addTokens: ((nodes at: 3) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName3: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result periods.
	result addTokens: ((nodes at: 4) at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 4) at: 6) to: result types.
	result addTokens: ((nodes at: 4) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName4: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addToken: ((nodes at: 4) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result types.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result addToken: ((nodes at: 4) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 5) at: 6) to: result types.
	result addTokens: ((nodes at: 5) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName5: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 5) at: 6) to: result types.
	result addTokens: ((nodes at: 5) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName6: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result addToken: ((nodes at: 5) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 5) at: 3) to: result types.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addToken: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 6) at: 1) to: result periods.
	result addTokens: ((nodes at: 6) at: 2) to: result names.
	result addTokens: ((nodes at: 6) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 6) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 6) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 6) at: 6) to: result types.
	result addTokens: ((nodes at: 6) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := VBNetQueryExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result fromTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result names.
	result addTokens: ((nodes at: 1) at: 3) to: result inTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result values.
	result addTokens: ((nodes at: 1) at: 5) to: result asTokens.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addTokens: ((nodes at: 1) at: 8) to: result aggregateTokens.
	result addTokens: ((nodes at: 1) at: 9) to: result intoTokens.
	result addNodes: ((nodes at: 1) at: 10) to: result declarations.
	result addTokens: ((nodes at: 1) at: 11) to: result selectTokens.
	result addTokens: ((nodes at: 1) at: 12) to: result distinctTokens.
	result addNodes: ((nodes at: 1) at: 13) to: result expressions.
	result addTokens: ((nodes at: 1) at: 14) to: result orderTokens.
	result addTokens: ((nodes at: 1) at: 15) to: result byTokens.
	result addTokens: ((nodes at: 1) at: 16) to: result takeTokens.
	result addTokens: ((nodes at: 1) at: 17) to: result whileTokens.
	result addTokens: ((nodes at: 1) at: 18) to: result skipTokens.
	result addTokens: ((nodes at: 1) at: 19) to: result letTokens.
	result addTokens: ((nodes at: 1) at: 20) to: result groupTokens.
	result addTokens: ((nodes at: 1) at: 21) to: result joinTokens.
	result addTokens: ((nodes at: 1) at: 22) to: result onTokens.
	result addNodes: ((nodes at: 1) at: 23) to: result lhses.
	result addTokens: ((nodes at: 1) at: 24) to: result equalsTokens.
	result addNodes: ((nodes at: 1) at: 25) to: result rhses.
	result addTokens: ((nodes at: 1) at: 26) to: result andTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result fromTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result aggregateTokens.
	result addTokens: ((nodes at: 2) at: 3) to: result names.
	result addTokens: ((nodes at: 2) at: 4) to: result inTokens.
	result addNodes: ((nodes at: 2) at: 5) to: result values.
	result addTokens: ((nodes at: 2) at: 6) to: result asTokens.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result intoTokens.
	result addNodes: ((nodes at: 2) at: 9) to: result declarations.
	result addTokens: ((nodes at: 2) at: 10) to: result selectTokens.
	result addTokens: ((nodes at: 2) at: 11) to: result distinctTokens.
	result addNodes: ((nodes at: 2) at: 12) to: result expressions.
	result addTokens: ((nodes at: 2) at: 13) to: result orderTokens.
	result addTokens: ((nodes at: 2) at: 14) to: result byTokens.
	result addTokens: ((nodes at: 2) at: 15) to: result takeTokens.
	result addTokens: ((nodes at: 2) at: 16) to: result whileTokens.
	result addTokens: ((nodes at: 2) at: 17) to: result skipTokens.
	result addTokens: ((nodes at: 2) at: 18) to: result letTokens.
	result addTokens: ((nodes at: 2) at: 19) to: result groupTokens.
	result addTokens: ((nodes at: 2) at: 20) to: result commas.
	result addTokens: ((nodes at: 2) at: 21) to: result joinTokens.
	result addTokens: ((nodes at: 2) at: 22) to: result onTokens.
	result addNodes: ((nodes at: 2) at: 23) to: result lhses.
	result addTokens: ((nodes at: 2) at: 24) to: result equalsTokens.
	result addNodes: ((nodes at: 2) at: 25) to: result rhses.
	result addTokens: ((nodes at: 2) at: 26) to: result andTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator10: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 21).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 22).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 23).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 24).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 25).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 26).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator3: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator4: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator5: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator6: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 14).
	self add: ((nodes at: 1) at: 2) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator7: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 16).
	self add: ((nodes at: 1) at: 2) to: (result at: 13).
	self add: ((nodes at: 1) at: 3) to: (result at: 17).
	self add: ((nodes at: 1) at: 4) to: (result at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator8: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator9: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 20).
	self add: ((nodes at: 1) at: 2) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	self add: ((nodes at: 1) at: 5) to: (result at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration1: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addToken: (nodes at: 1) to: result raiseEventTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result raiseEventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration2: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addToken: (nodes at: 1) to: result raiseEventTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result raiseEventTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration3: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result raiseEventTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result raiseEventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration4: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result raiseEventTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result raiseEventTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement1: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement2: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement3: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result arguments.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimClause1: nodes [
	| result |
	result := VBNetRedimClauseNode new.
	result array: (nodes at: 1).
	result leftParen: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result bounds.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result rightParen: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result arrayTypeModifiers.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimStatement1: nodes [
	| result |
	result := VBNetRedimStatementNode new.
	result redimToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result redims.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimStatement2: nodes [
	| result |
	result := VBNetRedimStatementNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result redims.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularAssignmentStatement1: nodes [
	| result |
	result := VBNetAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration1: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration2: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration3: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration4: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration5: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration6: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration7: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration8: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result addNodes: (nodes at: 4) to: result declarations.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result addNodes: (nodes at: 4) to: result declarations.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result propertyTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration1: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result removeHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result removeHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration2: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result removeHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result removeHandlerTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration3: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result removeHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result removeHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration4: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result removeHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result removeHandlerTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerStatement1: nodes [
	| result |
	result := VBNetRemoveHandlerStatementNode new.
	result removeHandlerToken: (nodes at: 1).
	result event: (nodes at: 2).
	result comma: (nodes at: 3).
	result handler: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForResumeStatement1: nodes [
	| result |
	result := VBNetResumeStatementNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForResumeStatement2: nodes [
	| result |
	result := VBNetResumeStatementNode new.
	result resumeToken: (nodes at: 1).
	result resume: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForReturnStatement1: nodes [
	| result |
	result := VBNetReturnStatementNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForReturnStatement2: nodes [
	| result |
	result := VBNetReturnStatementNode new.
	result returnToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement1: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result cases.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement2: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result cases.
	result else: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement3: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result caseToken: (nodes at: 2).
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result cases.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement4: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result caseToken: (nodes at: 2).
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result cases.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSimpleNameExpression1: nodes [
	| result |
	result := VBNetSimpleNameExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSimpleNameExpression2: nodes [
	| result |
	result := VBNetSimpleNameExpressionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result ofToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result types.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda1: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addNode: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda2: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNode: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda3: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNode: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda4: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addNode: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda5: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNode: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda6: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNode: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	self addAll: (nodes at: 3) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStatements2: nodes [
	| result |
	result := VBNetLineStatementNode new.
	result
		addTokens: ((nodes at: 1) at: 1)
		to: result statementSeparators.
	result addNodes: ((nodes at: 1) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStatements3: nodes [
	| result |
	result := VBNetLineStatementNode new.
	result addNode: (nodes at: 1) to: result statements.
	result
		addTokens: ((nodes at: 2) at: 1)
		to: result statementSeparators.
	result addNodes: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStopStatement1: nodes [
	| result |
	result := VBNetStopStatementNode new.
	result stopToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration10: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration11: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration12: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration13: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration14: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration15: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration16: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration1: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration2: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration3: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration4: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration5: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration6: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration7: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration8: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration9: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result subToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result subToken: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration5: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration6: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration7: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result subToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration8: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result subToken: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature1: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature2: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature3: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature4: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature5: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature6: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSyncLockStatement1: nodes [
	| result |
	result := VBNetSyncLockStatementNode new.
	result addToken: (nodes at: 1) to: result syncLockTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result syncLockTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForThrowStatement1: nodes [
	| result |
	result := VBNetThrowStatementNode new.
	result throwToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForThrowStatement2: nodes [
	| result |
	result := VBNetThrowStatementNode new.
	result throwToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTryStatement1: nodes [
	| result |
	result := VBNetTryStatementNode new.
	result addToken: (nodes at: 1) to: result tryTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: (nodes at: 4) to: result catches.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result tryTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTryStatement2: nodes [
	| result |
	result := VBNetTryStatementNode new.
	result addToken: (nodes at: 1) to: result tryTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: (nodes at: 4) to: result catches.
	result finally: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result tryTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArguments1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArityList1: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArityList2: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 4).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeImplementsClause1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeImplementsClause2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeImplementsClause_1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeImplementsClause_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeOfIsExpression1: nodes [
	| result |
	result := VBNetTypeOfIsExpressionNode new.
	result typeOfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result _isToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeOfIsExpression2: nodes [
	| result |
	result := VBNetTypeOfIsExpressionNode new.
	result typeOfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result _isToken: (nodes at: 3).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter1: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter2: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result name: (nodes at: 1).
	result asToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result constraints.
	result leftBrace: ((nodes at: 2) at: 3).
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightBrace: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter3: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result modifier: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter4: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result modifier: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result constraints.
	result leftBrace: ((nodes at: 3) at: 3).
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	result rightBrace: ((nodes at: 3) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterConstraints1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterConstraints2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterList1: nodes [
	| result |
	result := VBNetTypeParameterListNode new.
	result leftParen: (nodes at: 1).
	result ofToken: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result typeParameters.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUnaryPlusExpression1: nodes [
	| result |
	result := VBNetUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUsingResources2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := VBNetUsingStatementNode new.
	result addToken: (nodes at: 1) to: result usingTokens.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result usingTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator1: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator2: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator3: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator4: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator5: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableIdentifier1: nodes [
	| result |
	result := VBNetVariableIdentifierNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration1: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration2: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration3: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addNodes: ((nodes at: 3) at: 1) to: result variables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration4: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addNodes: ((nodes at: 3) at: 1) to: result variables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariablePropertyInitializer1: nodes [
	| result |
	result := VBNetVariablePropertyInitializerNode new.
	result name: (nodes at: 1).
	result colonEquals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWhereQueryOperator2: nodes [
	^ nodes at: 3
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWhileStatement1: nodes [
	| result |
	result := VBNetWhileStatementNode new.
	result addToken: (nodes at: 1) to: result whileTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whileTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWithStatement1: nodes [
	| result |
	result := VBNetWithStatementNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForYieldStatement1: nodes [
	| result |
	result := VBNetYieldStatementNode new.
	result yieldToken: (nodes at: 1).
	result yield: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_AttributeArgumentExpression__argument____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration__1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Equals_Expression__value___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator_2: nodes [
	| result |
	result := nodes at: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator__1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 20).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 20) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____1: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____2: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____3: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis______1: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___And___andToken___LineTerminator___JoinCondition__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___And___andToken___LineTerminator___JoinCondition__2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 3) at: 1).
	result at: 3 put: ((nodes at: 3) at: 2).
	result at: 4 put: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type__1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type__2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_______period___LineTerminator____IdentifierOrKeyword___name__2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_______statementSeparator__Statement__statement_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__1: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__2: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: ((nodes at: 3) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__3: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__4: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: ((nodes at: 4) at: 1).
	result at: 4 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 6).
	result at: 7 put: ((nodes at: 4) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self add: ((nodes at: 2) at: 7) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__1: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__2: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	result at: 5 put: ((nodes at: 3) at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__3: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__4: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: ((nodes at: 4) at: 1).
	result at: 4 put: ((nodes at: 4) at: 2).
	result at: 5 put: ((nodes at: 4) at: 3).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #testing }
VBNetParser >> tryAllTokens [
	^ true
]
